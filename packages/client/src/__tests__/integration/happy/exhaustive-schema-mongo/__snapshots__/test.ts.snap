// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`exhaustive-schema: generatedBrowserJS 1`] = `

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: local
 * Query Engine version: local
 */
Prisma.prismaVersion = {
  client: "local",
  engine: "local"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(\`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues\`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(\`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues\`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(\`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues\`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(\`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues\`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(\`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues\`,
)}
Prisma.NotFoundError = () => {
  throw new Error(\`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues\`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(\`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues\`,
)}
Prisma.empty = () => {
  throw new Error(\`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues\`,
)}
Prisma.join = () => {
  throw new Error(\`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues\`,
)}
Prisma.raw = () => {
  throw new Error(\`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues\`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.AScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  int: 'int',
  sInt: 'sInt',
  bInt: 'bInt'
};

exports.Prisma.BScalarFieldEnum = {
  id: 'id',
  float: 'float',
  dFloat: 'dFloat'
};

exports.Prisma.CScalarFieldEnum = {
  id: 'id',
  char: 'char',
  vChar: 'vChar',
  text: 'text',
  bit: 'bit',
  vBit: 'vBit',
  uuid: 'uuid'
};

exports.Prisma.DScalarFieldEnum = {
  id: 'id',
  bool: 'bool',
  byteA: 'byteA',
  xml: 'xml',
  json: 'json',
  jsonb: 'jsonb',
  list: 'list'
};

exports.Prisma.EScalarFieldEnum = {
  id: 'id',
  date: 'date',
  time: 'time',
  ts: 'ts'
};

exports.Prisma.EmbedHolderScalarFieldEnum = {
  id: 'id',
  time: 'time',
  text: 'text',
  boolean: 'boolean'
};

exports.Prisma.MScalarFieldEnum = {
  id: 'id',
  n_ids: 'n_ids',
  int: 'int',
  optionalInt: 'optionalInt',
  float: 'float',
  optionalFloat: 'optionalFloat',
  string: 'string',
  optionalString: 'optionalString',
  json: 'json',
  optionalJson: 'optionalJson',
  enum: 'enum',
  optionalEnum: 'optionalEnum',
  boolean: 'boolean',
  optionalBoolean: 'optionalBoolean'
};

exports.Prisma.ManyRequiredScalarFieldEnum = {
  id: 'id',
  oneOptionalId: 'oneOptionalId',
  int: 'int',
  optionalInt: 'optionalInt',
  float: 'float',
  optionalFloat: 'optionalFloat',
  string: 'string',
  optionalString: 'optionalString',
  json: 'json',
  optionalJson: 'optionalJson',
  enum: 'enum',
  optionalEnum: 'optionalEnum',
  boolean: 'boolean',
  optionalBoolean: 'optionalBoolean'
};

exports.Prisma.NScalarFieldEnum = {
  id: 'id',
  m_ids: 'm_ids',
  int: 'int',
  optionalInt: 'optionalInt',
  float: 'float',
  optionalFloat: 'optionalFloat',
  string: 'string',
  optionalString: 'optionalString',
  json: 'json',
  optionalJson: 'optionalJson',
  enum: 'enum',
  optionalEnum: 'optionalEnum',
  boolean: 'boolean',
  optionalBoolean: 'optionalBoolean'
};

exports.Prisma.OneOptionalScalarFieldEnum = {
  id: 'id',
  int: 'int',
  optionalInt: 'optionalInt',
  float: 'float',
  optionalFloat: 'optionalFloat',
  string: 'string',
  optionalString: 'optionalString',
  json: 'json',
  optionalJson: 'optionalJson',
  enum: 'enum',
  optionalEnum: 'optionalEnum',
  boolean: 'boolean',
  optionalBoolean: 'optionalBoolean'
};

exports.Prisma.OptionalSide1ScalarFieldEnum = {
  id: 'id',
  optionalSide2Id: 'optionalSide2Id',
  int: 'int',
  optionalInt: 'optionalInt',
  float: 'float',
  optionalFloat: 'optionalFloat',
  string: 'string',
  optionalString: 'optionalString',
  json: 'json',
  optionalJson: 'optionalJson',
  enum: 'enum',
  optionalEnum: 'optionalEnum',
  boolean: 'boolean',
  optionalBoolean: 'optionalBoolean'
};

exports.Prisma.OptionalSide2ScalarFieldEnum = {
  id: 'id',
  int: 'int',
  optionalInt: 'optionalInt',
  float: 'float',
  optionalFloat: 'optionalFloat',
  string: 'string',
  optionalString: 'optionalString',
  json: 'json',
  optionalJson: 'optionalJson',
  enum: 'enum',
  optionalEnum: 'optionalEnum',
  boolean: 'boolean',
  optionalBoolean: 'optionalBoolean'
};

exports.Prisma.PostScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  title: 'title',
  content: 'content',
  published: 'published',
  authorId: 'authorId'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  int: 'int',
  optionalInt: 'optionalInt',
  float: 'float',
  optionalFloat: 'optionalFloat',
  string: 'string',
  optionalString: 'optionalString',
  json: 'json',
  optionalJson: 'optionalJson',
  enum: 'enum',
  optionalEnum: 'optionalEnum',
  boolean: 'boolean',
  optionalBoolean: 'optionalBoolean',
  embedHolderId: 'embedHolderId'
};
exports.ABeautifulEnum = {
  A: 'A',
  B: 'B',
  C: 'C'
};

exports.Prisma.ModelName = {
  Post: 'Post',
  User: 'User',
  EmbedHolder: 'EmbedHolder',
  M: 'M',
  N: 'N',
  OneOptional: 'OneOptional',
  ManyRequired: 'ManyRequired',
  OptionalSide1: 'OptionalSide1',
  OptionalSide2: 'OptionalSide2',
  A: 'A',
  B: 'B',
  C: 'C',
  D: 'D',
  E: 'E'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      \`PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues\`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)

`;

exports[`exhaustive-schema: generatedTypeScript 1`] = `

/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/{RUNTIME_FILE}';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends \`\${number}\` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model Embed
 * 
 */
export type Embed = {
  text: string
  boolean: boolean
  embedEmbedList: EmbedEmbed[]
  requiredEmbedEmbed: EmbedEmbed
  optionalEmbedEmbed: EmbedEmbed | null
  scalarList: number[]
}

/**
 * Model EmbedEmbed
 * 
 */
export type EmbedEmbed = {
  text: string
  boolean: boolean
}

/**
 * Model Post
 * 
 */
export type Post = {
  id: string
  createdAt: Date
  title: string
  content: string | null
  published: boolean
  authorId: string
}

/**
 * Model User
 * 
 */
export type User = {
  id: string
  email: string
  int: number
  optionalInt: number | null
  float: number
  optionalFloat: number | null
  string: string
  optionalString: string | null
  json: Prisma.JsonValue
  optionalJson: Prisma.JsonValue | null
  enum: ABeautifulEnum
  optionalEnum: ABeautifulEnum | null
  boolean: boolean
  optionalBoolean: boolean | null
  embedHolderId: string
}

/**
 * Model EmbedHolder
 * 
 */
export type EmbedHolder = {
  id: string
  time: Date
  text: string
  boolean: boolean
  embedList: Embed[]
  requiredEmbed: Embed
  optionalEmbed: Embed | null
}

/**
 * Model M
 * 
 */
export type M = {
  id: string
  n_ids: string[]
  int: number
  optionalInt: number | null
  float: number
  optionalFloat: number | null
  string: string
  optionalString: string | null
  json: Prisma.JsonValue
  optionalJson: Prisma.JsonValue | null
  enum: ABeautifulEnum
  optionalEnum: ABeautifulEnum | null
  boolean: boolean
  optionalBoolean: boolean | null
}

/**
 * Model N
 * 
 */
export type N = {
  id: string
  m_ids: string[]
  int: number
  optionalInt: number | null
  float: number
  optionalFloat: number | null
  string: string
  optionalString: string | null
  json: Prisma.JsonValue
  optionalJson: Prisma.JsonValue | null
  enum: ABeautifulEnum
  optionalEnum: ABeautifulEnum | null
  boolean: boolean
  optionalBoolean: boolean | null
}

/**
 * Model OneOptional
 * 
 */
export type OneOptional = {
  id: string
  int: number
  optionalInt: number | null
  float: number
  optionalFloat: number | null
  string: string
  optionalString: string | null
  json: Prisma.JsonValue
  optionalJson: Prisma.JsonValue | null
  enum: ABeautifulEnum
  optionalEnum: ABeautifulEnum | null
  boolean: boolean
  optionalBoolean: boolean | null
}

/**
 * Model ManyRequired
 * 
 */
export type ManyRequired = {
  id: string
  oneOptionalId: string | null
  int: number
  optionalInt: number | null
  float: number
  optionalFloat: number | null
  string: string
  optionalString: string | null
  json: Prisma.JsonValue
  optionalJson: Prisma.JsonValue | null
  enum: ABeautifulEnum
  optionalEnum: ABeautifulEnum | null
  boolean: boolean
  optionalBoolean: boolean | null
}

/**
 * Model OptionalSide1
 * 
 */
export type OptionalSide1 = {
  id: string
  optionalSide2Id: string | null
  int: number
  optionalInt: number | null
  float: number
  optionalFloat: number | null
  string: string
  optionalString: string | null
  json: Prisma.JsonValue
  optionalJson: Prisma.JsonValue | null
  enum: ABeautifulEnum
  optionalEnum: ABeautifulEnum | null
  boolean: boolean
  optionalBoolean: boolean | null
}

/**
 * Model OptionalSide2
 * 
 */
export type OptionalSide2 = {
  id: string
  int: number
  optionalInt: number | null
  float: number
  optionalFloat: number | null
  string: string
  optionalString: string | null
  json: Prisma.JsonValue
  optionalJson: Prisma.JsonValue | null
  enum: ABeautifulEnum
  optionalEnum: ABeautifulEnum | null
  boolean: boolean
  optionalBoolean: boolean | null
}

/**
 * Model A
 * model comment
 */
export type A = {
  /**
   * field comment 1
   */
  id: string
  email: string
  name: string | null
  /**
   * field comment 2
   */
  int: number
  sInt: number
  bInt: bigint
}

/**
 * Model B
 * 
 */
export type B = {
  id: string
  float: number
  dFloat: number
}

/**
 * Model C
 * 
 */
export type C = {
  id: string
  char: string
  vChar: string
  text: string
  bit: string
  vBit: string
  uuid: string
}

/**
 * Model D
 * 
 */
export type D = {
  id: string
  bool: boolean
  byteA: Buffer
  xml: string
  json: Prisma.JsonValue
  jsonb: Prisma.JsonValue
  list: number[]
}

/**
 * Model E
 * 
 */
export type E = {
  id: string
  date: Date
  time: Date
  ts: Date
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const ABeautifulEnum: {
  A: 'A',
  B: 'B',
  C: 'C'
};

export type ABeautifulEnum = (typeof ABeautifulEnum)[keyof typeof ABeautifulEnum]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * \`\`\`
 * const prisma = new PrismaClient()
 * // Fetch zero or more Posts
 * const posts = await prisma.post.findMany()
 * \`\`\`
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * \`\`\`
   * const prisma = new PrismaClient()
   * // Fetch zero or more Posts
   * const posts = await prisma.post.findMany()
   * \`\`\`
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * \`\`\`
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * \`\`\`
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number | undefined, timeout?: number | undefined } | undefined): Promise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * \`\`\`
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * \`\`\`
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

      /**
   * \`prisma.post\`: Exposes CRUD operations for the **Post** model.
    * Example usage:
    * \`\`\`ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * \`\`\`
    */
  get post(): Prisma.PostDelegate<GlobalReject>;

  /**
   * \`prisma.user\`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * \`\`\`ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * \`\`\`
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * \`prisma.embedHolder\`: Exposes CRUD operations for the **EmbedHolder** model.
    * Example usage:
    * \`\`\`ts
    * // Fetch zero or more EmbedHolders
    * const embedHolders = await prisma.embedHolder.findMany()
    * \`\`\`
    */
  get embedHolder(): Prisma.EmbedHolderDelegate<GlobalReject>;

  /**
   * \`prisma.m\`: Exposes CRUD operations for the **M** model.
    * Example usage:
    * \`\`\`ts
    * // Fetch zero or more Ms
    * const ms = await prisma.m.findMany()
    * \`\`\`
    */
  get m(): Prisma.MDelegate<GlobalReject>;

  /**
   * \`prisma.n\`: Exposes CRUD operations for the **N** model.
    * Example usage:
    * \`\`\`ts
    * // Fetch zero or more Ns
    * const ns = await prisma.n.findMany()
    * \`\`\`
    */
  get n(): Prisma.NDelegate<GlobalReject>;

  /**
   * \`prisma.oneOptional\`: Exposes CRUD operations for the **OneOptional** model.
    * Example usage:
    * \`\`\`ts
    * // Fetch zero or more OneOptionals
    * const oneOptionals = await prisma.oneOptional.findMany()
    * \`\`\`
    */
  get oneOptional(): Prisma.OneOptionalDelegate<GlobalReject>;

  /**
   * \`prisma.manyRequired\`: Exposes CRUD operations for the **ManyRequired** model.
    * Example usage:
    * \`\`\`ts
    * // Fetch zero or more ManyRequireds
    * const manyRequireds = await prisma.manyRequired.findMany()
    * \`\`\`
    */
  get manyRequired(): Prisma.ManyRequiredDelegate<GlobalReject>;

  /**
   * \`prisma.optionalSide1\`: Exposes CRUD operations for the **OptionalSide1** model.
    * Example usage:
    * \`\`\`ts
    * // Fetch zero or more OptionalSide1s
    * const optionalSide1s = await prisma.optionalSide1.findMany()
    * \`\`\`
    */
  get optionalSide1(): Prisma.OptionalSide1Delegate<GlobalReject>;

  /**
   * \`prisma.optionalSide2\`: Exposes CRUD operations for the **OptionalSide2** model.
    * Example usage:
    * \`\`\`ts
    * // Fetch zero or more OptionalSide2s
    * const optionalSide2s = await prisma.optionalSide2.findMany()
    * \`\`\`
    */
  get optionalSide2(): Prisma.OptionalSide2Delegate<GlobalReject>;

  /**
   * \`prisma.a\`: Exposes CRUD operations for the **A** model.
    * Example usage:
    * \`\`\`ts
    * // Fetch zero or more As
    * const as = await prisma.a.findMany()
    * \`\`\`
    */
  get a(): Prisma.ADelegate<GlobalReject>;

  /**
   * \`prisma.b\`: Exposes CRUD operations for the **B** model.
    * Example usage:
    * \`\`\`ts
    * // Fetch zero or more Bs
    * const bs = await prisma.b.findMany()
    * \`\`\`
    */
  get b(): Prisma.BDelegate<GlobalReject>;

  /**
   * \`prisma.c\`: Exposes CRUD operations for the **C** model.
    * Example usage:
    * \`\`\`ts
    * // Fetch zero or more Cs
    * const cs = await prisma.c.findMany()
    * \`\`\`
    */
  get c(): Prisma.CDelegate<GlobalReject>;

  /**
   * \`prisma.d\`: Exposes CRUD operations for the **D** model.
    * Example usage:
    * \`\`\`ts
    * // Fetch zero or more Ds
    * const ds = await prisma.d.findMany()
    * \`\`\`
    */
  get d(): Prisma.DDelegate<GlobalReject>;

  /**
   * \`prisma.e\`: Exposes CRUD operations for the **E** model.
    * Example usage:
    * \`\`\`ts
    * // Fetch zero or more Es
    * const es = await prisma.e.findMany()
    * \`\`\`
    */
  get e(): Prisma.EDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: local
   * Query Engine version: local
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike \`JsonObject\`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike \`JsonArray\`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike \`JsonValue\`, this
   * type allows read-only arrays and read-only object properties and disallows
   * \`null\` at the top level.
   *
   * \`null\` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use \`Prisma.JsonNull\` to store the JSON null value or
   * \`Prisma.DbNull\` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of \`null\` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of \`Prisma.DbNull\`.
    * 
    * You cannot use other instances of this class. Please use the \`Prisma.DbNull\` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of \`Prisma.JsonNull\`.
    * 
    * You cannot use other instances of this class. Please use the \`Prisma.JsonNull\` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of \`Prisma.AnyNull\`.
    * 
    * You cannot use other instances of this class. Please use the \`Prisma.AnyNull\` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have \`null\` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON \`null\` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are \`Prisma.DbNull\` or \`Prisma.JsonNull\`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose \`select\` or \`include\`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From \`T\` pick properties that exist in \`U\`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From \`T\` pick properties that exist in \`U\`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose \`select\` or \`include\`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From \`T\` pick properties that exist in \`U\` and intersect \`K\`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything \`never\` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like \`Pick\`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends \`_\${string}\` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Post: 'Post',
    User: 'User',
    EmbedHolder: 'EmbedHolder',
    M: 'M',
    N: 'N',
    OneOptional: 'OneOptional',
    ManyRequired: 'ManyRequired',
    OptionalSide1: 'OptionalSide1',
    OptionalSide2: 'OptionalSide2',
    A: 'A',
    B: 'B',
    C: 'C',
    D: 'D',
    E: 'E'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use \`findUniqueOrThrow\`/\`findFirstOrThrow\` methods instead.
     * @example
     * \`\`\`
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * \`\`\`
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * \`\`\`
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * \`\`\`
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The \`T\` type makes sure, that the \`return proceed\` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * \`PrismaClient\` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    posts: number
  }

  export type UserCountOutputTypeSelect = {
    posts?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose \`select\` or \`include\`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null | undefined
  }



  /**
   * Count Type EmbedHolderCountOutputType
   */


  export type EmbedHolderCountOutputType = {
    User: number
  }

  export type EmbedHolderCountOutputTypeSelect = {
    User?: boolean
  }

  export type EmbedHolderCountOutputTypeGetPayload<S extends boolean | null | undefined | EmbedHolderCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose \`select\` or \`include\`' :
    S extends true ? EmbedHolderCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (EmbedHolderCountOutputTypeArgs)
    ? EmbedHolderCountOutputType 
    : S extends { select: any } & (EmbedHolderCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof EmbedHolderCountOutputType ? EmbedHolderCountOutputType[P] : never
  } 
      : EmbedHolderCountOutputType




  // Custom InputTypes

  /**
   * EmbedHolderCountOutputType without action
   */
  export type EmbedHolderCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the EmbedHolderCountOutputType
     */
    select?: EmbedHolderCountOutputTypeSelect | null | undefined
  }



  /**
   * Count Type MCountOutputType
   */


  export type MCountOutputType = {
    n: number
  }

  export type MCountOutputTypeSelect = {
    n?: boolean
  }

  export type MCountOutputTypeGetPayload<S extends boolean | null | undefined | MCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose \`select\` or \`include\`' :
    S extends true ? MCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (MCountOutputTypeArgs)
    ? MCountOutputType 
    : S extends { select: any } & (MCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof MCountOutputType ? MCountOutputType[P] : never
  } 
      : MCountOutputType




  // Custom InputTypes

  /**
   * MCountOutputType without action
   */
  export type MCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the MCountOutputType
     */
    select?: MCountOutputTypeSelect | null | undefined
  }



  /**
   * Count Type NCountOutputType
   */


  export type NCountOutputType = {
    m: number
  }

  export type NCountOutputTypeSelect = {
    m?: boolean
  }

  export type NCountOutputTypeGetPayload<S extends boolean | null | undefined | NCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose \`select\` or \`include\`' :
    S extends true ? NCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (NCountOutputTypeArgs)
    ? NCountOutputType 
    : S extends { select: any } & (NCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof NCountOutputType ? NCountOutputType[P] : never
  } 
      : NCountOutputType




  // Custom InputTypes

  /**
   * NCountOutputType without action
   */
  export type NCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the NCountOutputType
     */
    select?: NCountOutputTypeSelect | null | undefined
  }



  /**
   * Count Type OneOptionalCountOutputType
   */


  export type OneOptionalCountOutputType = {
    many: number
  }

  export type OneOptionalCountOutputTypeSelect = {
    many?: boolean
  }

  export type OneOptionalCountOutputTypeGetPayload<S extends boolean | null | undefined | OneOptionalCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose \`select\` or \`include\`' :
    S extends true ? OneOptionalCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (OneOptionalCountOutputTypeArgs)
    ? OneOptionalCountOutputType 
    : S extends { select: any } & (OneOptionalCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof OneOptionalCountOutputType ? OneOptionalCountOutputType[P] : never
  } 
      : OneOptionalCountOutputType




  // Custom InputTypes

  /**
   * OneOptionalCountOutputType without action
   */
  export type OneOptionalCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the OneOptionalCountOutputType
     */
    select?: OneOptionalCountOutputTypeSelect | null | undefined
  }



  /**
   * Models
   */

  /**
   * Model Embed
   */





  export type EmbedSelect = {
    text?: boolean | undefined
    boolean?: boolean | undefined
    embedEmbedList?: boolean | EmbedEmbedArgs | undefined
    requiredEmbedEmbed?: boolean | EmbedEmbedArgs | undefined
    optionalEmbedEmbed?: boolean | EmbedEmbedArgs | undefined
    scalarList?: boolean | undefined
  }


  export type EmbedInclude = {}

  export type EmbedGetPayload<S extends boolean | null | undefined | EmbedArgs> =
    S extends { select: any, include: any } ? 'Please either choose \`select\` or \`include\`' :
    S extends true ? Embed :
    S extends undefined ? never :
    S extends { include: any } & (EmbedArgs)
    ? Embed 
    : S extends { select: any } & (EmbedArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'embedEmbedList' ? Array < EmbedEmbedGetPayload<S['select'][P]>>  :
        P extends 'requiredEmbedEmbed' ? EmbedEmbedGetPayload<S['select'][P]> :
        P extends 'optionalEmbedEmbed' ? EmbedEmbedGetPayload<S['select'][P]> | null :  P extends keyof Embed ? Embed[P] : never
  } 
      : Embed



  export interface EmbedDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {







  }

  /**
   * The delegate class that acts as a "Promise-like" for Embed.
   * Why is this prefixed with \`Prisma__\`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EmbedClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    embedEmbedList<T extends EmbedEmbedArgs= {}>(args?: Subset<T, EmbedEmbedArgs>): Prisma.PrismaPromise<Array<EmbedEmbedGetPayload<T>>| Null>;

    requiredEmbedEmbed<T extends EmbedEmbedArgs= {}>(args?: Subset<T, EmbedEmbedArgs>): Prisma__EmbedEmbedClient<EmbedEmbedGetPayload<T> | Null>;

    optionalEmbedEmbed<T extends EmbedEmbedArgs= {}>(args?: Subset<T, EmbedEmbedArgs>): Prisma__EmbedEmbedClient<EmbedEmbedGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Embed without action
   */
  export type EmbedArgs = {
    /**
     * Select specific fields to fetch from the Embed
     */
    select?: EmbedSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmbedInclude | null | undefined
  }



  /**
   * Model EmbedEmbed
   */





  export type EmbedEmbedSelect = {
    text?: boolean | undefined
    boolean?: boolean | undefined
  }


  export type EmbedEmbedGetPayload<S extends boolean | null | undefined | EmbedEmbedArgs> =
    S extends { select: any, include: any } ? 'Please either choose \`select\` or \`include\`' :
    S extends true ? EmbedEmbed :
    S extends undefined ? never :
    S extends { include: any } & (EmbedEmbedArgs)
    ? EmbedEmbed 
    : S extends { select: any } & (EmbedEmbedArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof EmbedEmbed ? EmbedEmbed[P] : never
  } 
      : EmbedEmbed



  export interface EmbedEmbedDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {







  }

  /**
   * The delegate class that acts as a "Promise-like" for EmbedEmbed.
   * Why is this prefixed with \`Prisma__\`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EmbedEmbedClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * EmbedEmbed without action
   */
  export type EmbedEmbedArgs = {
    /**
     * Select specific fields to fetch from the EmbedEmbed
     */
    select?: EmbedEmbedSelect | null | undefined
  }



  /**
   * Model Post
   */


  export type AggregatePost = {
    _count: PostCountAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  export type PostMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    title: string | null
    content: string | null
    published: boolean | null
    authorId: string | null
  }

  export type PostMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    title: string | null
    content: string | null
    published: boolean | null
    authorId: string | null
  }

  export type PostCountAggregateOutputType = {
    id: number
    createdAt: number
    title: number
    content: number
    published: number
    authorId: number
    _all: number
  }


  export type PostMinAggregateInputType = {
    id?: true | undefined
    createdAt?: true | undefined
    title?: true | undefined
    content?: true | undefined
    published?: true | undefined
    authorId?: true | undefined
  }

  export type PostMaxAggregateInputType = {
    id?: true | undefined
    createdAt?: true | undefined
    title?: true | undefined
    content?: true | undefined
    published?: true | undefined
    authorId?: true | undefined
  }

  export type PostCountAggregateInputType = {
    id?: true | undefined
    createdAt?: true | undefined
    title?: true | undefined
    content?: true | undefined
    published?: true | undefined
    authorId?: true | undefined
    _all?: true | undefined
  }

  export type PostAggregateArgs = {
    /**
     * Filter which Post to aggregate.
     */
    where?: PostWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: Enumerable<PostOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` Posts from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` Posts.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Posts
    **/
    _count?: true | PostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMaxAggregateInputType
  }

  export type GetPostAggregateType<T extends PostAggregateArgs> = {
        [P in keyof T & keyof AggregatePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost[P]>
      : GetScalarType<T[P], AggregatePost[P]>
  }




  export type PostGroupByArgs = {
    where?: PostWhereInput | undefined
    orderBy?: Enumerable<PostOrderByWithAggregationInput> | undefined
    by: PostScalarFieldEnum[]
    having?: PostScalarWhereWithAggregatesInput | undefined
    take?: number | undefined
    skip?: number | undefined
    _count?: PostCountAggregateInputType | true
    _min?: PostMinAggregateInputType
    _max?: PostMaxAggregateInputType
  }


  export type PostGroupByOutputType = {
    id: string
    createdAt: Date
    title: string
    content: string | null
    published: boolean
    authorId: string
    _count: PostCountAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  type GetPostGroupByPayload<T extends PostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostGroupByOutputType[P]>
            : GetScalarType<T[P], PostGroupByOutputType[P]>
        }
      >
    >


  export type PostSelect = {
    id?: boolean | undefined
    createdAt?: boolean | undefined
    title?: boolean | undefined
    content?: boolean | undefined
    published?: boolean | undefined
    authorId?: boolean | undefined
    author?: boolean | UserArgs | undefined
  }


  export type PostInclude = {
    author?: boolean | UserArgs | undefined
  }

  export type PostGetPayload<S extends boolean | null | undefined | PostArgs> =
    S extends { select: any, include: any } ? 'Please either choose \`select\` or \`include\`' :
    S extends true ? Post :
    S extends undefined ? never :
    S extends { include: any } & (PostArgs | PostFindManyArgs)
    ? Post  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'author' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (PostArgs | PostFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'author' ? UserGetPayload<S['select'][P]> :  P extends keyof Post ? Post[P] : never
  } 
      : Post


  type PostCountArgs = 
    Omit<PostFindManyArgs, 'select' | 'include'> & {
      select?: PostCountAggregateInputType | true
    }

  export interface PostDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Post that matches the filter.
     * @param {PostFindUniqueArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PostFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PostFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Post'> extends True ? Prisma__PostClient<PostGetPayload<T>> : Prisma__PostClient<PostGetPayload<T> | null, null>

    /**
     * Find one Post that matches the filter or throw an error  with \`error.code='P2025'\` 
     *     if no matches were found.
     * @param {PostFindUniqueOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PostFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PostFindUniqueOrThrowArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Find the first Post that matches the filter.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PostFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PostFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Post'> extends True ? Prisma__PostClient<PostGetPayload<T>> : Prisma__PostClient<PostGetPayload<T> | null, null>

    /**
     * Find the first Post that matches the filter or
     * throw \`NotFoundError\` if no matches were found.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PostFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PostFindFirstOrThrowArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.post.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.post.findMany({ take: 10 })
     * 
     * // Only select the \`id\`
     * const postWithIdOnly = await prisma.post.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PostFindManyArgs>(
      args?: SelectSubset<T, PostFindManyArgs>
    ): Prisma.PrismaPromise<Array<PostGetPayload<T>>>

    /**
     * Create a Post.
     * @param {PostCreateArgs} args - Arguments to create a Post.
     * @example
     * // Create one Post
     * const Post = await prisma.post.create({
     *   data: {
     *     // ... data to create a Post
     *   }
     * })
     * 
    **/
    create<T extends PostCreateArgs>(
      args: SelectSubset<T, PostCreateArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Create many Posts.
     *     @param {PostCreateManyArgs} args - Arguments to create many Posts.
     *     @example
     *     // Create many Posts
     *     const post = await prisma.post.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PostCreateManyArgs>(
      args?: SelectSubset<T, PostCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Post.
     * @param {PostDeleteArgs} args - Arguments to delete one Post.
     * @example
     * // Delete one Post
     * const Post = await prisma.post.delete({
     *   where: {
     *     // ... filter to delete one Post
     *   }
     * })
     * 
    **/
    delete<T extends PostDeleteArgs>(
      args: SelectSubset<T, PostDeleteArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Update one Post.
     * @param {PostUpdateArgs} args - Arguments to update one Post.
     * @example
     * // Update one Post
     * const post = await prisma.post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PostUpdateArgs>(
      args: SelectSubset<T, PostUpdateArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Delete zero or more Posts.
     * @param {PostDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PostDeleteManyArgs>(
      args?: SelectSubset<T, PostDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PostUpdateManyArgs>(
      args: SelectSubset<T, PostUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Post.
     * @param {PostUpsertArgs} args - Arguments to update or create a Post.
     * @example
     * // Update or create a Post
     * const post = await prisma.post.upsert({
     *   create: {
     *     // ... data to create a Post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post we want to update
     *   }
     * })
    **/
    upsert<T extends PostUpsertArgs>(
      args: SelectSubset<T, PostUpsertArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Find zero or more Posts that matches the filter.
     * @param {PostFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const post = await prisma.post.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: PostFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Post.
     * @param {PostAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const post = await prisma.post.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: PostAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Posts.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.post.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends PostCountArgs>(
      args?: Subset<T, PostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostAggregateArgs>(args: Subset<T, PostAggregateArgs>): Prisma.PrismaPromise<GetPostAggregateType<T>>

    /**
     * Group by Post.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostGroupByArgs['orderBy'] }
        : { orderBy?: PostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? \`Error: "by" must not be empty.\`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? \`Error: Field "\${P}" used in "having" needs to be provided in "by".\`
            : [
                Error,
                'Field ',
                P,
                \` in "having" needs to be provided in "by"\`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Post.
   * Why is this prefixed with \`Prisma__\`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PostClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    author<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Post base type for findUnique actions
   */
  export type PostFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null | undefined
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findUnique
   */
  export interface PostFindUniqueArgs extends PostFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use \`findUniqueOrThrow\` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Post findUniqueOrThrow
   */
  export type PostFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null | undefined
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }


  /**
   * Post base type for findFirst actions
   */
  export type PostFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null | undefined
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: Enumerable<PostOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` Posts from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` Posts.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: Enumerable<PostScalarFieldEnum> | undefined
  }

  /**
   * Post findFirst
   */
  export interface PostFindFirstArgs extends PostFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use \`findFirstOrThrow\` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Post findFirstOrThrow
   */
  export type PostFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null | undefined
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: Enumerable<PostOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` Posts from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` Posts.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: Enumerable<PostScalarFieldEnum> | undefined
  }


  /**
   * Post findMany
   */
  export type PostFindManyArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null | undefined
    /**
     * Filter, which Posts to fetch.
     */
    where?: PostWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: Enumerable<PostOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Posts.
     */
    cursor?: PostWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` Posts from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` Posts.
     */
    skip?: number | undefined
    distinct?: Enumerable<PostScalarFieldEnum> | undefined
  }


  /**
   * Post create
   */
  export type PostCreateArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null | undefined
    /**
     * The data needed to create a Post.
     */
    data: XOR<PostCreateInput, PostUncheckedCreateInput>
  }


  /**
   * Post createMany
   */
  export type PostCreateManyArgs = {
    /**
     * The data used to create many Posts.
     */
    data: Enumerable<PostCreateManyInput>
  }


  /**
   * Post update
   */
  export type PostUpdateArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null | undefined
    /**
     * The data needed to update a Post.
     */
    data: XOR<PostUpdateInput, PostUncheckedUpdateInput>
    /**
     * Choose, which Post to update.
     */
    where: PostWhereUniqueInput
  }


  /**
   * Post updateMany
   */
  export type PostUpdateManyArgs = {
    /**
     * The data used to update Posts.
     */
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     */
    where?: PostWhereInput | undefined
  }


  /**
   * Post upsert
   */
  export type PostUpsertArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null | undefined
    /**
     * The filter to search for the Post to update in case it exists.
     */
    where: PostWhereUniqueInput
    /**
     * In case the Post found by the \`where\` argument doesn't exist, create a new Post with this data.
     */
    create: XOR<PostCreateInput, PostUncheckedCreateInput>
    /**
     * In case the Post was found with the provided \`where\` argument, update it with this data.
     */
    update: XOR<PostUpdateInput, PostUncheckedUpdateInput>
  }


  /**
   * Post delete
   */
  export type PostDeleteArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null | undefined
    /**
     * Filter which Post to delete.
     */
    where: PostWhereUniqueInput
  }


  /**
   * Post deleteMany
   */
  export type PostDeleteManyArgs = {
    /**
     * Filter which Posts to delete
     */
    where?: PostWhereInput | undefined
  }


  /**
   * Post findRaw
   */
  export type PostFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. \${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue | undefined
    /**
     * Additional options to pass to the \`find\` command \${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue | undefined
  }


  /**
   * Post aggregateRaw
   */
  export type PostAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. \${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[] | undefined
    /**
     * Additional options to pass to the \`aggregate\` command \${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue | undefined
  }


  /**
   * Post without action
   */
  export type PostArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null | undefined
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    int: number | null
    optionalInt: number | null
    float: number | null
    optionalFloat: number | null
  }

  export type UserSumAggregateOutputType = {
    int: number | null
    optionalInt: number | null
    float: number | null
    optionalFloat: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    int: number | null
    optionalInt: number | null
    float: number | null
    optionalFloat: number | null
    string: string | null
    optionalString: string | null
    enum: ABeautifulEnum | null
    optionalEnum: ABeautifulEnum | null
    boolean: boolean | null
    optionalBoolean: boolean | null
    embedHolderId: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    int: number | null
    optionalInt: number | null
    float: number | null
    optionalFloat: number | null
    string: string | null
    optionalString: string | null
    enum: ABeautifulEnum | null
    optionalEnum: ABeautifulEnum | null
    boolean: boolean | null
    optionalBoolean: boolean | null
    embedHolderId: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    int: number
    optionalInt: number
    float: number
    optionalFloat: number
    string: number
    optionalString: number
    json: number
    optionalJson: number
    enum: number
    optionalEnum: number
    boolean: number
    optionalBoolean: number
    embedHolderId: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
  }

  export type UserSumAggregateInputType = {
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
  }

  export type UserMinAggregateInputType = {
    id?: true | undefined
    email?: true | undefined
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
    string?: true | undefined
    optionalString?: true | undefined
    enum?: true | undefined
    optionalEnum?: true | undefined
    boolean?: true | undefined
    optionalBoolean?: true | undefined
    embedHolderId?: true | undefined
  }

  export type UserMaxAggregateInputType = {
    id?: true | undefined
    email?: true | undefined
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
    string?: true | undefined
    optionalString?: true | undefined
    enum?: true | undefined
    optionalEnum?: true | undefined
    boolean?: true | undefined
    optionalBoolean?: true | undefined
    embedHolderId?: true | undefined
  }

  export type UserCountAggregateInputType = {
    id?: true | undefined
    email?: true | undefined
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
    string?: true | undefined
    optionalString?: true | undefined
    json?: true | undefined
    optionalJson?: true | undefined
    enum?: true | undefined
    optionalEnum?: true | undefined
    boolean?: true | undefined
    optionalBoolean?: true | undefined
    embedHolderId?: true | undefined
    _all?: true | undefined
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` Users from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` Users.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput | undefined
    orderBy?: Enumerable<UserOrderByWithAggregationInput> | undefined
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput | undefined
    take?: number | undefined
    skip?: number | undefined
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    email: string
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
    string: string
    optionalString: string | null
    json: JsonValue
    optionalJson: JsonValue | null
    enum: ABeautifulEnum
    optionalEnum: ABeautifulEnum | null
    boolean: boolean
    optionalBoolean: boolean | null
    embedHolderId: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean | undefined
    email?: boolean | undefined
    int?: boolean | undefined
    optionalInt?: boolean | undefined
    float?: boolean | undefined
    optionalFloat?: boolean | undefined
    string?: boolean | undefined
    optionalString?: boolean | undefined
    json?: boolean | undefined
    optionalJson?: boolean | undefined
    enum?: boolean | undefined
    optionalEnum?: boolean | undefined
    boolean?: boolean | undefined
    optionalBoolean?: boolean | undefined
    embedHolderId?: boolean | undefined
    posts?: boolean | User$postsArgs | undefined
    embedHolder?: boolean | EmbedHolderArgs | undefined
    _count?: boolean | UserCountOutputTypeArgs | undefined
  }


  export type UserInclude = {
    posts?: boolean | User$postsArgs | undefined
    embedHolder?: boolean | EmbedHolderArgs | undefined
    _count?: boolean | UserCountOutputTypeArgs | undefined
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose \`select\` or \`include\`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'posts' ? Array < PostGetPayload<S['include'][P]>>  :
        P extends 'embedHolder' ? EmbedHolderGetPayload<S['include'][P]> :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'posts' ? Array < PostGetPayload<S['select'][P]>>  :
        P extends 'embedHolder' ? EmbedHolderGetPayload<S['select'][P]> :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with \`error.code='P2025'\` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw \`NotFoundError\` if no matches were found.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the \`id\`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * @param {UserFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const user = await prisma.user.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: UserFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a User.
     * @param {UserAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const user = await prisma.user.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: UserAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Users.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? \`Error: "by" must not be empty.\`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? \`Error: Field "\${P}" used in "having" needs to be provided in "by".\`
            : [
                Error,
                'Field ',
                P,
                \` in "having" needs to be provided in "by"\`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with \`Prisma__\`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    posts<T extends User$postsArgs= {}>(args?: Subset<T, User$postsArgs>): Prisma.PrismaPromise<Array<PostGetPayload<T>>| Null>;

    embedHolder<T extends EmbedHolderArgs= {}>(args?: Subset<T, EmbedHolderArgs>): Prisma__EmbedHolderClient<EmbedHolderGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null | undefined
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use \`findUniqueOrThrow\` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null | undefined
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null | undefined
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` Users from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` Users.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum> | undefined
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use \`findFirstOrThrow\` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null | undefined
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` Users from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` Users.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum> | undefined
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null | undefined
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` Users from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` Users.
     */
    skip?: number | undefined
    distinct?: Enumerable<UserScalarFieldEnum> | undefined
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null | undefined
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null | undefined
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput | undefined
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null | undefined
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the \`where\` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided \`where\` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null | undefined
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput | undefined
  }


  /**
   * User findRaw
   */
  export type UserFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. \${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue | undefined
    /**
     * Additional options to pass to the \`find\` command \${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue | undefined
  }


  /**
   * User aggregateRaw
   */
  export type UserAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. \${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[] | undefined
    /**
     * Additional options to pass to the \`aggregate\` command \${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue | undefined
  }


  /**
   * User.posts
   */
  export type User$postsArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null | undefined
    where?: PostWhereInput | undefined
    orderBy?: Enumerable<PostOrderByWithRelationInput> | undefined
    cursor?: PostWhereUniqueInput | undefined
    take?: number | undefined
    skip?: number | undefined
    distinct?: Enumerable<PostScalarFieldEnum> | undefined
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null | undefined
  }



  /**
   * Model EmbedHolder
   */


  export type AggregateEmbedHolder = {
    _count: EmbedHolderCountAggregateOutputType | null
    _min: EmbedHolderMinAggregateOutputType | null
    _max: EmbedHolderMaxAggregateOutputType | null
  }

  export type EmbedHolderMinAggregateOutputType = {
    id: string | null
    time: Date | null
    text: string | null
    boolean: boolean | null
  }

  export type EmbedHolderMaxAggregateOutputType = {
    id: string | null
    time: Date | null
    text: string | null
    boolean: boolean | null
  }

  export type EmbedHolderCountAggregateOutputType = {
    id: number
    time: number
    text: number
    boolean: number
    _all: number
  }


  export type EmbedHolderMinAggregateInputType = {
    id?: true | undefined
    time?: true | undefined
    text?: true | undefined
    boolean?: true | undefined
  }

  export type EmbedHolderMaxAggregateInputType = {
    id?: true | undefined
    time?: true | undefined
    text?: true | undefined
    boolean?: true | undefined
  }

  export type EmbedHolderCountAggregateInputType = {
    id?: true | undefined
    time?: true | undefined
    text?: true | undefined
    boolean?: true | undefined
    _all?: true | undefined
  }

  export type EmbedHolderAggregateArgs = {
    /**
     * Filter which EmbedHolder to aggregate.
     */
    where?: EmbedHolderWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmbedHolders to fetch.
     */
    orderBy?: Enumerable<EmbedHolderOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmbedHolderWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` EmbedHolders from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` EmbedHolders.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmbedHolders
    **/
    _count?: true | EmbedHolderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmbedHolderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmbedHolderMaxAggregateInputType
  }

  export type GetEmbedHolderAggregateType<T extends EmbedHolderAggregateArgs> = {
        [P in keyof T & keyof AggregateEmbedHolder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmbedHolder[P]>
      : GetScalarType<T[P], AggregateEmbedHolder[P]>
  }




  export type EmbedHolderGroupByArgs = {
    where?: EmbedHolderWhereInput | undefined
    orderBy?: Enumerable<EmbedHolderOrderByWithAggregationInput> | undefined
    by: EmbedHolderScalarFieldEnum[]
    having?: EmbedHolderScalarWhereWithAggregatesInput | undefined
    take?: number | undefined
    skip?: number | undefined
    _count?: EmbedHolderCountAggregateInputType | true
    _min?: EmbedHolderMinAggregateInputType
    _max?: EmbedHolderMaxAggregateInputType
  }


  export type EmbedHolderGroupByOutputType = {
    id: string
    time: Date
    text: string
    boolean: boolean
    _count: EmbedHolderCountAggregateOutputType | null
    _min: EmbedHolderMinAggregateOutputType | null
    _max: EmbedHolderMaxAggregateOutputType | null
  }

  type GetEmbedHolderGroupByPayload<T extends EmbedHolderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<EmbedHolderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmbedHolderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmbedHolderGroupByOutputType[P]>
            : GetScalarType<T[P], EmbedHolderGroupByOutputType[P]>
        }
      >
    >


  export type EmbedHolderSelect = {
    id?: boolean | undefined
    time?: boolean | undefined
    text?: boolean | undefined
    boolean?: boolean | undefined
    embedList?: boolean | EmbedArgs | undefined
    requiredEmbed?: boolean | EmbedArgs | undefined
    optionalEmbed?: boolean | EmbedArgs | undefined
    User?: boolean | EmbedHolder$UserArgs | undefined
    _count?: boolean | EmbedHolderCountOutputTypeArgs | undefined
  }


  export type EmbedHolderInclude = {
    User?: boolean | EmbedHolder$UserArgs | undefined
    _count?: boolean | EmbedHolderCountOutputTypeArgs | undefined
  }

  export type EmbedHolderGetPayload<S extends boolean | null | undefined | EmbedHolderArgs> =
    S extends { select: any, include: any } ? 'Please either choose \`select\` or \`include\`' :
    S extends true ? EmbedHolder :
    S extends undefined ? never :
    S extends { include: any } & (EmbedHolderArgs | EmbedHolderFindManyArgs)
    ? EmbedHolder  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'User' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends '_count' ? EmbedHolderCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (EmbedHolderArgs | EmbedHolderFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'embedList' ? Array < EmbedGetPayload<S['select'][P]>>  :
        P extends 'requiredEmbed' ? EmbedGetPayload<S['select'][P]> :
        P extends 'optionalEmbed' ? EmbedGetPayload<S['select'][P]> | null :
        P extends 'User' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends '_count' ? EmbedHolderCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof EmbedHolder ? EmbedHolder[P] : never
  } 
      : EmbedHolder


  type EmbedHolderCountArgs = 
    Omit<EmbedHolderFindManyArgs, 'select' | 'include'> & {
      select?: EmbedHolderCountAggregateInputType | true
    }

  export interface EmbedHolderDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one EmbedHolder that matches the filter.
     * @param {EmbedHolderFindUniqueArgs} args - Arguments to find a EmbedHolder
     * @example
     * // Get one EmbedHolder
     * const embedHolder = await prisma.embedHolder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EmbedHolderFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EmbedHolderFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'EmbedHolder'> extends True ? Prisma__EmbedHolderClient<EmbedHolderGetPayload<T>> : Prisma__EmbedHolderClient<EmbedHolderGetPayload<T> | null, null>

    /**
     * Find one EmbedHolder that matches the filter or throw an error  with \`error.code='P2025'\` 
     *     if no matches were found.
     * @param {EmbedHolderFindUniqueOrThrowArgs} args - Arguments to find a EmbedHolder
     * @example
     * // Get one EmbedHolder
     * const embedHolder = await prisma.embedHolder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EmbedHolderFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, EmbedHolderFindUniqueOrThrowArgs>
    ): Prisma__EmbedHolderClient<EmbedHolderGetPayload<T>>

    /**
     * Find the first EmbedHolder that matches the filter.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmbedHolderFindFirstArgs} args - Arguments to find a EmbedHolder
     * @example
     * // Get one EmbedHolder
     * const embedHolder = await prisma.embedHolder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EmbedHolderFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EmbedHolderFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'EmbedHolder'> extends True ? Prisma__EmbedHolderClient<EmbedHolderGetPayload<T>> : Prisma__EmbedHolderClient<EmbedHolderGetPayload<T> | null, null>

    /**
     * Find the first EmbedHolder that matches the filter or
     * throw \`NotFoundError\` if no matches were found.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmbedHolderFindFirstOrThrowArgs} args - Arguments to find a EmbedHolder
     * @example
     * // Get one EmbedHolder
     * const embedHolder = await prisma.embedHolder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EmbedHolderFindFirstOrThrowArgs>(
      args?: SelectSubset<T, EmbedHolderFindFirstOrThrowArgs>
    ): Prisma__EmbedHolderClient<EmbedHolderGetPayload<T>>

    /**
     * Find zero or more EmbedHolders that matches the filter.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmbedHolderFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmbedHolders
     * const embedHolders = await prisma.embedHolder.findMany()
     * 
     * // Get first 10 EmbedHolders
     * const embedHolders = await prisma.embedHolder.findMany({ take: 10 })
     * 
     * // Only select the \`id\`
     * const embedHolderWithIdOnly = await prisma.embedHolder.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EmbedHolderFindManyArgs>(
      args?: SelectSubset<T, EmbedHolderFindManyArgs>
    ): Prisma.PrismaPromise<Array<EmbedHolderGetPayload<T>>>

    /**
     * Create a EmbedHolder.
     * @param {EmbedHolderCreateArgs} args - Arguments to create a EmbedHolder.
     * @example
     * // Create one EmbedHolder
     * const EmbedHolder = await prisma.embedHolder.create({
     *   data: {
     *     // ... data to create a EmbedHolder
     *   }
     * })
     * 
    **/
    create<T extends EmbedHolderCreateArgs>(
      args: SelectSubset<T, EmbedHolderCreateArgs>
    ): Prisma__EmbedHolderClient<EmbedHolderGetPayload<T>>

    /**
     * Create many EmbedHolders.
     *     @param {EmbedHolderCreateManyArgs} args - Arguments to create many EmbedHolders.
     *     @example
     *     // Create many EmbedHolders
     *     const embedHolder = await prisma.embedHolder.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EmbedHolderCreateManyArgs>(
      args?: SelectSubset<T, EmbedHolderCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a EmbedHolder.
     * @param {EmbedHolderDeleteArgs} args - Arguments to delete one EmbedHolder.
     * @example
     * // Delete one EmbedHolder
     * const EmbedHolder = await prisma.embedHolder.delete({
     *   where: {
     *     // ... filter to delete one EmbedHolder
     *   }
     * })
     * 
    **/
    delete<T extends EmbedHolderDeleteArgs>(
      args: SelectSubset<T, EmbedHolderDeleteArgs>
    ): Prisma__EmbedHolderClient<EmbedHolderGetPayload<T>>

    /**
     * Update one EmbedHolder.
     * @param {EmbedHolderUpdateArgs} args - Arguments to update one EmbedHolder.
     * @example
     * // Update one EmbedHolder
     * const embedHolder = await prisma.embedHolder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EmbedHolderUpdateArgs>(
      args: SelectSubset<T, EmbedHolderUpdateArgs>
    ): Prisma__EmbedHolderClient<EmbedHolderGetPayload<T>>

    /**
     * Delete zero or more EmbedHolders.
     * @param {EmbedHolderDeleteManyArgs} args - Arguments to filter EmbedHolders to delete.
     * @example
     * // Delete a few EmbedHolders
     * const { count } = await prisma.embedHolder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EmbedHolderDeleteManyArgs>(
      args?: SelectSubset<T, EmbedHolderDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmbedHolders.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmbedHolderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmbedHolders
     * const embedHolder = await prisma.embedHolder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EmbedHolderUpdateManyArgs>(
      args: SelectSubset<T, EmbedHolderUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EmbedHolder.
     * @param {EmbedHolderUpsertArgs} args - Arguments to update or create a EmbedHolder.
     * @example
     * // Update or create a EmbedHolder
     * const embedHolder = await prisma.embedHolder.upsert({
     *   create: {
     *     // ... data to create a EmbedHolder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmbedHolder we want to update
     *   }
     * })
    **/
    upsert<T extends EmbedHolderUpsertArgs>(
      args: SelectSubset<T, EmbedHolderUpsertArgs>
    ): Prisma__EmbedHolderClient<EmbedHolderGetPayload<T>>

    /**
     * Find zero or more EmbedHolders that matches the filter.
     * @param {EmbedHolderFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const embedHolder = await prisma.embedHolder.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: EmbedHolderFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a EmbedHolder.
     * @param {EmbedHolderAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const embedHolder = await prisma.embedHolder.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: EmbedHolderAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of EmbedHolders.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmbedHolderCountArgs} args - Arguments to filter EmbedHolders to count.
     * @example
     * // Count the number of EmbedHolders
     * const count = await prisma.embedHolder.count({
     *   where: {
     *     // ... the filter for the EmbedHolders we want to count
     *   }
     * })
    **/
    count<T extends EmbedHolderCountArgs>(
      args?: Subset<T, EmbedHolderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmbedHolderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmbedHolder.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmbedHolderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmbedHolderAggregateArgs>(args: Subset<T, EmbedHolderAggregateArgs>): Prisma.PrismaPromise<GetEmbedHolderAggregateType<T>>

    /**
     * Group by EmbedHolder.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmbedHolderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmbedHolderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmbedHolderGroupByArgs['orderBy'] }
        : { orderBy?: EmbedHolderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? \`Error: "by" must not be empty.\`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? \`Error: Field "\${P}" used in "having" needs to be provided in "by".\`
            : [
                Error,
                'Field ',
                P,
                \` in "having" needs to be provided in "by"\`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmbedHolderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmbedHolderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for EmbedHolder.
   * Why is this prefixed with \`Prisma__\`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EmbedHolderClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    embedList<T extends EmbedArgs= {}>(args?: Subset<T, EmbedArgs>): Prisma.PrismaPromise<Array<EmbedGetPayload<T>>| Null>;

    requiredEmbed<T extends EmbedArgs= {}>(args?: Subset<T, EmbedArgs>): Prisma__EmbedClient<EmbedGetPayload<T> | Null>;

    optionalEmbed<T extends EmbedArgs= {}>(args?: Subset<T, EmbedArgs>): Prisma__EmbedClient<EmbedGetPayload<T> | Null>;

    User<T extends EmbedHolder$UserArgs= {}>(args?: Subset<T, EmbedHolder$UserArgs>): Prisma.PrismaPromise<Array<UserGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * EmbedHolder base type for findUnique actions
   */
  export type EmbedHolderFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the EmbedHolder
     */
    select?: EmbedHolderSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmbedHolderInclude | null | undefined
    /**
     * Filter, which EmbedHolder to fetch.
     */
    where: EmbedHolderWhereUniqueInput
  }

  /**
   * EmbedHolder findUnique
   */
  export interface EmbedHolderFindUniqueArgs extends EmbedHolderFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use \`findUniqueOrThrow\` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * EmbedHolder findUniqueOrThrow
   */
  export type EmbedHolderFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the EmbedHolder
     */
    select?: EmbedHolderSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmbedHolderInclude | null | undefined
    /**
     * Filter, which EmbedHolder to fetch.
     */
    where: EmbedHolderWhereUniqueInput
  }


  /**
   * EmbedHolder base type for findFirst actions
   */
  export type EmbedHolderFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the EmbedHolder
     */
    select?: EmbedHolderSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmbedHolderInclude | null | undefined
    /**
     * Filter, which EmbedHolder to fetch.
     */
    where?: EmbedHolderWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmbedHolders to fetch.
     */
    orderBy?: Enumerable<EmbedHolderOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmbedHolders.
     */
    cursor?: EmbedHolderWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` EmbedHolders from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` EmbedHolders.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmbedHolders.
     */
    distinct?: Enumerable<EmbedHolderScalarFieldEnum> | undefined
  }

  /**
   * EmbedHolder findFirst
   */
  export interface EmbedHolderFindFirstArgs extends EmbedHolderFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use \`findFirstOrThrow\` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * EmbedHolder findFirstOrThrow
   */
  export type EmbedHolderFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the EmbedHolder
     */
    select?: EmbedHolderSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmbedHolderInclude | null | undefined
    /**
     * Filter, which EmbedHolder to fetch.
     */
    where?: EmbedHolderWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmbedHolders to fetch.
     */
    orderBy?: Enumerable<EmbedHolderOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmbedHolders.
     */
    cursor?: EmbedHolderWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` EmbedHolders from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` EmbedHolders.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmbedHolders.
     */
    distinct?: Enumerable<EmbedHolderScalarFieldEnum> | undefined
  }


  /**
   * EmbedHolder findMany
   */
  export type EmbedHolderFindManyArgs = {
    /**
     * Select specific fields to fetch from the EmbedHolder
     */
    select?: EmbedHolderSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmbedHolderInclude | null | undefined
    /**
     * Filter, which EmbedHolders to fetch.
     */
    where?: EmbedHolderWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmbedHolders to fetch.
     */
    orderBy?: Enumerable<EmbedHolderOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmbedHolders.
     */
    cursor?: EmbedHolderWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` EmbedHolders from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` EmbedHolders.
     */
    skip?: number | undefined
    distinct?: Enumerable<EmbedHolderScalarFieldEnum> | undefined
  }


  /**
   * EmbedHolder create
   */
  export type EmbedHolderCreateArgs = {
    /**
     * Select specific fields to fetch from the EmbedHolder
     */
    select?: EmbedHolderSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmbedHolderInclude | null | undefined
    /**
     * The data needed to create a EmbedHolder.
     */
    data: XOR<EmbedHolderCreateInput, EmbedHolderUncheckedCreateInput>
  }


  /**
   * EmbedHolder createMany
   */
  export type EmbedHolderCreateManyArgs = {
    /**
     * The data used to create many EmbedHolders.
     */
    data: Enumerable<EmbedHolderCreateManyInput>
  }


  /**
   * EmbedHolder update
   */
  export type EmbedHolderUpdateArgs = {
    /**
     * Select specific fields to fetch from the EmbedHolder
     */
    select?: EmbedHolderSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmbedHolderInclude | null | undefined
    /**
     * The data needed to update a EmbedHolder.
     */
    data: XOR<EmbedHolderUpdateInput, EmbedHolderUncheckedUpdateInput>
    /**
     * Choose, which EmbedHolder to update.
     */
    where: EmbedHolderWhereUniqueInput
  }


  /**
   * EmbedHolder updateMany
   */
  export type EmbedHolderUpdateManyArgs = {
    /**
     * The data used to update EmbedHolders.
     */
    data: XOR<EmbedHolderUpdateManyMutationInput, EmbedHolderUncheckedUpdateManyInput>
    /**
     * Filter which EmbedHolders to update
     */
    where?: EmbedHolderWhereInput | undefined
  }


  /**
   * EmbedHolder upsert
   */
  export type EmbedHolderUpsertArgs = {
    /**
     * Select specific fields to fetch from the EmbedHolder
     */
    select?: EmbedHolderSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmbedHolderInclude | null | undefined
    /**
     * The filter to search for the EmbedHolder to update in case it exists.
     */
    where: EmbedHolderWhereUniqueInput
    /**
     * In case the EmbedHolder found by the \`where\` argument doesn't exist, create a new EmbedHolder with this data.
     */
    create: XOR<EmbedHolderCreateInput, EmbedHolderUncheckedCreateInput>
    /**
     * In case the EmbedHolder was found with the provided \`where\` argument, update it with this data.
     */
    update: XOR<EmbedHolderUpdateInput, EmbedHolderUncheckedUpdateInput>
  }


  /**
   * EmbedHolder delete
   */
  export type EmbedHolderDeleteArgs = {
    /**
     * Select specific fields to fetch from the EmbedHolder
     */
    select?: EmbedHolderSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmbedHolderInclude | null | undefined
    /**
     * Filter which EmbedHolder to delete.
     */
    where: EmbedHolderWhereUniqueInput
  }


  /**
   * EmbedHolder deleteMany
   */
  export type EmbedHolderDeleteManyArgs = {
    /**
     * Filter which EmbedHolders to delete
     */
    where?: EmbedHolderWhereInput | undefined
  }


  /**
   * EmbedHolder findRaw
   */
  export type EmbedHolderFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. \${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue | undefined
    /**
     * Additional options to pass to the \`find\` command \${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue | undefined
  }


  /**
   * EmbedHolder aggregateRaw
   */
  export type EmbedHolderAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. \${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[] | undefined
    /**
     * Additional options to pass to the \`aggregate\` command \${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue | undefined
  }


  /**
   * EmbedHolder.User
   */
  export type EmbedHolder$UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null | undefined
    where?: UserWhereInput | undefined
    orderBy?: Enumerable<UserOrderByWithRelationInput> | undefined
    cursor?: UserWhereUniqueInput | undefined
    take?: number | undefined
    skip?: number | undefined
    distinct?: Enumerable<UserScalarFieldEnum> | undefined
  }


  /**
   * EmbedHolder without action
   */
  export type EmbedHolderArgs = {
    /**
     * Select specific fields to fetch from the EmbedHolder
     */
    select?: EmbedHolderSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmbedHolderInclude | null | undefined
  }



  /**
   * Model M
   */


  export type AggregateM = {
    _count: MCountAggregateOutputType | null
    _avg: MAvgAggregateOutputType | null
    _sum: MSumAggregateOutputType | null
    _min: MMinAggregateOutputType | null
    _max: MMaxAggregateOutputType | null
  }

  export type MAvgAggregateOutputType = {
    int: number | null
    optionalInt: number | null
    float: number | null
    optionalFloat: number | null
  }

  export type MSumAggregateOutputType = {
    int: number | null
    optionalInt: number | null
    float: number | null
    optionalFloat: number | null
  }

  export type MMinAggregateOutputType = {
    id: string | null
    int: number | null
    optionalInt: number | null
    float: number | null
    optionalFloat: number | null
    string: string | null
    optionalString: string | null
    enum: ABeautifulEnum | null
    optionalEnum: ABeautifulEnum | null
    boolean: boolean | null
    optionalBoolean: boolean | null
  }

  export type MMaxAggregateOutputType = {
    id: string | null
    int: number | null
    optionalInt: number | null
    float: number | null
    optionalFloat: number | null
    string: string | null
    optionalString: string | null
    enum: ABeautifulEnum | null
    optionalEnum: ABeautifulEnum | null
    boolean: boolean | null
    optionalBoolean: boolean | null
  }

  export type MCountAggregateOutputType = {
    id: number
    n_ids: number
    int: number
    optionalInt: number
    float: number
    optionalFloat: number
    string: number
    optionalString: number
    json: number
    optionalJson: number
    enum: number
    optionalEnum: number
    boolean: number
    optionalBoolean: number
    _all: number
  }


  export type MAvgAggregateInputType = {
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
  }

  export type MSumAggregateInputType = {
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
  }

  export type MMinAggregateInputType = {
    id?: true | undefined
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
    string?: true | undefined
    optionalString?: true | undefined
    enum?: true | undefined
    optionalEnum?: true | undefined
    boolean?: true | undefined
    optionalBoolean?: true | undefined
  }

  export type MMaxAggregateInputType = {
    id?: true | undefined
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
    string?: true | undefined
    optionalString?: true | undefined
    enum?: true | undefined
    optionalEnum?: true | undefined
    boolean?: true | undefined
    optionalBoolean?: true | undefined
  }

  export type MCountAggregateInputType = {
    id?: true | undefined
    n_ids?: true | undefined
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
    string?: true | undefined
    optionalString?: true | undefined
    json?: true | undefined
    optionalJson?: true | undefined
    enum?: true | undefined
    optionalEnum?: true | undefined
    boolean?: true | undefined
    optionalBoolean?: true | undefined
    _all?: true | undefined
  }

  export type MAggregateArgs = {
    /**
     * Filter which M to aggregate.
     */
    where?: MWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MS to fetch.
     */
    orderBy?: Enumerable<MOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` MS from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` MS.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MS
    **/
    _count?: true | MCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MMaxAggregateInputType
  }

  export type GetMAggregateType<T extends MAggregateArgs> = {
        [P in keyof T & keyof AggregateM]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateM[P]>
      : GetScalarType<T[P], AggregateM[P]>
  }




  export type MGroupByArgs = {
    where?: MWhereInput | undefined
    orderBy?: Enumerable<MOrderByWithAggregationInput> | undefined
    by: MScalarFieldEnum[]
    having?: MScalarWhereWithAggregatesInput | undefined
    take?: number | undefined
    skip?: number | undefined
    _count?: MCountAggregateInputType | true
    _avg?: MAvgAggregateInputType
    _sum?: MSumAggregateInputType
    _min?: MMinAggregateInputType
    _max?: MMaxAggregateInputType
  }


  export type MGroupByOutputType = {
    id: string
    n_ids: string[]
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
    string: string
    optionalString: string | null
    json: JsonValue
    optionalJson: JsonValue | null
    enum: ABeautifulEnum
    optionalEnum: ABeautifulEnum | null
    boolean: boolean
    optionalBoolean: boolean | null
    _count: MCountAggregateOutputType | null
    _avg: MAvgAggregateOutputType | null
    _sum: MSumAggregateOutputType | null
    _min: MMinAggregateOutputType | null
    _max: MMaxAggregateOutputType | null
  }

  type GetMGroupByPayload<T extends MGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MGroupByOutputType[P]>
            : GetScalarType<T[P], MGroupByOutputType[P]>
        }
      >
    >


  export type MSelect = {
    id?: boolean | undefined
    n_ids?: boolean | undefined
    int?: boolean | undefined
    optionalInt?: boolean | undefined
    float?: boolean | undefined
    optionalFloat?: boolean | undefined
    string?: boolean | undefined
    optionalString?: boolean | undefined
    json?: boolean | undefined
    optionalJson?: boolean | undefined
    enum?: boolean | undefined
    optionalEnum?: boolean | undefined
    boolean?: boolean | undefined
    optionalBoolean?: boolean | undefined
    n?: boolean | M$nArgs | undefined
    _count?: boolean | MCountOutputTypeArgs | undefined
  }


  export type MInclude = {
    n?: boolean | M$nArgs | undefined
    _count?: boolean | MCountOutputTypeArgs | undefined
  }

  export type MGetPayload<S extends boolean | null | undefined | MArgs> =
    S extends { select: any, include: any } ? 'Please either choose \`select\` or \`include\`' :
    S extends true ? M :
    S extends undefined ? never :
    S extends { include: any } & (MArgs | MFindManyArgs)
    ? M  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'n' ? Array < NGetPayload<S['include'][P]>>  :
        P extends '_count' ? MCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (MArgs | MFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'n' ? Array < NGetPayload<S['select'][P]>>  :
        P extends '_count' ? MCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof M ? M[P] : never
  } 
      : M


  type MCountArgs = 
    Omit<MFindManyArgs, 'select' | 'include'> & {
      select?: MCountAggregateInputType | true
    }

  export interface MDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one M that matches the filter.
     * @param {MFindUniqueArgs} args - Arguments to find a M
     * @example
     * // Get one M
     * const m = await prisma.m.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'M'> extends True ? Prisma__MClient<MGetPayload<T>> : Prisma__MClient<MGetPayload<T> | null, null>

    /**
     * Find one M that matches the filter or throw an error  with \`error.code='P2025'\` 
     *     if no matches were found.
     * @param {MFindUniqueOrThrowArgs} args - Arguments to find a M
     * @example
     * // Get one M
     * const m = await prisma.m.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MFindUniqueOrThrowArgs>
    ): Prisma__MClient<MGetPayload<T>>

    /**
     * Find the first M that matches the filter.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MFindFirstArgs} args - Arguments to find a M
     * @example
     * // Get one M
     * const m = await prisma.m.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'M'> extends True ? Prisma__MClient<MGetPayload<T>> : Prisma__MClient<MGetPayload<T> | null, null>

    /**
     * Find the first M that matches the filter or
     * throw \`NotFoundError\` if no matches were found.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MFindFirstOrThrowArgs} args - Arguments to find a M
     * @example
     * // Get one M
     * const m = await prisma.m.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MFindFirstOrThrowArgs>
    ): Prisma__MClient<MGetPayload<T>>

    /**
     * Find zero or more Ms that matches the filter.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ms
     * const ms = await prisma.m.findMany()
     * 
     * // Get first 10 Ms
     * const ms = await prisma.m.findMany({ take: 10 })
     * 
     * // Only select the \`id\`
     * const mWithIdOnly = await prisma.m.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MFindManyArgs>(
      args?: SelectSubset<T, MFindManyArgs>
    ): Prisma.PrismaPromise<Array<MGetPayload<T>>>

    /**
     * Create a M.
     * @param {MCreateArgs} args - Arguments to create a M.
     * @example
     * // Create one M
     * const M = await prisma.m.create({
     *   data: {
     *     // ... data to create a M
     *   }
     * })
     * 
    **/
    create<T extends MCreateArgs>(
      args: SelectSubset<T, MCreateArgs>
    ): Prisma__MClient<MGetPayload<T>>

    /**
     * Create many Ms.
     *     @param {MCreateManyArgs} args - Arguments to create many Ms.
     *     @example
     *     // Create many Ms
     *     const m = await prisma.m.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MCreateManyArgs>(
      args?: SelectSubset<T, MCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a M.
     * @param {MDeleteArgs} args - Arguments to delete one M.
     * @example
     * // Delete one M
     * const M = await prisma.m.delete({
     *   where: {
     *     // ... filter to delete one M
     *   }
     * })
     * 
    **/
    delete<T extends MDeleteArgs>(
      args: SelectSubset<T, MDeleteArgs>
    ): Prisma__MClient<MGetPayload<T>>

    /**
     * Update one M.
     * @param {MUpdateArgs} args - Arguments to update one M.
     * @example
     * // Update one M
     * const m = await prisma.m.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MUpdateArgs>(
      args: SelectSubset<T, MUpdateArgs>
    ): Prisma__MClient<MGetPayload<T>>

    /**
     * Delete zero or more Ms.
     * @param {MDeleteManyArgs} args - Arguments to filter Ms to delete.
     * @example
     * // Delete a few Ms
     * const { count } = await prisma.m.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MDeleteManyArgs>(
      args?: SelectSubset<T, MDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ms.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ms
     * const m = await prisma.m.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MUpdateManyArgs>(
      args: SelectSubset<T, MUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one M.
     * @param {MUpsertArgs} args - Arguments to update or create a M.
     * @example
     * // Update or create a M
     * const m = await prisma.m.upsert({
     *   create: {
     *     // ... data to create a M
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the M we want to update
     *   }
     * })
    **/
    upsert<T extends MUpsertArgs>(
      args: SelectSubset<T, MUpsertArgs>
    ): Prisma__MClient<MGetPayload<T>>

    /**
     * Find zero or more Ms that matches the filter.
     * @param {MFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const m = await prisma.m.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: MFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a M.
     * @param {MAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const m = await prisma.m.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: MAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Ms.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MCountArgs} args - Arguments to filter Ms to count.
     * @example
     * // Count the number of Ms
     * const count = await prisma.m.count({
     *   where: {
     *     // ... the filter for the Ms we want to count
     *   }
     * })
    **/
    count<T extends MCountArgs>(
      args?: Subset<T, MCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a M.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MAggregateArgs>(args: Subset<T, MAggregateArgs>): Prisma.PrismaPromise<GetMAggregateType<T>>

    /**
     * Group by M.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MGroupByArgs['orderBy'] }
        : { orderBy?: MGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? \`Error: "by" must not be empty.\`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? \`Error: Field "\${P}" used in "having" needs to be provided in "by".\`
            : [
                Error,
                'Field ',
                P,
                \` in "having" needs to be provided in "by"\`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
        }[OrderFields]
    >(args: SubsetIntersection<T, MGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for M.
   * Why is this prefixed with \`Prisma__\`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    n<T extends M$nArgs= {}>(args?: Subset<T, M$nArgs>): Prisma.PrismaPromise<Array<NGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * M base type for findUnique actions
   */
  export type MFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the M
     */
    select?: MSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MInclude | null | undefined
    /**
     * Filter, which M to fetch.
     */
    where: MWhereUniqueInput
  }

  /**
   * M findUnique
   */
  export interface MFindUniqueArgs extends MFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use \`findUniqueOrThrow\` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * M findUniqueOrThrow
   */
  export type MFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the M
     */
    select?: MSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MInclude | null | undefined
    /**
     * Filter, which M to fetch.
     */
    where: MWhereUniqueInput
  }


  /**
   * M base type for findFirst actions
   */
  export type MFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the M
     */
    select?: MSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MInclude | null | undefined
    /**
     * Filter, which M to fetch.
     */
    where?: MWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MS to fetch.
     */
    orderBy?: Enumerable<MOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MS.
     */
    cursor?: MWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` MS from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` MS.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MS.
     */
    distinct?: Enumerable<MScalarFieldEnum> | undefined
  }

  /**
   * M findFirst
   */
  export interface MFindFirstArgs extends MFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use \`findFirstOrThrow\` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * M findFirstOrThrow
   */
  export type MFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the M
     */
    select?: MSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MInclude | null | undefined
    /**
     * Filter, which M to fetch.
     */
    where?: MWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MS to fetch.
     */
    orderBy?: Enumerable<MOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MS.
     */
    cursor?: MWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` MS from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` MS.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MS.
     */
    distinct?: Enumerable<MScalarFieldEnum> | undefined
  }


  /**
   * M findMany
   */
  export type MFindManyArgs = {
    /**
     * Select specific fields to fetch from the M
     */
    select?: MSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MInclude | null | undefined
    /**
     * Filter, which MS to fetch.
     */
    where?: MWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MS to fetch.
     */
    orderBy?: Enumerable<MOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MS.
     */
    cursor?: MWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` MS from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` MS.
     */
    skip?: number | undefined
    distinct?: Enumerable<MScalarFieldEnum> | undefined
  }


  /**
   * M create
   */
  export type MCreateArgs = {
    /**
     * Select specific fields to fetch from the M
     */
    select?: MSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MInclude | null | undefined
    /**
     * The data needed to create a M.
     */
    data: XOR<MCreateInput, MUncheckedCreateInput>
  }


  /**
   * M createMany
   */
  export type MCreateManyArgs = {
    /**
     * The data used to create many MS.
     */
    data: Enumerable<MCreateManyInput>
  }


  /**
   * M update
   */
  export type MUpdateArgs = {
    /**
     * Select specific fields to fetch from the M
     */
    select?: MSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MInclude | null | undefined
    /**
     * The data needed to update a M.
     */
    data: XOR<MUpdateInput, MUncheckedUpdateInput>
    /**
     * Choose, which M to update.
     */
    where: MWhereUniqueInput
  }


  /**
   * M updateMany
   */
  export type MUpdateManyArgs = {
    /**
     * The data used to update MS.
     */
    data: XOR<MUpdateManyMutationInput, MUncheckedUpdateManyInput>
    /**
     * Filter which MS to update
     */
    where?: MWhereInput | undefined
  }


  /**
   * M upsert
   */
  export type MUpsertArgs = {
    /**
     * Select specific fields to fetch from the M
     */
    select?: MSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MInclude | null | undefined
    /**
     * The filter to search for the M to update in case it exists.
     */
    where: MWhereUniqueInput
    /**
     * In case the M found by the \`where\` argument doesn't exist, create a new M with this data.
     */
    create: XOR<MCreateInput, MUncheckedCreateInput>
    /**
     * In case the M was found with the provided \`where\` argument, update it with this data.
     */
    update: XOR<MUpdateInput, MUncheckedUpdateInput>
  }


  /**
   * M delete
   */
  export type MDeleteArgs = {
    /**
     * Select specific fields to fetch from the M
     */
    select?: MSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MInclude | null | undefined
    /**
     * Filter which M to delete.
     */
    where: MWhereUniqueInput
  }


  /**
   * M deleteMany
   */
  export type MDeleteManyArgs = {
    /**
     * Filter which MS to delete
     */
    where?: MWhereInput | undefined
  }


  /**
   * M findRaw
   */
  export type MFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. \${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue | undefined
    /**
     * Additional options to pass to the \`find\` command \${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue | undefined
  }


  /**
   * M aggregateRaw
   */
  export type MAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. \${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[] | undefined
    /**
     * Additional options to pass to the \`aggregate\` command \${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue | undefined
  }


  /**
   * M.n
   */
  export type M$nArgs = {
    /**
     * Select specific fields to fetch from the N
     */
    select?: NSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NInclude | null | undefined
    where?: NWhereInput | undefined
    orderBy?: Enumerable<NOrderByWithRelationInput> | undefined
    cursor?: NWhereUniqueInput | undefined
    take?: number | undefined
    skip?: number | undefined
    distinct?: Enumerable<NScalarFieldEnum> | undefined
  }


  /**
   * M without action
   */
  export type MArgs = {
    /**
     * Select specific fields to fetch from the M
     */
    select?: MSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MInclude | null | undefined
  }



  /**
   * Model N
   */


  export type AggregateN = {
    _count: NCountAggregateOutputType | null
    _avg: NAvgAggregateOutputType | null
    _sum: NSumAggregateOutputType | null
    _min: NMinAggregateOutputType | null
    _max: NMaxAggregateOutputType | null
  }

  export type NAvgAggregateOutputType = {
    int: number | null
    optionalInt: number | null
    float: number | null
    optionalFloat: number | null
  }

  export type NSumAggregateOutputType = {
    int: number | null
    optionalInt: number | null
    float: number | null
    optionalFloat: number | null
  }

  export type NMinAggregateOutputType = {
    id: string | null
    int: number | null
    optionalInt: number | null
    float: number | null
    optionalFloat: number | null
    string: string | null
    optionalString: string | null
    enum: ABeautifulEnum | null
    optionalEnum: ABeautifulEnum | null
    boolean: boolean | null
    optionalBoolean: boolean | null
  }

  export type NMaxAggregateOutputType = {
    id: string | null
    int: number | null
    optionalInt: number | null
    float: number | null
    optionalFloat: number | null
    string: string | null
    optionalString: string | null
    enum: ABeautifulEnum | null
    optionalEnum: ABeautifulEnum | null
    boolean: boolean | null
    optionalBoolean: boolean | null
  }

  export type NCountAggregateOutputType = {
    id: number
    m_ids: number
    int: number
    optionalInt: number
    float: number
    optionalFloat: number
    string: number
    optionalString: number
    json: number
    optionalJson: number
    enum: number
    optionalEnum: number
    boolean: number
    optionalBoolean: number
    _all: number
  }


  export type NAvgAggregateInputType = {
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
  }

  export type NSumAggregateInputType = {
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
  }

  export type NMinAggregateInputType = {
    id?: true | undefined
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
    string?: true | undefined
    optionalString?: true | undefined
    enum?: true | undefined
    optionalEnum?: true | undefined
    boolean?: true | undefined
    optionalBoolean?: true | undefined
  }

  export type NMaxAggregateInputType = {
    id?: true | undefined
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
    string?: true | undefined
    optionalString?: true | undefined
    enum?: true | undefined
    optionalEnum?: true | undefined
    boolean?: true | undefined
    optionalBoolean?: true | undefined
  }

  export type NCountAggregateInputType = {
    id?: true | undefined
    m_ids?: true | undefined
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
    string?: true | undefined
    optionalString?: true | undefined
    json?: true | undefined
    optionalJson?: true | undefined
    enum?: true | undefined
    optionalEnum?: true | undefined
    boolean?: true | undefined
    optionalBoolean?: true | undefined
    _all?: true | undefined
  }

  export type NAggregateArgs = {
    /**
     * Filter which N to aggregate.
     */
    where?: NWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NS to fetch.
     */
    orderBy?: Enumerable<NOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` NS from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` NS.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NS
    **/
    _count?: true | NCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NMaxAggregateInputType
  }

  export type GetNAggregateType<T extends NAggregateArgs> = {
        [P in keyof T & keyof AggregateN]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateN[P]>
      : GetScalarType<T[P], AggregateN[P]>
  }




  export type NGroupByArgs = {
    where?: NWhereInput | undefined
    orderBy?: Enumerable<NOrderByWithAggregationInput> | undefined
    by: NScalarFieldEnum[]
    having?: NScalarWhereWithAggregatesInput | undefined
    take?: number | undefined
    skip?: number | undefined
    _count?: NCountAggregateInputType | true
    _avg?: NAvgAggregateInputType
    _sum?: NSumAggregateInputType
    _min?: NMinAggregateInputType
    _max?: NMaxAggregateInputType
  }


  export type NGroupByOutputType = {
    id: string
    m_ids: string[]
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
    string: string
    optionalString: string | null
    json: JsonValue
    optionalJson: JsonValue | null
    enum: ABeautifulEnum
    optionalEnum: ABeautifulEnum | null
    boolean: boolean
    optionalBoolean: boolean | null
    _count: NCountAggregateOutputType | null
    _avg: NAvgAggregateOutputType | null
    _sum: NSumAggregateOutputType | null
    _min: NMinAggregateOutputType | null
    _max: NMaxAggregateOutputType | null
  }

  type GetNGroupByPayload<T extends NGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<NGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NGroupByOutputType[P]>
            : GetScalarType<T[P], NGroupByOutputType[P]>
        }
      >
    >


  export type NSelect = {
    id?: boolean | undefined
    m_ids?: boolean | undefined
    int?: boolean | undefined
    optionalInt?: boolean | undefined
    float?: boolean | undefined
    optionalFloat?: boolean | undefined
    string?: boolean | undefined
    optionalString?: boolean | undefined
    json?: boolean | undefined
    optionalJson?: boolean | undefined
    enum?: boolean | undefined
    optionalEnum?: boolean | undefined
    boolean?: boolean | undefined
    optionalBoolean?: boolean | undefined
    m?: boolean | N$mArgs | undefined
    _count?: boolean | NCountOutputTypeArgs | undefined
  }


  export type NInclude = {
    m?: boolean | N$mArgs | undefined
    _count?: boolean | NCountOutputTypeArgs | undefined
  }

  export type NGetPayload<S extends boolean | null | undefined | NArgs> =
    S extends { select: any, include: any } ? 'Please either choose \`select\` or \`include\`' :
    S extends true ? N :
    S extends undefined ? never :
    S extends { include: any } & (NArgs | NFindManyArgs)
    ? N  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'm' ? Array < MGetPayload<S['include'][P]>>  :
        P extends '_count' ? NCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (NArgs | NFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'm' ? Array < MGetPayload<S['select'][P]>>  :
        P extends '_count' ? NCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof N ? N[P] : never
  } 
      : N


  type NCountArgs = 
    Omit<NFindManyArgs, 'select' | 'include'> & {
      select?: NCountAggregateInputType | true
    }

  export interface NDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one N that matches the filter.
     * @param {NFindUniqueArgs} args - Arguments to find a N
     * @example
     * // Get one N
     * const n = await prisma.n.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, NFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'N'> extends True ? Prisma__NClient<NGetPayload<T>> : Prisma__NClient<NGetPayload<T> | null, null>

    /**
     * Find one N that matches the filter or throw an error  with \`error.code='P2025'\` 
     *     if no matches were found.
     * @param {NFindUniqueOrThrowArgs} args - Arguments to find a N
     * @example
     * // Get one N
     * const n = await prisma.n.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, NFindUniqueOrThrowArgs>
    ): Prisma__NClient<NGetPayload<T>>

    /**
     * Find the first N that matches the filter.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NFindFirstArgs} args - Arguments to find a N
     * @example
     * // Get one N
     * const n = await prisma.n.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, NFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'N'> extends True ? Prisma__NClient<NGetPayload<T>> : Prisma__NClient<NGetPayload<T> | null, null>

    /**
     * Find the first N that matches the filter or
     * throw \`NotFoundError\` if no matches were found.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NFindFirstOrThrowArgs} args - Arguments to find a N
     * @example
     * // Get one N
     * const n = await prisma.n.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NFindFirstOrThrowArgs>(
      args?: SelectSubset<T, NFindFirstOrThrowArgs>
    ): Prisma__NClient<NGetPayload<T>>

    /**
     * Find zero or more Ns that matches the filter.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ns
     * const ns = await prisma.n.findMany()
     * 
     * // Get first 10 Ns
     * const ns = await prisma.n.findMany({ take: 10 })
     * 
     * // Only select the \`id\`
     * const nWithIdOnly = await prisma.n.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NFindManyArgs>(
      args?: SelectSubset<T, NFindManyArgs>
    ): Prisma.PrismaPromise<Array<NGetPayload<T>>>

    /**
     * Create a N.
     * @param {NCreateArgs} args - Arguments to create a N.
     * @example
     * // Create one N
     * const N = await prisma.n.create({
     *   data: {
     *     // ... data to create a N
     *   }
     * })
     * 
    **/
    create<T extends NCreateArgs>(
      args: SelectSubset<T, NCreateArgs>
    ): Prisma__NClient<NGetPayload<T>>

    /**
     * Create many Ns.
     *     @param {NCreateManyArgs} args - Arguments to create many Ns.
     *     @example
     *     // Create many Ns
     *     const n = await prisma.n.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NCreateManyArgs>(
      args?: SelectSubset<T, NCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a N.
     * @param {NDeleteArgs} args - Arguments to delete one N.
     * @example
     * // Delete one N
     * const N = await prisma.n.delete({
     *   where: {
     *     // ... filter to delete one N
     *   }
     * })
     * 
    **/
    delete<T extends NDeleteArgs>(
      args: SelectSubset<T, NDeleteArgs>
    ): Prisma__NClient<NGetPayload<T>>

    /**
     * Update one N.
     * @param {NUpdateArgs} args - Arguments to update one N.
     * @example
     * // Update one N
     * const n = await prisma.n.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NUpdateArgs>(
      args: SelectSubset<T, NUpdateArgs>
    ): Prisma__NClient<NGetPayload<T>>

    /**
     * Delete zero or more Ns.
     * @param {NDeleteManyArgs} args - Arguments to filter Ns to delete.
     * @example
     * // Delete a few Ns
     * const { count } = await prisma.n.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NDeleteManyArgs>(
      args?: SelectSubset<T, NDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ns.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ns
     * const n = await prisma.n.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NUpdateManyArgs>(
      args: SelectSubset<T, NUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one N.
     * @param {NUpsertArgs} args - Arguments to update or create a N.
     * @example
     * // Update or create a N
     * const n = await prisma.n.upsert({
     *   create: {
     *     // ... data to create a N
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the N we want to update
     *   }
     * })
    **/
    upsert<T extends NUpsertArgs>(
      args: SelectSubset<T, NUpsertArgs>
    ): Prisma__NClient<NGetPayload<T>>

    /**
     * Find zero or more Ns that matches the filter.
     * @param {NFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const n = await prisma.n.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: NFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a N.
     * @param {NAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const n = await prisma.n.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: NAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Ns.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NCountArgs} args - Arguments to filter Ns to count.
     * @example
     * // Count the number of Ns
     * const count = await prisma.n.count({
     *   where: {
     *     // ... the filter for the Ns we want to count
     *   }
     * })
    **/
    count<T extends NCountArgs>(
      args?: Subset<T, NCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a N.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NAggregateArgs>(args: Subset<T, NAggregateArgs>): Prisma.PrismaPromise<GetNAggregateType<T>>

    /**
     * Group by N.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NGroupByArgs['orderBy'] }
        : { orderBy?: NGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? \`Error: "by" must not be empty.\`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? \`Error: Field "\${P}" used in "having" needs to be provided in "by".\`
            : [
                Error,
                'Field ',
                P,
                \` in "having" needs to be provided in "by"\`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
        }[OrderFields]
    >(args: SubsetIntersection<T, NGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for N.
   * Why is this prefixed with \`Prisma__\`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__NClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    m<T extends N$mArgs= {}>(args?: Subset<T, N$mArgs>): Prisma.PrismaPromise<Array<MGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * N base type for findUnique actions
   */
  export type NFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the N
     */
    select?: NSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NInclude | null | undefined
    /**
     * Filter, which N to fetch.
     */
    where: NWhereUniqueInput
  }

  /**
   * N findUnique
   */
  export interface NFindUniqueArgs extends NFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use \`findUniqueOrThrow\` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * N findUniqueOrThrow
   */
  export type NFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the N
     */
    select?: NSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NInclude | null | undefined
    /**
     * Filter, which N to fetch.
     */
    where: NWhereUniqueInput
  }


  /**
   * N base type for findFirst actions
   */
  export type NFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the N
     */
    select?: NSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NInclude | null | undefined
    /**
     * Filter, which N to fetch.
     */
    where?: NWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NS to fetch.
     */
    orderBy?: Enumerable<NOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NS.
     */
    cursor?: NWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` NS from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` NS.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NS.
     */
    distinct?: Enumerable<NScalarFieldEnum> | undefined
  }

  /**
   * N findFirst
   */
  export interface NFindFirstArgs extends NFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use \`findFirstOrThrow\` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * N findFirstOrThrow
   */
  export type NFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the N
     */
    select?: NSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NInclude | null | undefined
    /**
     * Filter, which N to fetch.
     */
    where?: NWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NS to fetch.
     */
    orderBy?: Enumerable<NOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NS.
     */
    cursor?: NWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` NS from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` NS.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NS.
     */
    distinct?: Enumerable<NScalarFieldEnum> | undefined
  }


  /**
   * N findMany
   */
  export type NFindManyArgs = {
    /**
     * Select specific fields to fetch from the N
     */
    select?: NSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NInclude | null | undefined
    /**
     * Filter, which NS to fetch.
     */
    where?: NWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NS to fetch.
     */
    orderBy?: Enumerable<NOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NS.
     */
    cursor?: NWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` NS from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` NS.
     */
    skip?: number | undefined
    distinct?: Enumerable<NScalarFieldEnum> | undefined
  }


  /**
   * N create
   */
  export type NCreateArgs = {
    /**
     * Select specific fields to fetch from the N
     */
    select?: NSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NInclude | null | undefined
    /**
     * The data needed to create a N.
     */
    data: XOR<NCreateInput, NUncheckedCreateInput>
  }


  /**
   * N createMany
   */
  export type NCreateManyArgs = {
    /**
     * The data used to create many NS.
     */
    data: Enumerable<NCreateManyInput>
  }


  /**
   * N update
   */
  export type NUpdateArgs = {
    /**
     * Select specific fields to fetch from the N
     */
    select?: NSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NInclude | null | undefined
    /**
     * The data needed to update a N.
     */
    data: XOR<NUpdateInput, NUncheckedUpdateInput>
    /**
     * Choose, which N to update.
     */
    where: NWhereUniqueInput
  }


  /**
   * N updateMany
   */
  export type NUpdateManyArgs = {
    /**
     * The data used to update NS.
     */
    data: XOR<NUpdateManyMutationInput, NUncheckedUpdateManyInput>
    /**
     * Filter which NS to update
     */
    where?: NWhereInput | undefined
  }


  /**
   * N upsert
   */
  export type NUpsertArgs = {
    /**
     * Select specific fields to fetch from the N
     */
    select?: NSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NInclude | null | undefined
    /**
     * The filter to search for the N to update in case it exists.
     */
    where: NWhereUniqueInput
    /**
     * In case the N found by the \`where\` argument doesn't exist, create a new N with this data.
     */
    create: XOR<NCreateInput, NUncheckedCreateInput>
    /**
     * In case the N was found with the provided \`where\` argument, update it with this data.
     */
    update: XOR<NUpdateInput, NUncheckedUpdateInput>
  }


  /**
   * N delete
   */
  export type NDeleteArgs = {
    /**
     * Select specific fields to fetch from the N
     */
    select?: NSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NInclude | null | undefined
    /**
     * Filter which N to delete.
     */
    where: NWhereUniqueInput
  }


  /**
   * N deleteMany
   */
  export type NDeleteManyArgs = {
    /**
     * Filter which NS to delete
     */
    where?: NWhereInput | undefined
  }


  /**
   * N findRaw
   */
  export type NFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. \${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue | undefined
    /**
     * Additional options to pass to the \`find\` command \${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue | undefined
  }


  /**
   * N aggregateRaw
   */
  export type NAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. \${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[] | undefined
    /**
     * Additional options to pass to the \`aggregate\` command \${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue | undefined
  }


  /**
   * N.m
   */
  export type N$mArgs = {
    /**
     * Select specific fields to fetch from the M
     */
    select?: MSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MInclude | null | undefined
    where?: MWhereInput | undefined
    orderBy?: Enumerable<MOrderByWithRelationInput> | undefined
    cursor?: MWhereUniqueInput | undefined
    take?: number | undefined
    skip?: number | undefined
    distinct?: Enumerable<MScalarFieldEnum> | undefined
  }


  /**
   * N without action
   */
  export type NArgs = {
    /**
     * Select specific fields to fetch from the N
     */
    select?: NSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NInclude | null | undefined
  }



  /**
   * Model OneOptional
   */


  export type AggregateOneOptional = {
    _count: OneOptionalCountAggregateOutputType | null
    _avg: OneOptionalAvgAggregateOutputType | null
    _sum: OneOptionalSumAggregateOutputType | null
    _min: OneOptionalMinAggregateOutputType | null
    _max: OneOptionalMaxAggregateOutputType | null
  }

  export type OneOptionalAvgAggregateOutputType = {
    int: number | null
    optionalInt: number | null
    float: number | null
    optionalFloat: number | null
  }

  export type OneOptionalSumAggregateOutputType = {
    int: number | null
    optionalInt: number | null
    float: number | null
    optionalFloat: number | null
  }

  export type OneOptionalMinAggregateOutputType = {
    id: string | null
    int: number | null
    optionalInt: number | null
    float: number | null
    optionalFloat: number | null
    string: string | null
    optionalString: string | null
    enum: ABeautifulEnum | null
    optionalEnum: ABeautifulEnum | null
    boolean: boolean | null
    optionalBoolean: boolean | null
  }

  export type OneOptionalMaxAggregateOutputType = {
    id: string | null
    int: number | null
    optionalInt: number | null
    float: number | null
    optionalFloat: number | null
    string: string | null
    optionalString: string | null
    enum: ABeautifulEnum | null
    optionalEnum: ABeautifulEnum | null
    boolean: boolean | null
    optionalBoolean: boolean | null
  }

  export type OneOptionalCountAggregateOutputType = {
    id: number
    int: number
    optionalInt: number
    float: number
    optionalFloat: number
    string: number
    optionalString: number
    json: number
    optionalJson: number
    enum: number
    optionalEnum: number
    boolean: number
    optionalBoolean: number
    _all: number
  }


  export type OneOptionalAvgAggregateInputType = {
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
  }

  export type OneOptionalSumAggregateInputType = {
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
  }

  export type OneOptionalMinAggregateInputType = {
    id?: true | undefined
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
    string?: true | undefined
    optionalString?: true | undefined
    enum?: true | undefined
    optionalEnum?: true | undefined
    boolean?: true | undefined
    optionalBoolean?: true | undefined
  }

  export type OneOptionalMaxAggregateInputType = {
    id?: true | undefined
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
    string?: true | undefined
    optionalString?: true | undefined
    enum?: true | undefined
    optionalEnum?: true | undefined
    boolean?: true | undefined
    optionalBoolean?: true | undefined
  }

  export type OneOptionalCountAggregateInputType = {
    id?: true | undefined
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
    string?: true | undefined
    optionalString?: true | undefined
    json?: true | undefined
    optionalJson?: true | undefined
    enum?: true | undefined
    optionalEnum?: true | undefined
    boolean?: true | undefined
    optionalBoolean?: true | undefined
    _all?: true | undefined
  }

  export type OneOptionalAggregateArgs = {
    /**
     * Filter which OneOptional to aggregate.
     */
    where?: OneOptionalWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OneOptionals to fetch.
     */
    orderBy?: Enumerable<OneOptionalOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OneOptionalWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` OneOptionals from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` OneOptionals.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OneOptionals
    **/
    _count?: true | OneOptionalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OneOptionalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OneOptionalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OneOptionalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OneOptionalMaxAggregateInputType
  }

  export type GetOneOptionalAggregateType<T extends OneOptionalAggregateArgs> = {
        [P in keyof T & keyof AggregateOneOptional]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOneOptional[P]>
      : GetScalarType<T[P], AggregateOneOptional[P]>
  }




  export type OneOptionalGroupByArgs = {
    where?: OneOptionalWhereInput | undefined
    orderBy?: Enumerable<OneOptionalOrderByWithAggregationInput> | undefined
    by: OneOptionalScalarFieldEnum[]
    having?: OneOptionalScalarWhereWithAggregatesInput | undefined
    take?: number | undefined
    skip?: number | undefined
    _count?: OneOptionalCountAggregateInputType | true
    _avg?: OneOptionalAvgAggregateInputType
    _sum?: OneOptionalSumAggregateInputType
    _min?: OneOptionalMinAggregateInputType
    _max?: OneOptionalMaxAggregateInputType
  }


  export type OneOptionalGroupByOutputType = {
    id: string
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
    string: string
    optionalString: string | null
    json: JsonValue
    optionalJson: JsonValue | null
    enum: ABeautifulEnum
    optionalEnum: ABeautifulEnum | null
    boolean: boolean
    optionalBoolean: boolean | null
    _count: OneOptionalCountAggregateOutputType | null
    _avg: OneOptionalAvgAggregateOutputType | null
    _sum: OneOptionalSumAggregateOutputType | null
    _min: OneOptionalMinAggregateOutputType | null
    _max: OneOptionalMaxAggregateOutputType | null
  }

  type GetOneOptionalGroupByPayload<T extends OneOptionalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<OneOptionalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OneOptionalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OneOptionalGroupByOutputType[P]>
            : GetScalarType<T[P], OneOptionalGroupByOutputType[P]>
        }
      >
    >


  export type OneOptionalSelect = {
    id?: boolean | undefined
    int?: boolean | undefined
    optionalInt?: boolean | undefined
    float?: boolean | undefined
    optionalFloat?: boolean | undefined
    string?: boolean | undefined
    optionalString?: boolean | undefined
    json?: boolean | undefined
    optionalJson?: boolean | undefined
    enum?: boolean | undefined
    optionalEnum?: boolean | undefined
    boolean?: boolean | undefined
    optionalBoolean?: boolean | undefined
    many?: boolean | OneOptional$manyArgs | undefined
    _count?: boolean | OneOptionalCountOutputTypeArgs | undefined
  }


  export type OneOptionalInclude = {
    many?: boolean | OneOptional$manyArgs | undefined
    _count?: boolean | OneOptionalCountOutputTypeArgs | undefined
  }

  export type OneOptionalGetPayload<S extends boolean | null | undefined | OneOptionalArgs> =
    S extends { select: any, include: any } ? 'Please either choose \`select\` or \`include\`' :
    S extends true ? OneOptional :
    S extends undefined ? never :
    S extends { include: any } & (OneOptionalArgs | OneOptionalFindManyArgs)
    ? OneOptional  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'many' ? Array < ManyRequiredGetPayload<S['include'][P]>>  :
        P extends '_count' ? OneOptionalCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (OneOptionalArgs | OneOptionalFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'many' ? Array < ManyRequiredGetPayload<S['select'][P]>>  :
        P extends '_count' ? OneOptionalCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof OneOptional ? OneOptional[P] : never
  } 
      : OneOptional


  type OneOptionalCountArgs = 
    Omit<OneOptionalFindManyArgs, 'select' | 'include'> & {
      select?: OneOptionalCountAggregateInputType | true
    }

  export interface OneOptionalDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one OneOptional that matches the filter.
     * @param {OneOptionalFindUniqueArgs} args - Arguments to find a OneOptional
     * @example
     * // Get one OneOptional
     * const oneOptional = await prisma.oneOptional.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OneOptionalFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OneOptionalFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'OneOptional'> extends True ? Prisma__OneOptionalClient<OneOptionalGetPayload<T>> : Prisma__OneOptionalClient<OneOptionalGetPayload<T> | null, null>

    /**
     * Find one OneOptional that matches the filter or throw an error  with \`error.code='P2025'\` 
     *     if no matches were found.
     * @param {OneOptionalFindUniqueOrThrowArgs} args - Arguments to find a OneOptional
     * @example
     * // Get one OneOptional
     * const oneOptional = await prisma.oneOptional.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OneOptionalFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, OneOptionalFindUniqueOrThrowArgs>
    ): Prisma__OneOptionalClient<OneOptionalGetPayload<T>>

    /**
     * Find the first OneOptional that matches the filter.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OneOptionalFindFirstArgs} args - Arguments to find a OneOptional
     * @example
     * // Get one OneOptional
     * const oneOptional = await prisma.oneOptional.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OneOptionalFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OneOptionalFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'OneOptional'> extends True ? Prisma__OneOptionalClient<OneOptionalGetPayload<T>> : Prisma__OneOptionalClient<OneOptionalGetPayload<T> | null, null>

    /**
     * Find the first OneOptional that matches the filter or
     * throw \`NotFoundError\` if no matches were found.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OneOptionalFindFirstOrThrowArgs} args - Arguments to find a OneOptional
     * @example
     * // Get one OneOptional
     * const oneOptional = await prisma.oneOptional.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OneOptionalFindFirstOrThrowArgs>(
      args?: SelectSubset<T, OneOptionalFindFirstOrThrowArgs>
    ): Prisma__OneOptionalClient<OneOptionalGetPayload<T>>

    /**
     * Find zero or more OneOptionals that matches the filter.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OneOptionalFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OneOptionals
     * const oneOptionals = await prisma.oneOptional.findMany()
     * 
     * // Get first 10 OneOptionals
     * const oneOptionals = await prisma.oneOptional.findMany({ take: 10 })
     * 
     * // Only select the \`id\`
     * const oneOptionalWithIdOnly = await prisma.oneOptional.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OneOptionalFindManyArgs>(
      args?: SelectSubset<T, OneOptionalFindManyArgs>
    ): Prisma.PrismaPromise<Array<OneOptionalGetPayload<T>>>

    /**
     * Create a OneOptional.
     * @param {OneOptionalCreateArgs} args - Arguments to create a OneOptional.
     * @example
     * // Create one OneOptional
     * const OneOptional = await prisma.oneOptional.create({
     *   data: {
     *     // ... data to create a OneOptional
     *   }
     * })
     * 
    **/
    create<T extends OneOptionalCreateArgs>(
      args: SelectSubset<T, OneOptionalCreateArgs>
    ): Prisma__OneOptionalClient<OneOptionalGetPayload<T>>

    /**
     * Create many OneOptionals.
     *     @param {OneOptionalCreateManyArgs} args - Arguments to create many OneOptionals.
     *     @example
     *     // Create many OneOptionals
     *     const oneOptional = await prisma.oneOptional.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OneOptionalCreateManyArgs>(
      args?: SelectSubset<T, OneOptionalCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a OneOptional.
     * @param {OneOptionalDeleteArgs} args - Arguments to delete one OneOptional.
     * @example
     * // Delete one OneOptional
     * const OneOptional = await prisma.oneOptional.delete({
     *   where: {
     *     // ... filter to delete one OneOptional
     *   }
     * })
     * 
    **/
    delete<T extends OneOptionalDeleteArgs>(
      args: SelectSubset<T, OneOptionalDeleteArgs>
    ): Prisma__OneOptionalClient<OneOptionalGetPayload<T>>

    /**
     * Update one OneOptional.
     * @param {OneOptionalUpdateArgs} args - Arguments to update one OneOptional.
     * @example
     * // Update one OneOptional
     * const oneOptional = await prisma.oneOptional.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OneOptionalUpdateArgs>(
      args: SelectSubset<T, OneOptionalUpdateArgs>
    ): Prisma__OneOptionalClient<OneOptionalGetPayload<T>>

    /**
     * Delete zero or more OneOptionals.
     * @param {OneOptionalDeleteManyArgs} args - Arguments to filter OneOptionals to delete.
     * @example
     * // Delete a few OneOptionals
     * const { count } = await prisma.oneOptional.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OneOptionalDeleteManyArgs>(
      args?: SelectSubset<T, OneOptionalDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OneOptionals.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OneOptionalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OneOptionals
     * const oneOptional = await prisma.oneOptional.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OneOptionalUpdateManyArgs>(
      args: SelectSubset<T, OneOptionalUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OneOptional.
     * @param {OneOptionalUpsertArgs} args - Arguments to update or create a OneOptional.
     * @example
     * // Update or create a OneOptional
     * const oneOptional = await prisma.oneOptional.upsert({
     *   create: {
     *     // ... data to create a OneOptional
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OneOptional we want to update
     *   }
     * })
    **/
    upsert<T extends OneOptionalUpsertArgs>(
      args: SelectSubset<T, OneOptionalUpsertArgs>
    ): Prisma__OneOptionalClient<OneOptionalGetPayload<T>>

    /**
     * Find zero or more OneOptionals that matches the filter.
     * @param {OneOptionalFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const oneOptional = await prisma.oneOptional.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: OneOptionalFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a OneOptional.
     * @param {OneOptionalAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const oneOptional = await prisma.oneOptional.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: OneOptionalAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of OneOptionals.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OneOptionalCountArgs} args - Arguments to filter OneOptionals to count.
     * @example
     * // Count the number of OneOptionals
     * const count = await prisma.oneOptional.count({
     *   where: {
     *     // ... the filter for the OneOptionals we want to count
     *   }
     * })
    **/
    count<T extends OneOptionalCountArgs>(
      args?: Subset<T, OneOptionalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OneOptionalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OneOptional.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OneOptionalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OneOptionalAggregateArgs>(args: Subset<T, OneOptionalAggregateArgs>): Prisma.PrismaPromise<GetOneOptionalAggregateType<T>>

    /**
     * Group by OneOptional.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OneOptionalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OneOptionalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OneOptionalGroupByArgs['orderBy'] }
        : { orderBy?: OneOptionalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? \`Error: "by" must not be empty.\`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? \`Error: Field "\${P}" used in "having" needs to be provided in "by".\`
            : [
                Error,
                'Field ',
                P,
                \` in "having" needs to be provided in "by"\`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
        }[OrderFields]
    >(args: SubsetIntersection<T, OneOptionalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOneOptionalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for OneOptional.
   * Why is this prefixed with \`Prisma__\`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OneOptionalClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    many<T extends OneOptional$manyArgs= {}>(args?: Subset<T, OneOptional$manyArgs>): Prisma.PrismaPromise<Array<ManyRequiredGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * OneOptional base type for findUnique actions
   */
  export type OneOptionalFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the OneOptional
     */
    select?: OneOptionalSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OneOptionalInclude | null | undefined
    /**
     * Filter, which OneOptional to fetch.
     */
    where: OneOptionalWhereUniqueInput
  }

  /**
   * OneOptional findUnique
   */
  export interface OneOptionalFindUniqueArgs extends OneOptionalFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use \`findUniqueOrThrow\` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * OneOptional findUniqueOrThrow
   */
  export type OneOptionalFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the OneOptional
     */
    select?: OneOptionalSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OneOptionalInclude | null | undefined
    /**
     * Filter, which OneOptional to fetch.
     */
    where: OneOptionalWhereUniqueInput
  }


  /**
   * OneOptional base type for findFirst actions
   */
  export type OneOptionalFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the OneOptional
     */
    select?: OneOptionalSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OneOptionalInclude | null | undefined
    /**
     * Filter, which OneOptional to fetch.
     */
    where?: OneOptionalWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OneOptionals to fetch.
     */
    orderBy?: Enumerable<OneOptionalOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OneOptionals.
     */
    cursor?: OneOptionalWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` OneOptionals from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` OneOptionals.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OneOptionals.
     */
    distinct?: Enumerable<OneOptionalScalarFieldEnum> | undefined
  }

  /**
   * OneOptional findFirst
   */
  export interface OneOptionalFindFirstArgs extends OneOptionalFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use \`findFirstOrThrow\` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * OneOptional findFirstOrThrow
   */
  export type OneOptionalFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the OneOptional
     */
    select?: OneOptionalSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OneOptionalInclude | null | undefined
    /**
     * Filter, which OneOptional to fetch.
     */
    where?: OneOptionalWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OneOptionals to fetch.
     */
    orderBy?: Enumerable<OneOptionalOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OneOptionals.
     */
    cursor?: OneOptionalWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` OneOptionals from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` OneOptionals.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OneOptionals.
     */
    distinct?: Enumerable<OneOptionalScalarFieldEnum> | undefined
  }


  /**
   * OneOptional findMany
   */
  export type OneOptionalFindManyArgs = {
    /**
     * Select specific fields to fetch from the OneOptional
     */
    select?: OneOptionalSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OneOptionalInclude | null | undefined
    /**
     * Filter, which OneOptionals to fetch.
     */
    where?: OneOptionalWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OneOptionals to fetch.
     */
    orderBy?: Enumerable<OneOptionalOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OneOptionals.
     */
    cursor?: OneOptionalWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` OneOptionals from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` OneOptionals.
     */
    skip?: number | undefined
    distinct?: Enumerable<OneOptionalScalarFieldEnum> | undefined
  }


  /**
   * OneOptional create
   */
  export type OneOptionalCreateArgs = {
    /**
     * Select specific fields to fetch from the OneOptional
     */
    select?: OneOptionalSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OneOptionalInclude | null | undefined
    /**
     * The data needed to create a OneOptional.
     */
    data: XOR<OneOptionalCreateInput, OneOptionalUncheckedCreateInput>
  }


  /**
   * OneOptional createMany
   */
  export type OneOptionalCreateManyArgs = {
    /**
     * The data used to create many OneOptionals.
     */
    data: Enumerable<OneOptionalCreateManyInput>
  }


  /**
   * OneOptional update
   */
  export type OneOptionalUpdateArgs = {
    /**
     * Select specific fields to fetch from the OneOptional
     */
    select?: OneOptionalSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OneOptionalInclude | null | undefined
    /**
     * The data needed to update a OneOptional.
     */
    data: XOR<OneOptionalUpdateInput, OneOptionalUncheckedUpdateInput>
    /**
     * Choose, which OneOptional to update.
     */
    where: OneOptionalWhereUniqueInput
  }


  /**
   * OneOptional updateMany
   */
  export type OneOptionalUpdateManyArgs = {
    /**
     * The data used to update OneOptionals.
     */
    data: XOR<OneOptionalUpdateManyMutationInput, OneOptionalUncheckedUpdateManyInput>
    /**
     * Filter which OneOptionals to update
     */
    where?: OneOptionalWhereInput | undefined
  }


  /**
   * OneOptional upsert
   */
  export type OneOptionalUpsertArgs = {
    /**
     * Select specific fields to fetch from the OneOptional
     */
    select?: OneOptionalSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OneOptionalInclude | null | undefined
    /**
     * The filter to search for the OneOptional to update in case it exists.
     */
    where: OneOptionalWhereUniqueInput
    /**
     * In case the OneOptional found by the \`where\` argument doesn't exist, create a new OneOptional with this data.
     */
    create: XOR<OneOptionalCreateInput, OneOptionalUncheckedCreateInput>
    /**
     * In case the OneOptional was found with the provided \`where\` argument, update it with this data.
     */
    update: XOR<OneOptionalUpdateInput, OneOptionalUncheckedUpdateInput>
  }


  /**
   * OneOptional delete
   */
  export type OneOptionalDeleteArgs = {
    /**
     * Select specific fields to fetch from the OneOptional
     */
    select?: OneOptionalSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OneOptionalInclude | null | undefined
    /**
     * Filter which OneOptional to delete.
     */
    where: OneOptionalWhereUniqueInput
  }


  /**
   * OneOptional deleteMany
   */
  export type OneOptionalDeleteManyArgs = {
    /**
     * Filter which OneOptionals to delete
     */
    where?: OneOptionalWhereInput | undefined
  }


  /**
   * OneOptional findRaw
   */
  export type OneOptionalFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. \${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue | undefined
    /**
     * Additional options to pass to the \`find\` command \${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue | undefined
  }


  /**
   * OneOptional aggregateRaw
   */
  export type OneOptionalAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. \${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[] | undefined
    /**
     * Additional options to pass to the \`aggregate\` command \${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue | undefined
  }


  /**
   * OneOptional.many
   */
  export type OneOptional$manyArgs = {
    /**
     * Select specific fields to fetch from the ManyRequired
     */
    select?: ManyRequiredSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ManyRequiredInclude | null | undefined
    where?: ManyRequiredWhereInput | undefined
    orderBy?: Enumerable<ManyRequiredOrderByWithRelationInput> | undefined
    cursor?: ManyRequiredWhereUniqueInput | undefined
    take?: number | undefined
    skip?: number | undefined
    distinct?: Enumerable<ManyRequiredScalarFieldEnum> | undefined
  }


  /**
   * OneOptional without action
   */
  export type OneOptionalArgs = {
    /**
     * Select specific fields to fetch from the OneOptional
     */
    select?: OneOptionalSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OneOptionalInclude | null | undefined
  }



  /**
   * Model ManyRequired
   */


  export type AggregateManyRequired = {
    _count: ManyRequiredCountAggregateOutputType | null
    _avg: ManyRequiredAvgAggregateOutputType | null
    _sum: ManyRequiredSumAggregateOutputType | null
    _min: ManyRequiredMinAggregateOutputType | null
    _max: ManyRequiredMaxAggregateOutputType | null
  }

  export type ManyRequiredAvgAggregateOutputType = {
    int: number | null
    optionalInt: number | null
    float: number | null
    optionalFloat: number | null
  }

  export type ManyRequiredSumAggregateOutputType = {
    int: number | null
    optionalInt: number | null
    float: number | null
    optionalFloat: number | null
  }

  export type ManyRequiredMinAggregateOutputType = {
    id: string | null
    oneOptionalId: string | null
    int: number | null
    optionalInt: number | null
    float: number | null
    optionalFloat: number | null
    string: string | null
    optionalString: string | null
    enum: ABeautifulEnum | null
    optionalEnum: ABeautifulEnum | null
    boolean: boolean | null
    optionalBoolean: boolean | null
  }

  export type ManyRequiredMaxAggregateOutputType = {
    id: string | null
    oneOptionalId: string | null
    int: number | null
    optionalInt: number | null
    float: number | null
    optionalFloat: number | null
    string: string | null
    optionalString: string | null
    enum: ABeautifulEnum | null
    optionalEnum: ABeautifulEnum | null
    boolean: boolean | null
    optionalBoolean: boolean | null
  }

  export type ManyRequiredCountAggregateOutputType = {
    id: number
    oneOptionalId: number
    int: number
    optionalInt: number
    float: number
    optionalFloat: number
    string: number
    optionalString: number
    json: number
    optionalJson: number
    enum: number
    optionalEnum: number
    boolean: number
    optionalBoolean: number
    _all: number
  }


  export type ManyRequiredAvgAggregateInputType = {
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
  }

  export type ManyRequiredSumAggregateInputType = {
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
  }

  export type ManyRequiredMinAggregateInputType = {
    id?: true | undefined
    oneOptionalId?: true | undefined
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
    string?: true | undefined
    optionalString?: true | undefined
    enum?: true | undefined
    optionalEnum?: true | undefined
    boolean?: true | undefined
    optionalBoolean?: true | undefined
  }

  export type ManyRequiredMaxAggregateInputType = {
    id?: true | undefined
    oneOptionalId?: true | undefined
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
    string?: true | undefined
    optionalString?: true | undefined
    enum?: true | undefined
    optionalEnum?: true | undefined
    boolean?: true | undefined
    optionalBoolean?: true | undefined
  }

  export type ManyRequiredCountAggregateInputType = {
    id?: true | undefined
    oneOptionalId?: true | undefined
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
    string?: true | undefined
    optionalString?: true | undefined
    json?: true | undefined
    optionalJson?: true | undefined
    enum?: true | undefined
    optionalEnum?: true | undefined
    boolean?: true | undefined
    optionalBoolean?: true | undefined
    _all?: true | undefined
  }

  export type ManyRequiredAggregateArgs = {
    /**
     * Filter which ManyRequired to aggregate.
     */
    where?: ManyRequiredWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ManyRequireds to fetch.
     */
    orderBy?: Enumerable<ManyRequiredOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ManyRequiredWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` ManyRequireds from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` ManyRequireds.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ManyRequireds
    **/
    _count?: true | ManyRequiredCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ManyRequiredAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ManyRequiredSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ManyRequiredMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ManyRequiredMaxAggregateInputType
  }

  export type GetManyRequiredAggregateType<T extends ManyRequiredAggregateArgs> = {
        [P in keyof T & keyof AggregateManyRequired]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateManyRequired[P]>
      : GetScalarType<T[P], AggregateManyRequired[P]>
  }




  export type ManyRequiredGroupByArgs = {
    where?: ManyRequiredWhereInput | undefined
    orderBy?: Enumerable<ManyRequiredOrderByWithAggregationInput> | undefined
    by: ManyRequiredScalarFieldEnum[]
    having?: ManyRequiredScalarWhereWithAggregatesInput | undefined
    take?: number | undefined
    skip?: number | undefined
    _count?: ManyRequiredCountAggregateInputType | true
    _avg?: ManyRequiredAvgAggregateInputType
    _sum?: ManyRequiredSumAggregateInputType
    _min?: ManyRequiredMinAggregateInputType
    _max?: ManyRequiredMaxAggregateInputType
  }


  export type ManyRequiredGroupByOutputType = {
    id: string
    oneOptionalId: string | null
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
    string: string
    optionalString: string | null
    json: JsonValue
    optionalJson: JsonValue | null
    enum: ABeautifulEnum
    optionalEnum: ABeautifulEnum | null
    boolean: boolean
    optionalBoolean: boolean | null
    _count: ManyRequiredCountAggregateOutputType | null
    _avg: ManyRequiredAvgAggregateOutputType | null
    _sum: ManyRequiredSumAggregateOutputType | null
    _min: ManyRequiredMinAggregateOutputType | null
    _max: ManyRequiredMaxAggregateOutputType | null
  }

  type GetManyRequiredGroupByPayload<T extends ManyRequiredGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ManyRequiredGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ManyRequiredGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ManyRequiredGroupByOutputType[P]>
            : GetScalarType<T[P], ManyRequiredGroupByOutputType[P]>
        }
      >
    >


  export type ManyRequiredSelect = {
    id?: boolean | undefined
    oneOptionalId?: boolean | undefined
    int?: boolean | undefined
    optionalInt?: boolean | undefined
    float?: boolean | undefined
    optionalFloat?: boolean | undefined
    string?: boolean | undefined
    optionalString?: boolean | undefined
    json?: boolean | undefined
    optionalJson?: boolean | undefined
    enum?: boolean | undefined
    optionalEnum?: boolean | undefined
    boolean?: boolean | undefined
    optionalBoolean?: boolean | undefined
    one?: boolean | OneOptionalArgs | undefined
  }


  export type ManyRequiredInclude = {
    one?: boolean | OneOptionalArgs | undefined
  }

  export type ManyRequiredGetPayload<S extends boolean | null | undefined | ManyRequiredArgs> =
    S extends { select: any, include: any } ? 'Please either choose \`select\` or \`include\`' :
    S extends true ? ManyRequired :
    S extends undefined ? never :
    S extends { include: any } & (ManyRequiredArgs | ManyRequiredFindManyArgs)
    ? ManyRequired  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'one' ? OneOptionalGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (ManyRequiredArgs | ManyRequiredFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'one' ? OneOptionalGetPayload<S['select'][P]> | null :  P extends keyof ManyRequired ? ManyRequired[P] : never
  } 
      : ManyRequired


  type ManyRequiredCountArgs = 
    Omit<ManyRequiredFindManyArgs, 'select' | 'include'> & {
      select?: ManyRequiredCountAggregateInputType | true
    }

  export interface ManyRequiredDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one ManyRequired that matches the filter.
     * @param {ManyRequiredFindUniqueArgs} args - Arguments to find a ManyRequired
     * @example
     * // Get one ManyRequired
     * const manyRequired = await prisma.manyRequired.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ManyRequiredFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ManyRequiredFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ManyRequired'> extends True ? Prisma__ManyRequiredClient<ManyRequiredGetPayload<T>> : Prisma__ManyRequiredClient<ManyRequiredGetPayload<T> | null, null>

    /**
     * Find one ManyRequired that matches the filter or throw an error  with \`error.code='P2025'\` 
     *     if no matches were found.
     * @param {ManyRequiredFindUniqueOrThrowArgs} args - Arguments to find a ManyRequired
     * @example
     * // Get one ManyRequired
     * const manyRequired = await prisma.manyRequired.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ManyRequiredFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ManyRequiredFindUniqueOrThrowArgs>
    ): Prisma__ManyRequiredClient<ManyRequiredGetPayload<T>>

    /**
     * Find the first ManyRequired that matches the filter.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManyRequiredFindFirstArgs} args - Arguments to find a ManyRequired
     * @example
     * // Get one ManyRequired
     * const manyRequired = await prisma.manyRequired.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ManyRequiredFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ManyRequiredFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ManyRequired'> extends True ? Prisma__ManyRequiredClient<ManyRequiredGetPayload<T>> : Prisma__ManyRequiredClient<ManyRequiredGetPayload<T> | null, null>

    /**
     * Find the first ManyRequired that matches the filter or
     * throw \`NotFoundError\` if no matches were found.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManyRequiredFindFirstOrThrowArgs} args - Arguments to find a ManyRequired
     * @example
     * // Get one ManyRequired
     * const manyRequired = await prisma.manyRequired.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ManyRequiredFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ManyRequiredFindFirstOrThrowArgs>
    ): Prisma__ManyRequiredClient<ManyRequiredGetPayload<T>>

    /**
     * Find zero or more ManyRequireds that matches the filter.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManyRequiredFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ManyRequireds
     * const manyRequireds = await prisma.manyRequired.findMany()
     * 
     * // Get first 10 ManyRequireds
     * const manyRequireds = await prisma.manyRequired.findMany({ take: 10 })
     * 
     * // Only select the \`id\`
     * const manyRequiredWithIdOnly = await prisma.manyRequired.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ManyRequiredFindManyArgs>(
      args?: SelectSubset<T, ManyRequiredFindManyArgs>
    ): Prisma.PrismaPromise<Array<ManyRequiredGetPayload<T>>>

    /**
     * Create a ManyRequired.
     * @param {ManyRequiredCreateArgs} args - Arguments to create a ManyRequired.
     * @example
     * // Create one ManyRequired
     * const ManyRequired = await prisma.manyRequired.create({
     *   data: {
     *     // ... data to create a ManyRequired
     *   }
     * })
     * 
    **/
    create<T extends ManyRequiredCreateArgs>(
      args: SelectSubset<T, ManyRequiredCreateArgs>
    ): Prisma__ManyRequiredClient<ManyRequiredGetPayload<T>>

    /**
     * Create many ManyRequireds.
     *     @param {ManyRequiredCreateManyArgs} args - Arguments to create many ManyRequireds.
     *     @example
     *     // Create many ManyRequireds
     *     const manyRequired = await prisma.manyRequired.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ManyRequiredCreateManyArgs>(
      args?: SelectSubset<T, ManyRequiredCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ManyRequired.
     * @param {ManyRequiredDeleteArgs} args - Arguments to delete one ManyRequired.
     * @example
     * // Delete one ManyRequired
     * const ManyRequired = await prisma.manyRequired.delete({
     *   where: {
     *     // ... filter to delete one ManyRequired
     *   }
     * })
     * 
    **/
    delete<T extends ManyRequiredDeleteArgs>(
      args: SelectSubset<T, ManyRequiredDeleteArgs>
    ): Prisma__ManyRequiredClient<ManyRequiredGetPayload<T>>

    /**
     * Update one ManyRequired.
     * @param {ManyRequiredUpdateArgs} args - Arguments to update one ManyRequired.
     * @example
     * // Update one ManyRequired
     * const manyRequired = await prisma.manyRequired.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ManyRequiredUpdateArgs>(
      args: SelectSubset<T, ManyRequiredUpdateArgs>
    ): Prisma__ManyRequiredClient<ManyRequiredGetPayload<T>>

    /**
     * Delete zero or more ManyRequireds.
     * @param {ManyRequiredDeleteManyArgs} args - Arguments to filter ManyRequireds to delete.
     * @example
     * // Delete a few ManyRequireds
     * const { count } = await prisma.manyRequired.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ManyRequiredDeleteManyArgs>(
      args?: SelectSubset<T, ManyRequiredDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ManyRequireds.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManyRequiredUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ManyRequireds
     * const manyRequired = await prisma.manyRequired.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ManyRequiredUpdateManyArgs>(
      args: SelectSubset<T, ManyRequiredUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ManyRequired.
     * @param {ManyRequiredUpsertArgs} args - Arguments to update or create a ManyRequired.
     * @example
     * // Update or create a ManyRequired
     * const manyRequired = await prisma.manyRequired.upsert({
     *   create: {
     *     // ... data to create a ManyRequired
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ManyRequired we want to update
     *   }
     * })
    **/
    upsert<T extends ManyRequiredUpsertArgs>(
      args: SelectSubset<T, ManyRequiredUpsertArgs>
    ): Prisma__ManyRequiredClient<ManyRequiredGetPayload<T>>

    /**
     * Find zero or more ManyRequireds that matches the filter.
     * @param {ManyRequiredFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const manyRequired = await prisma.manyRequired.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: ManyRequiredFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a ManyRequired.
     * @param {ManyRequiredAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const manyRequired = await prisma.manyRequired.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: ManyRequiredAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of ManyRequireds.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManyRequiredCountArgs} args - Arguments to filter ManyRequireds to count.
     * @example
     * // Count the number of ManyRequireds
     * const count = await prisma.manyRequired.count({
     *   where: {
     *     // ... the filter for the ManyRequireds we want to count
     *   }
     * })
    **/
    count<T extends ManyRequiredCountArgs>(
      args?: Subset<T, ManyRequiredCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ManyRequiredCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ManyRequired.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManyRequiredAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ManyRequiredAggregateArgs>(args: Subset<T, ManyRequiredAggregateArgs>): Prisma.PrismaPromise<GetManyRequiredAggregateType<T>>

    /**
     * Group by ManyRequired.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManyRequiredGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ManyRequiredGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ManyRequiredGroupByArgs['orderBy'] }
        : { orderBy?: ManyRequiredGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? \`Error: "by" must not be empty.\`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? \`Error: Field "\${P}" used in "having" needs to be provided in "by".\`
            : [
                Error,
                'Field ',
                P,
                \` in "having" needs to be provided in "by"\`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
        }[OrderFields]
    >(args: SubsetIntersection<T, ManyRequiredGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetManyRequiredGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ManyRequired.
   * Why is this prefixed with \`Prisma__\`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ManyRequiredClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    one<T extends OneOptionalArgs= {}>(args?: Subset<T, OneOptionalArgs>): Prisma__OneOptionalClient<OneOptionalGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ManyRequired base type for findUnique actions
   */
  export type ManyRequiredFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ManyRequired
     */
    select?: ManyRequiredSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ManyRequiredInclude | null | undefined
    /**
     * Filter, which ManyRequired to fetch.
     */
    where: ManyRequiredWhereUniqueInput
  }

  /**
   * ManyRequired findUnique
   */
  export interface ManyRequiredFindUniqueArgs extends ManyRequiredFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use \`findUniqueOrThrow\` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ManyRequired findUniqueOrThrow
   */
  export type ManyRequiredFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ManyRequired
     */
    select?: ManyRequiredSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ManyRequiredInclude | null | undefined
    /**
     * Filter, which ManyRequired to fetch.
     */
    where: ManyRequiredWhereUniqueInput
  }


  /**
   * ManyRequired base type for findFirst actions
   */
  export type ManyRequiredFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ManyRequired
     */
    select?: ManyRequiredSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ManyRequiredInclude | null | undefined
    /**
     * Filter, which ManyRequired to fetch.
     */
    where?: ManyRequiredWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ManyRequireds to fetch.
     */
    orderBy?: Enumerable<ManyRequiredOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ManyRequireds.
     */
    cursor?: ManyRequiredWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` ManyRequireds from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` ManyRequireds.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ManyRequireds.
     */
    distinct?: Enumerable<ManyRequiredScalarFieldEnum> | undefined
  }

  /**
   * ManyRequired findFirst
   */
  export interface ManyRequiredFindFirstArgs extends ManyRequiredFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use \`findFirstOrThrow\` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ManyRequired findFirstOrThrow
   */
  export type ManyRequiredFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ManyRequired
     */
    select?: ManyRequiredSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ManyRequiredInclude | null | undefined
    /**
     * Filter, which ManyRequired to fetch.
     */
    where?: ManyRequiredWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ManyRequireds to fetch.
     */
    orderBy?: Enumerable<ManyRequiredOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ManyRequireds.
     */
    cursor?: ManyRequiredWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` ManyRequireds from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` ManyRequireds.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ManyRequireds.
     */
    distinct?: Enumerable<ManyRequiredScalarFieldEnum> | undefined
  }


  /**
   * ManyRequired findMany
   */
  export type ManyRequiredFindManyArgs = {
    /**
     * Select specific fields to fetch from the ManyRequired
     */
    select?: ManyRequiredSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ManyRequiredInclude | null | undefined
    /**
     * Filter, which ManyRequireds to fetch.
     */
    where?: ManyRequiredWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ManyRequireds to fetch.
     */
    orderBy?: Enumerable<ManyRequiredOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ManyRequireds.
     */
    cursor?: ManyRequiredWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` ManyRequireds from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` ManyRequireds.
     */
    skip?: number | undefined
    distinct?: Enumerable<ManyRequiredScalarFieldEnum> | undefined
  }


  /**
   * ManyRequired create
   */
  export type ManyRequiredCreateArgs = {
    /**
     * Select specific fields to fetch from the ManyRequired
     */
    select?: ManyRequiredSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ManyRequiredInclude | null | undefined
    /**
     * The data needed to create a ManyRequired.
     */
    data: XOR<ManyRequiredCreateInput, ManyRequiredUncheckedCreateInput>
  }


  /**
   * ManyRequired createMany
   */
  export type ManyRequiredCreateManyArgs = {
    /**
     * The data used to create many ManyRequireds.
     */
    data: Enumerable<ManyRequiredCreateManyInput>
  }


  /**
   * ManyRequired update
   */
  export type ManyRequiredUpdateArgs = {
    /**
     * Select specific fields to fetch from the ManyRequired
     */
    select?: ManyRequiredSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ManyRequiredInclude | null | undefined
    /**
     * The data needed to update a ManyRequired.
     */
    data: XOR<ManyRequiredUpdateInput, ManyRequiredUncheckedUpdateInput>
    /**
     * Choose, which ManyRequired to update.
     */
    where: ManyRequiredWhereUniqueInput
  }


  /**
   * ManyRequired updateMany
   */
  export type ManyRequiredUpdateManyArgs = {
    /**
     * The data used to update ManyRequireds.
     */
    data: XOR<ManyRequiredUpdateManyMutationInput, ManyRequiredUncheckedUpdateManyInput>
    /**
     * Filter which ManyRequireds to update
     */
    where?: ManyRequiredWhereInput | undefined
  }


  /**
   * ManyRequired upsert
   */
  export type ManyRequiredUpsertArgs = {
    /**
     * Select specific fields to fetch from the ManyRequired
     */
    select?: ManyRequiredSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ManyRequiredInclude | null | undefined
    /**
     * The filter to search for the ManyRequired to update in case it exists.
     */
    where: ManyRequiredWhereUniqueInput
    /**
     * In case the ManyRequired found by the \`where\` argument doesn't exist, create a new ManyRequired with this data.
     */
    create: XOR<ManyRequiredCreateInput, ManyRequiredUncheckedCreateInput>
    /**
     * In case the ManyRequired was found with the provided \`where\` argument, update it with this data.
     */
    update: XOR<ManyRequiredUpdateInput, ManyRequiredUncheckedUpdateInput>
  }


  /**
   * ManyRequired delete
   */
  export type ManyRequiredDeleteArgs = {
    /**
     * Select specific fields to fetch from the ManyRequired
     */
    select?: ManyRequiredSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ManyRequiredInclude | null | undefined
    /**
     * Filter which ManyRequired to delete.
     */
    where: ManyRequiredWhereUniqueInput
  }


  /**
   * ManyRequired deleteMany
   */
  export type ManyRequiredDeleteManyArgs = {
    /**
     * Filter which ManyRequireds to delete
     */
    where?: ManyRequiredWhereInput | undefined
  }


  /**
   * ManyRequired findRaw
   */
  export type ManyRequiredFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. \${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue | undefined
    /**
     * Additional options to pass to the \`find\` command \${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue | undefined
  }


  /**
   * ManyRequired aggregateRaw
   */
  export type ManyRequiredAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. \${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[] | undefined
    /**
     * Additional options to pass to the \`aggregate\` command \${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue | undefined
  }


  /**
   * ManyRequired without action
   */
  export type ManyRequiredArgs = {
    /**
     * Select specific fields to fetch from the ManyRequired
     */
    select?: ManyRequiredSelect | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ManyRequiredInclude | null | undefined
  }



  /**
   * Model OptionalSide1
   */


  export type AggregateOptionalSide1 = {
    _count: OptionalSide1CountAggregateOutputType | null
    _avg: OptionalSide1AvgAggregateOutputType | null
    _sum: OptionalSide1SumAggregateOutputType | null
    _min: OptionalSide1MinAggregateOutputType | null
    _max: OptionalSide1MaxAggregateOutputType | null
  }

  export type OptionalSide1AvgAggregateOutputType = {
    int: number | null
    optionalInt: number | null
    float: number | null
    optionalFloat: number | null
  }

  export type OptionalSide1SumAggregateOutputType = {
    int: number | null
    optionalInt: number | null
    float: number | null
    optionalFloat: number | null
  }

  export type OptionalSide1MinAggregateOutputType = {
    id: string | null
    optionalSide2Id: string | null
    int: number | null
    optionalInt: number | null
    float: number | null
    optionalFloat: number | null
    string: string | null
    optionalString: string | null
    enum: ABeautifulEnum | null
    optionalEnum: ABeautifulEnum | null
    boolean: boolean | null
    optionalBoolean: boolean | null
  }

  export type OptionalSide1MaxAggregateOutputType = {
    id: string | null
    optionalSide2Id: string | null
    int: number | null
    optionalInt: number | null
    float: number | null
    optionalFloat: number | null
    string: string | null
    optionalString: string | null
    enum: ABeautifulEnum | null
    optionalEnum: ABeautifulEnum | null
    boolean: boolean | null
    optionalBoolean: boolean | null
  }

  export type OptionalSide1CountAggregateOutputType = {
    id: number
    optionalSide2Id: number
    int: number
    optionalInt: number
    float: number
    optionalFloat: number
    string: number
    optionalString: number
    json: number
    optionalJson: number
    enum: number
    optionalEnum: number
    boolean: number
    optionalBoolean: number
    _all: number
  }


  export type OptionalSide1AvgAggregateInputType = {
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
  }

  export type OptionalSide1SumAggregateInputType = {
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
  }

  export type OptionalSide1MinAggregateInputType = {
    id?: true | undefined
    optionalSide2Id?: true | undefined
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
    string?: true | undefined
    optionalString?: true | undefined
    enum?: true | undefined
    optionalEnum?: true | undefined
    boolean?: true | undefined
    optionalBoolean?: true | undefined
  }

  export type OptionalSide1MaxAggregateInputType = {
    id?: true | undefined
    optionalSide2Id?: true | undefined
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
    string?: true | undefined
    optionalString?: true | undefined
    enum?: true | undefined
    optionalEnum?: true | undefined
    boolean?: true | undefined
    optionalBoolean?: true | undefined
  }

  export type OptionalSide1CountAggregateInputType = {
    id?: true | undefined
    optionalSide2Id?: true | undefined
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
    string?: true | undefined
    optionalString?: true | undefined
    json?: true | undefined
    optionalJson?: true | undefined
    enum?: true | undefined
    optionalEnum?: true | undefined
    boolean?: true | undefined
    optionalBoolean?: true | undefined
    _all?: true | undefined
  }

  export type OptionalSide1AggregateArgs = {
    /**
     * Filter which OptionalSide1 to aggregate.
     */
    where?: OptionalSide1WhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OptionalSide1s to fetch.
     */
    orderBy?: Enumerable<OptionalSide1OrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OptionalSide1WhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` OptionalSide1s from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` OptionalSide1s.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OptionalSide1s
    **/
    _count?: true | OptionalSide1CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OptionalSide1AvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OptionalSide1SumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OptionalSide1MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OptionalSide1MaxAggregateInputType
  }

  export type GetOptionalSide1AggregateType<T extends OptionalSide1AggregateArgs> = {
        [P in keyof T & keyof AggregateOptionalSide1]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOptionalSide1[P]>
      : GetScalarType<T[P], AggregateOptionalSide1[P]>
  }




  export type OptionalSide1GroupByArgs = {
    where?: OptionalSide1WhereInput | undefined
    orderBy?: Enumerable<OptionalSide1OrderByWithAggregationInput> | undefined
    by: OptionalSide1ScalarFieldEnum[]
    having?: OptionalSide1ScalarWhereWithAggregatesInput | undefined
    take?: number | undefined
    skip?: number | undefined
    _count?: OptionalSide1CountAggregateInputType | true
    _avg?: OptionalSide1AvgAggregateInputType
    _sum?: OptionalSide1SumAggregateInputType
    _min?: OptionalSide1MinAggregateInputType
    _max?: OptionalSide1MaxAggregateInputType
  }


  export type OptionalSide1GroupByOutputType = {
    id: string
    optionalSide2Id: string | null
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
    string: string
    optionalString: string | null
    json: JsonValue
    optionalJson: JsonValue | null
    enum: ABeautifulEnum
    optionalEnum: ABeautifulEnum | null
    boolean: boolean
    optionalBoolean: boolean | null
    _count: OptionalSide1CountAggregateOutputType | null
    _avg: OptionalSide1AvgAggregateOutputType | null
    _sum: OptionalSide1SumAggregateOutputType | null
    _min: OptionalSide1MinAggregateOutputType | null
    _max: OptionalSide1MaxAggregateOutputType | null
  }

  type GetOptionalSide1GroupByPayload<T extends OptionalSide1GroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<OptionalSide1GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OptionalSide1GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OptionalSide1GroupByOutputType[P]>
            : GetScalarType<T[P], OptionalSide1GroupByOutputType[P]>
        }
      >
    >


  export type OptionalSide1Select = {
    id?: boolean | undefined
    optionalSide2Id?: boolean | undefined
    int?: boolean | undefined
    optionalInt?: boolean | undefined
    float?: boolean | undefined
    optionalFloat?: boolean | undefined
    string?: boolean | undefined
    optionalString?: boolean | undefined
    json?: boolean | undefined
    optionalJson?: boolean | undefined
    enum?: boolean | undefined
    optionalEnum?: boolean | undefined
    boolean?: boolean | undefined
    optionalBoolean?: boolean | undefined
    opti?: boolean | OptionalSide2Args | undefined
  }


  export type OptionalSide1Include = {
    opti?: boolean | OptionalSide2Args | undefined
  }

  export type OptionalSide1GetPayload<S extends boolean | null | undefined | OptionalSide1Args> =
    S extends { select: any, include: any } ? 'Please either choose \`select\` or \`include\`' :
    S extends true ? OptionalSide1 :
    S extends undefined ? never :
    S extends { include: any } & (OptionalSide1Args | OptionalSide1FindManyArgs)
    ? OptionalSide1  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'opti' ? OptionalSide2GetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (OptionalSide1Args | OptionalSide1FindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'opti' ? OptionalSide2GetPayload<S['select'][P]> | null :  P extends keyof OptionalSide1 ? OptionalSide1[P] : never
  } 
      : OptionalSide1


  type OptionalSide1CountArgs = 
    Omit<OptionalSide1FindManyArgs, 'select' | 'include'> & {
      select?: OptionalSide1CountAggregateInputType | true
    }

  export interface OptionalSide1Delegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one OptionalSide1 that matches the filter.
     * @param {OptionalSide1FindUniqueArgs} args - Arguments to find a OptionalSide1
     * @example
     * // Get one OptionalSide1
     * const optionalSide1 = await prisma.optionalSide1.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OptionalSide1FindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OptionalSide1FindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'OptionalSide1'> extends True ? Prisma__OptionalSide1Client<OptionalSide1GetPayload<T>> : Prisma__OptionalSide1Client<OptionalSide1GetPayload<T> | null, null>

    /**
     * Find one OptionalSide1 that matches the filter or throw an error  with \`error.code='P2025'\` 
     *     if no matches were found.
     * @param {OptionalSide1FindUniqueOrThrowArgs} args - Arguments to find a OptionalSide1
     * @example
     * // Get one OptionalSide1
     * const optionalSide1 = await prisma.optionalSide1.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OptionalSide1FindUniqueOrThrowArgs>(
      args?: SelectSubset<T, OptionalSide1FindUniqueOrThrowArgs>
    ): Prisma__OptionalSide1Client<OptionalSide1GetPayload<T>>

    /**
     * Find the first OptionalSide1 that matches the filter.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionalSide1FindFirstArgs} args - Arguments to find a OptionalSide1
     * @example
     * // Get one OptionalSide1
     * const optionalSide1 = await prisma.optionalSide1.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OptionalSide1FindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OptionalSide1FindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'OptionalSide1'> extends True ? Prisma__OptionalSide1Client<OptionalSide1GetPayload<T>> : Prisma__OptionalSide1Client<OptionalSide1GetPayload<T> | null, null>

    /**
     * Find the first OptionalSide1 that matches the filter or
     * throw \`NotFoundError\` if no matches were found.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionalSide1FindFirstOrThrowArgs} args - Arguments to find a OptionalSide1
     * @example
     * // Get one OptionalSide1
     * const optionalSide1 = await prisma.optionalSide1.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OptionalSide1FindFirstOrThrowArgs>(
      args?: SelectSubset<T, OptionalSide1FindFirstOrThrowArgs>
    ): Prisma__OptionalSide1Client<OptionalSide1GetPayload<T>>

    /**
     * Find zero or more OptionalSide1s that matches the filter.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionalSide1FindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OptionalSide1s
     * const optionalSide1s = await prisma.optionalSide1.findMany()
     * 
     * // Get first 10 OptionalSide1s
     * const optionalSide1s = await prisma.optionalSide1.findMany({ take: 10 })
     * 
     * // Only select the \`id\`
     * const optionalSide1WithIdOnly = await prisma.optionalSide1.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OptionalSide1FindManyArgs>(
      args?: SelectSubset<T, OptionalSide1FindManyArgs>
    ): Prisma.PrismaPromise<Array<OptionalSide1GetPayload<T>>>

    /**
     * Create a OptionalSide1.
     * @param {OptionalSide1CreateArgs} args - Arguments to create a OptionalSide1.
     * @example
     * // Create one OptionalSide1
     * const OptionalSide1 = await prisma.optionalSide1.create({
     *   data: {
     *     // ... data to create a OptionalSide1
     *   }
     * })
     * 
    **/
    create<T extends OptionalSide1CreateArgs>(
      args: SelectSubset<T, OptionalSide1CreateArgs>
    ): Prisma__OptionalSide1Client<OptionalSide1GetPayload<T>>

    /**
     * Create many OptionalSide1s.
     *     @param {OptionalSide1CreateManyArgs} args - Arguments to create many OptionalSide1s.
     *     @example
     *     // Create many OptionalSide1s
     *     const optionalSide1 = await prisma.optionalSide1.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OptionalSide1CreateManyArgs>(
      args?: SelectSubset<T, OptionalSide1CreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a OptionalSide1.
     * @param {OptionalSide1DeleteArgs} args - Arguments to delete one OptionalSide1.
     * @example
     * // Delete one OptionalSide1
     * const OptionalSide1 = await prisma.optionalSide1.delete({
     *   where: {
     *     // ... filter to delete one OptionalSide1
     *   }
     * })
     * 
    **/
    delete<T extends OptionalSide1DeleteArgs>(
      args: SelectSubset<T, OptionalSide1DeleteArgs>
    ): Prisma__OptionalSide1Client<OptionalSide1GetPayload<T>>

    /**
     * Update one OptionalSide1.
     * @param {OptionalSide1UpdateArgs} args - Arguments to update one OptionalSide1.
     * @example
     * // Update one OptionalSide1
     * const optionalSide1 = await prisma.optionalSide1.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OptionalSide1UpdateArgs>(
      args: SelectSubset<T, OptionalSide1UpdateArgs>
    ): Prisma__OptionalSide1Client<OptionalSide1GetPayload<T>>

    /**
     * Delete zero or more OptionalSide1s.
     * @param {OptionalSide1DeleteManyArgs} args - Arguments to filter OptionalSide1s to delete.
     * @example
     * // Delete a few OptionalSide1s
     * const { count } = await prisma.optionalSide1.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OptionalSide1DeleteManyArgs>(
      args?: SelectSubset<T, OptionalSide1DeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OptionalSide1s.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionalSide1UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OptionalSide1s
     * const optionalSide1 = await prisma.optionalSide1.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OptionalSide1UpdateManyArgs>(
      args: SelectSubset<T, OptionalSide1UpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OptionalSide1.
     * @param {OptionalSide1UpsertArgs} args - Arguments to update or create a OptionalSide1.
     * @example
     * // Update or create a OptionalSide1
     * const optionalSide1 = await prisma.optionalSide1.upsert({
     *   create: {
     *     // ... data to create a OptionalSide1
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OptionalSide1 we want to update
     *   }
     * })
    **/
    upsert<T extends OptionalSide1UpsertArgs>(
      args: SelectSubset<T, OptionalSide1UpsertArgs>
    ): Prisma__OptionalSide1Client<OptionalSide1GetPayload<T>>

    /**
     * Find zero or more OptionalSide1s that matches the filter.
     * @param {OptionalSide1FindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const optionalSide1 = await prisma.optionalSide1.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: OptionalSide1FindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a OptionalSide1.
     * @param {OptionalSide1AggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const optionalSide1 = await prisma.optionalSide1.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: OptionalSide1AggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of OptionalSide1s.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionalSide1CountArgs} args - Arguments to filter OptionalSide1s to count.
     * @example
     * // Count the number of OptionalSide1s
     * const count = await prisma.optionalSide1.count({
     *   where: {
     *     // ... the filter for the OptionalSide1s we want to count
     *   }
     * })
    **/
    count<T extends OptionalSide1CountArgs>(
      args?: Subset<T, OptionalSide1CountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OptionalSide1CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OptionalSide1.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionalSide1AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OptionalSide1AggregateArgs>(args: Subset<T, OptionalSide1AggregateArgs>): Prisma.PrismaPromise<GetOptionalSide1AggregateType<T>>

    /**
     * Group by OptionalSide1.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionalSide1GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OptionalSide1GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OptionalSide1GroupByArgs['orderBy'] }
        : { orderBy?: OptionalSide1GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? \`Error: "by" must not be empty.\`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? \`Error: Field "\${P}" used in "having" needs to be provided in "by".\`
            : [
                Error,
                'Field ',
                P,
                \` in "having" needs to be provided in "by"\`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
        }[OrderFields]
    >(args: SubsetIntersection<T, OptionalSide1GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOptionalSide1GroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for OptionalSide1.
   * Why is this prefixed with \`Prisma__\`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OptionalSide1Client<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    opti<T extends OptionalSide2Args= {}>(args?: Subset<T, OptionalSide2Args>): Prisma__OptionalSide2Client<OptionalSide2GetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * OptionalSide1 base type for findUnique actions
   */
  export type OptionalSide1FindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the OptionalSide1
     */
    select?: OptionalSide1Select | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OptionalSide1Include | null | undefined
    /**
     * Filter, which OptionalSide1 to fetch.
     */
    where: OptionalSide1WhereUniqueInput
  }

  /**
   * OptionalSide1 findUnique
   */
  export interface OptionalSide1FindUniqueArgs extends OptionalSide1FindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use \`findUniqueOrThrow\` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * OptionalSide1 findUniqueOrThrow
   */
  export type OptionalSide1FindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the OptionalSide1
     */
    select?: OptionalSide1Select | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OptionalSide1Include | null | undefined
    /**
     * Filter, which OptionalSide1 to fetch.
     */
    where: OptionalSide1WhereUniqueInput
  }


  /**
   * OptionalSide1 base type for findFirst actions
   */
  export type OptionalSide1FindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the OptionalSide1
     */
    select?: OptionalSide1Select | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OptionalSide1Include | null | undefined
    /**
     * Filter, which OptionalSide1 to fetch.
     */
    where?: OptionalSide1WhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OptionalSide1s to fetch.
     */
    orderBy?: Enumerable<OptionalSide1OrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OptionalSide1s.
     */
    cursor?: OptionalSide1WhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` OptionalSide1s from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` OptionalSide1s.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OptionalSide1s.
     */
    distinct?: Enumerable<OptionalSide1ScalarFieldEnum> | undefined
  }

  /**
   * OptionalSide1 findFirst
   */
  export interface OptionalSide1FindFirstArgs extends OptionalSide1FindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use \`findFirstOrThrow\` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * OptionalSide1 findFirstOrThrow
   */
  export type OptionalSide1FindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the OptionalSide1
     */
    select?: OptionalSide1Select | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OptionalSide1Include | null | undefined
    /**
     * Filter, which OptionalSide1 to fetch.
     */
    where?: OptionalSide1WhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OptionalSide1s to fetch.
     */
    orderBy?: Enumerable<OptionalSide1OrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OptionalSide1s.
     */
    cursor?: OptionalSide1WhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` OptionalSide1s from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` OptionalSide1s.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OptionalSide1s.
     */
    distinct?: Enumerable<OptionalSide1ScalarFieldEnum> | undefined
  }


  /**
   * OptionalSide1 findMany
   */
  export type OptionalSide1FindManyArgs = {
    /**
     * Select specific fields to fetch from the OptionalSide1
     */
    select?: OptionalSide1Select | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OptionalSide1Include | null | undefined
    /**
     * Filter, which OptionalSide1s to fetch.
     */
    where?: OptionalSide1WhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OptionalSide1s to fetch.
     */
    orderBy?: Enumerable<OptionalSide1OrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OptionalSide1s.
     */
    cursor?: OptionalSide1WhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` OptionalSide1s from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` OptionalSide1s.
     */
    skip?: number | undefined
    distinct?: Enumerable<OptionalSide1ScalarFieldEnum> | undefined
  }


  /**
   * OptionalSide1 create
   */
  export type OptionalSide1CreateArgs = {
    /**
     * Select specific fields to fetch from the OptionalSide1
     */
    select?: OptionalSide1Select | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OptionalSide1Include | null | undefined
    /**
     * The data needed to create a OptionalSide1.
     */
    data: XOR<OptionalSide1CreateInput, OptionalSide1UncheckedCreateInput>
  }


  /**
   * OptionalSide1 createMany
   */
  export type OptionalSide1CreateManyArgs = {
    /**
     * The data used to create many OptionalSide1s.
     */
    data: Enumerable<OptionalSide1CreateManyInput>
  }


  /**
   * OptionalSide1 update
   */
  export type OptionalSide1UpdateArgs = {
    /**
     * Select specific fields to fetch from the OptionalSide1
     */
    select?: OptionalSide1Select | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OptionalSide1Include | null | undefined
    /**
     * The data needed to update a OptionalSide1.
     */
    data: XOR<OptionalSide1UpdateInput, OptionalSide1UncheckedUpdateInput>
    /**
     * Choose, which OptionalSide1 to update.
     */
    where: OptionalSide1WhereUniqueInput
  }


  /**
   * OptionalSide1 updateMany
   */
  export type OptionalSide1UpdateManyArgs = {
    /**
     * The data used to update OptionalSide1s.
     */
    data: XOR<OptionalSide1UpdateManyMutationInput, OptionalSide1UncheckedUpdateManyInput>
    /**
     * Filter which OptionalSide1s to update
     */
    where?: OptionalSide1WhereInput | undefined
  }


  /**
   * OptionalSide1 upsert
   */
  export type OptionalSide1UpsertArgs = {
    /**
     * Select specific fields to fetch from the OptionalSide1
     */
    select?: OptionalSide1Select | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OptionalSide1Include | null | undefined
    /**
     * The filter to search for the OptionalSide1 to update in case it exists.
     */
    where: OptionalSide1WhereUniqueInput
    /**
     * In case the OptionalSide1 found by the \`where\` argument doesn't exist, create a new OptionalSide1 with this data.
     */
    create: XOR<OptionalSide1CreateInput, OptionalSide1UncheckedCreateInput>
    /**
     * In case the OptionalSide1 was found with the provided \`where\` argument, update it with this data.
     */
    update: XOR<OptionalSide1UpdateInput, OptionalSide1UncheckedUpdateInput>
  }


  /**
   * OptionalSide1 delete
   */
  export type OptionalSide1DeleteArgs = {
    /**
     * Select specific fields to fetch from the OptionalSide1
     */
    select?: OptionalSide1Select | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OptionalSide1Include | null | undefined
    /**
     * Filter which OptionalSide1 to delete.
     */
    where: OptionalSide1WhereUniqueInput
  }


  /**
   * OptionalSide1 deleteMany
   */
  export type OptionalSide1DeleteManyArgs = {
    /**
     * Filter which OptionalSide1s to delete
     */
    where?: OptionalSide1WhereInput | undefined
  }


  /**
   * OptionalSide1 findRaw
   */
  export type OptionalSide1FindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. \${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue | undefined
    /**
     * Additional options to pass to the \`find\` command \${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue | undefined
  }


  /**
   * OptionalSide1 aggregateRaw
   */
  export type OptionalSide1AggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. \${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[] | undefined
    /**
     * Additional options to pass to the \`aggregate\` command \${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue | undefined
  }


  /**
   * OptionalSide1 without action
   */
  export type OptionalSide1Args = {
    /**
     * Select specific fields to fetch from the OptionalSide1
     */
    select?: OptionalSide1Select | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OptionalSide1Include | null | undefined
  }



  /**
   * Model OptionalSide2
   */


  export type AggregateOptionalSide2 = {
    _count: OptionalSide2CountAggregateOutputType | null
    _avg: OptionalSide2AvgAggregateOutputType | null
    _sum: OptionalSide2SumAggregateOutputType | null
    _min: OptionalSide2MinAggregateOutputType | null
    _max: OptionalSide2MaxAggregateOutputType | null
  }

  export type OptionalSide2AvgAggregateOutputType = {
    int: number | null
    optionalInt: number | null
    float: number | null
    optionalFloat: number | null
  }

  export type OptionalSide2SumAggregateOutputType = {
    int: number | null
    optionalInt: number | null
    float: number | null
    optionalFloat: number | null
  }

  export type OptionalSide2MinAggregateOutputType = {
    id: string | null
    int: number | null
    optionalInt: number | null
    float: number | null
    optionalFloat: number | null
    string: string | null
    optionalString: string | null
    enum: ABeautifulEnum | null
    optionalEnum: ABeautifulEnum | null
    boolean: boolean | null
    optionalBoolean: boolean | null
  }

  export type OptionalSide2MaxAggregateOutputType = {
    id: string | null
    int: number | null
    optionalInt: number | null
    float: number | null
    optionalFloat: number | null
    string: string | null
    optionalString: string | null
    enum: ABeautifulEnum | null
    optionalEnum: ABeautifulEnum | null
    boolean: boolean | null
    optionalBoolean: boolean | null
  }

  export type OptionalSide2CountAggregateOutputType = {
    id: number
    int: number
    optionalInt: number
    float: number
    optionalFloat: number
    string: number
    optionalString: number
    json: number
    optionalJson: number
    enum: number
    optionalEnum: number
    boolean: number
    optionalBoolean: number
    _all: number
  }


  export type OptionalSide2AvgAggregateInputType = {
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
  }

  export type OptionalSide2SumAggregateInputType = {
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
  }

  export type OptionalSide2MinAggregateInputType = {
    id?: true | undefined
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
    string?: true | undefined
    optionalString?: true | undefined
    enum?: true | undefined
    optionalEnum?: true | undefined
    boolean?: true | undefined
    optionalBoolean?: true | undefined
  }

  export type OptionalSide2MaxAggregateInputType = {
    id?: true | undefined
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
    string?: true | undefined
    optionalString?: true | undefined
    enum?: true | undefined
    optionalEnum?: true | undefined
    boolean?: true | undefined
    optionalBoolean?: true | undefined
  }

  export type OptionalSide2CountAggregateInputType = {
    id?: true | undefined
    int?: true | undefined
    optionalInt?: true | undefined
    float?: true | undefined
    optionalFloat?: true | undefined
    string?: true | undefined
    optionalString?: true | undefined
    json?: true | undefined
    optionalJson?: true | undefined
    enum?: true | undefined
    optionalEnum?: true | undefined
    boolean?: true | undefined
    optionalBoolean?: true | undefined
    _all?: true | undefined
  }

  export type OptionalSide2AggregateArgs = {
    /**
     * Filter which OptionalSide2 to aggregate.
     */
    where?: OptionalSide2WhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OptionalSide2s to fetch.
     */
    orderBy?: Enumerable<OptionalSide2OrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OptionalSide2WhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` OptionalSide2s from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` OptionalSide2s.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OptionalSide2s
    **/
    _count?: true | OptionalSide2CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OptionalSide2AvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OptionalSide2SumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OptionalSide2MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OptionalSide2MaxAggregateInputType
  }

  export type GetOptionalSide2AggregateType<T extends OptionalSide2AggregateArgs> = {
        [P in keyof T & keyof AggregateOptionalSide2]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOptionalSide2[P]>
      : GetScalarType<T[P], AggregateOptionalSide2[P]>
  }




  export type OptionalSide2GroupByArgs = {
    where?: OptionalSide2WhereInput | undefined
    orderBy?: Enumerable<OptionalSide2OrderByWithAggregationInput> | undefined
    by: OptionalSide2ScalarFieldEnum[]
    having?: OptionalSide2ScalarWhereWithAggregatesInput | undefined
    take?: number | undefined
    skip?: number | undefined
    _count?: OptionalSide2CountAggregateInputType | true
    _avg?: OptionalSide2AvgAggregateInputType
    _sum?: OptionalSide2SumAggregateInputType
    _min?: OptionalSide2MinAggregateInputType
    _max?: OptionalSide2MaxAggregateInputType
  }


  export type OptionalSide2GroupByOutputType = {
    id: string
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
    string: string
    optionalString: string | null
    json: JsonValue
    optionalJson: JsonValue | null
    enum: ABeautifulEnum
    optionalEnum: ABeautifulEnum | null
    boolean: boolean
    optionalBoolean: boolean | null
    _count: OptionalSide2CountAggregateOutputType | null
    _avg: OptionalSide2AvgAggregateOutputType | null
    _sum: OptionalSide2SumAggregateOutputType | null
    _min: OptionalSide2MinAggregateOutputType | null
    _max: OptionalSide2MaxAggregateOutputType | null
  }

  type GetOptionalSide2GroupByPayload<T extends OptionalSide2GroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<OptionalSide2GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OptionalSide2GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OptionalSide2GroupByOutputType[P]>
            : GetScalarType<T[P], OptionalSide2GroupByOutputType[P]>
        }
      >
    >


  export type OptionalSide2Select = {
    id?: boolean | undefined
    int?: boolean | undefined
    optionalInt?: boolean | undefined
    float?: boolean | undefined
    optionalFloat?: boolean | undefined
    string?: boolean | undefined
    optionalString?: boolean | undefined
    json?: boolean | undefined
    optionalJson?: boolean | undefined
    enum?: boolean | undefined
    optionalEnum?: boolean | undefined
    boolean?: boolean | undefined
    optionalBoolean?: boolean | undefined
    opti?: boolean | OptionalSide1Args | undefined
  }


  export type OptionalSide2Include = {
    opti?: boolean | OptionalSide1Args | undefined
  }

  export type OptionalSide2GetPayload<S extends boolean | null | undefined | OptionalSide2Args> =
    S extends { select: any, include: any } ? 'Please either choose \`select\` or \`include\`' :
    S extends true ? OptionalSide2 :
    S extends undefined ? never :
    S extends { include: any } & (OptionalSide2Args | OptionalSide2FindManyArgs)
    ? OptionalSide2  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'opti' ? OptionalSide1GetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (OptionalSide2Args | OptionalSide2FindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'opti' ? OptionalSide1GetPayload<S['select'][P]> | null :  P extends keyof OptionalSide2 ? OptionalSide2[P] : never
  } 
      : OptionalSide2


  type OptionalSide2CountArgs = 
    Omit<OptionalSide2FindManyArgs, 'select' | 'include'> & {
      select?: OptionalSide2CountAggregateInputType | true
    }

  export interface OptionalSide2Delegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one OptionalSide2 that matches the filter.
     * @param {OptionalSide2FindUniqueArgs} args - Arguments to find a OptionalSide2
     * @example
     * // Get one OptionalSide2
     * const optionalSide2 = await prisma.optionalSide2.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OptionalSide2FindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OptionalSide2FindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'OptionalSide2'> extends True ? Prisma__OptionalSide2Client<OptionalSide2GetPayload<T>> : Prisma__OptionalSide2Client<OptionalSide2GetPayload<T> | null, null>

    /**
     * Find one OptionalSide2 that matches the filter or throw an error  with \`error.code='P2025'\` 
     *     if no matches were found.
     * @param {OptionalSide2FindUniqueOrThrowArgs} args - Arguments to find a OptionalSide2
     * @example
     * // Get one OptionalSide2
     * const optionalSide2 = await prisma.optionalSide2.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OptionalSide2FindUniqueOrThrowArgs>(
      args?: SelectSubset<T, OptionalSide2FindUniqueOrThrowArgs>
    ): Prisma__OptionalSide2Client<OptionalSide2GetPayload<T>>

    /**
     * Find the first OptionalSide2 that matches the filter.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionalSide2FindFirstArgs} args - Arguments to find a OptionalSide2
     * @example
     * // Get one OptionalSide2
     * const optionalSide2 = await prisma.optionalSide2.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OptionalSide2FindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OptionalSide2FindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'OptionalSide2'> extends True ? Prisma__OptionalSide2Client<OptionalSide2GetPayload<T>> : Prisma__OptionalSide2Client<OptionalSide2GetPayload<T> | null, null>

    /**
     * Find the first OptionalSide2 that matches the filter or
     * throw \`NotFoundError\` if no matches were found.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionalSide2FindFirstOrThrowArgs} args - Arguments to find a OptionalSide2
     * @example
     * // Get one OptionalSide2
     * const optionalSide2 = await prisma.optionalSide2.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OptionalSide2FindFirstOrThrowArgs>(
      args?: SelectSubset<T, OptionalSide2FindFirstOrThrowArgs>
    ): Prisma__OptionalSide2Client<OptionalSide2GetPayload<T>>

    /**
     * Find zero or more OptionalSide2s that matches the filter.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionalSide2FindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OptionalSide2s
     * const optionalSide2s = await prisma.optionalSide2.findMany()
     * 
     * // Get first 10 OptionalSide2s
     * const optionalSide2s = await prisma.optionalSide2.findMany({ take: 10 })
     * 
     * // Only select the \`id\`
     * const optionalSide2WithIdOnly = await prisma.optionalSide2.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OptionalSide2FindManyArgs>(
      args?: SelectSubset<T, OptionalSide2FindManyArgs>
    ): Prisma.PrismaPromise<Array<OptionalSide2GetPayload<T>>>

    /**
     * Create a OptionalSide2.
     * @param {OptionalSide2CreateArgs} args - Arguments to create a OptionalSide2.
     * @example
     * // Create one OptionalSide2
     * const OptionalSide2 = await prisma.optionalSide2.create({
     *   data: {
     *     // ... data to create a OptionalSide2
     *   }
     * })
     * 
    **/
    create<T extends OptionalSide2CreateArgs>(
      args: SelectSubset<T, OptionalSide2CreateArgs>
    ): Prisma__OptionalSide2Client<OptionalSide2GetPayload<T>>

    /**
     * Create many OptionalSide2s.
     *     @param {OptionalSide2CreateManyArgs} args - Arguments to create many OptionalSide2s.
     *     @example
     *     // Create many OptionalSide2s
     *     const optionalSide2 = await prisma.optionalSide2.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OptionalSide2CreateManyArgs>(
      args?: SelectSubset<T, OptionalSide2CreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a OptionalSide2.
     * @param {OptionalSide2DeleteArgs} args - Arguments to delete one OptionalSide2.
     * @example
     * // Delete one OptionalSide2
     * const OptionalSide2 = await prisma.optionalSide2.delete({
     *   where: {
     *     // ... filter to delete one OptionalSide2
     *   }
     * })
     * 
    **/
    delete<T extends OptionalSide2DeleteArgs>(
      args: SelectSubset<T, OptionalSide2DeleteArgs>
    ): Prisma__OptionalSide2Client<OptionalSide2GetPayload<T>>

    /**
     * Update one OptionalSide2.
     * @param {OptionalSide2UpdateArgs} args - Arguments to update one OptionalSide2.
     * @example
     * // Update one OptionalSide2
     * const optionalSide2 = await prisma.optionalSide2.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OptionalSide2UpdateArgs>(
      args: SelectSubset<T, OptionalSide2UpdateArgs>
    ): Prisma__OptionalSide2Client<OptionalSide2GetPayload<T>>

    /**
     * Delete zero or more OptionalSide2s.
     * @param {OptionalSide2DeleteManyArgs} args - Arguments to filter OptionalSide2s to delete.
     * @example
     * // Delete a few OptionalSide2s
     * const { count } = await prisma.optionalSide2.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OptionalSide2DeleteManyArgs>(
      args?: SelectSubset<T, OptionalSide2DeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OptionalSide2s.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionalSide2UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OptionalSide2s
     * const optionalSide2 = await prisma.optionalSide2.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OptionalSide2UpdateManyArgs>(
      args: SelectSubset<T, OptionalSide2UpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OptionalSide2.
     * @param {OptionalSide2UpsertArgs} args - Arguments to update or create a OptionalSide2.
     * @example
     * // Update or create a OptionalSide2
     * const optionalSide2 = await prisma.optionalSide2.upsert({
     *   create: {
     *     // ... data to create a OptionalSide2
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OptionalSide2 we want to update
     *   }
     * })
    **/
    upsert<T extends OptionalSide2UpsertArgs>(
      args: SelectSubset<T, OptionalSide2UpsertArgs>
    ): Prisma__OptionalSide2Client<OptionalSide2GetPayload<T>>

    /**
     * Find zero or more OptionalSide2s that matches the filter.
     * @param {OptionalSide2FindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const optionalSide2 = await prisma.optionalSide2.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: OptionalSide2FindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a OptionalSide2.
     * @param {OptionalSide2AggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const optionalSide2 = await prisma.optionalSide2.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: OptionalSide2AggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of OptionalSide2s.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionalSide2CountArgs} args - Arguments to filter OptionalSide2s to count.
     * @example
     * // Count the number of OptionalSide2s
     * const count = await prisma.optionalSide2.count({
     *   where: {
     *     // ... the filter for the OptionalSide2s we want to count
     *   }
     * })
    **/
    count<T extends OptionalSide2CountArgs>(
      args?: Subset<T, OptionalSide2CountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OptionalSide2CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OptionalSide2.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionalSide2AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OptionalSide2AggregateArgs>(args: Subset<T, OptionalSide2AggregateArgs>): Prisma.PrismaPromise<GetOptionalSide2AggregateType<T>>

    /**
     * Group by OptionalSide2.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionalSide2GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OptionalSide2GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OptionalSide2GroupByArgs['orderBy'] }
        : { orderBy?: OptionalSide2GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? \`Error: "by" must not be empty.\`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? \`Error: Field "\${P}" used in "having" needs to be provided in "by".\`
            : [
                Error,
                'Field ',
                P,
                \` in "having" needs to be provided in "by"\`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
        }[OrderFields]
    >(args: SubsetIntersection<T, OptionalSide2GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOptionalSide2GroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for OptionalSide2.
   * Why is this prefixed with \`Prisma__\`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OptionalSide2Client<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    opti<T extends OptionalSide1Args= {}>(args?: Subset<T, OptionalSide1Args>): Prisma__OptionalSide1Client<OptionalSide1GetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * OptionalSide2 base type for findUnique actions
   */
  export type OptionalSide2FindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the OptionalSide2
     */
    select?: OptionalSide2Select | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OptionalSide2Include | null | undefined
    /**
     * Filter, which OptionalSide2 to fetch.
     */
    where: OptionalSide2WhereUniqueInput
  }

  /**
   * OptionalSide2 findUnique
   */
  export interface OptionalSide2FindUniqueArgs extends OptionalSide2FindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use \`findUniqueOrThrow\` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * OptionalSide2 findUniqueOrThrow
   */
  export type OptionalSide2FindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the OptionalSide2
     */
    select?: OptionalSide2Select | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OptionalSide2Include | null | undefined
    /**
     * Filter, which OptionalSide2 to fetch.
     */
    where: OptionalSide2WhereUniqueInput
  }


  /**
   * OptionalSide2 base type for findFirst actions
   */
  export type OptionalSide2FindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the OptionalSide2
     */
    select?: OptionalSide2Select | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OptionalSide2Include | null | undefined
    /**
     * Filter, which OptionalSide2 to fetch.
     */
    where?: OptionalSide2WhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OptionalSide2s to fetch.
     */
    orderBy?: Enumerable<OptionalSide2OrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OptionalSide2s.
     */
    cursor?: OptionalSide2WhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` OptionalSide2s from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` OptionalSide2s.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OptionalSide2s.
     */
    distinct?: Enumerable<OptionalSide2ScalarFieldEnum> | undefined
  }

  /**
   * OptionalSide2 findFirst
   */
  export interface OptionalSide2FindFirstArgs extends OptionalSide2FindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use \`findFirstOrThrow\` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * OptionalSide2 findFirstOrThrow
   */
  export type OptionalSide2FindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the OptionalSide2
     */
    select?: OptionalSide2Select | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OptionalSide2Include | null | undefined
    /**
     * Filter, which OptionalSide2 to fetch.
     */
    where?: OptionalSide2WhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OptionalSide2s to fetch.
     */
    orderBy?: Enumerable<OptionalSide2OrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OptionalSide2s.
     */
    cursor?: OptionalSide2WhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` OptionalSide2s from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` OptionalSide2s.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OptionalSide2s.
     */
    distinct?: Enumerable<OptionalSide2ScalarFieldEnum> | undefined
  }


  /**
   * OptionalSide2 findMany
   */
  export type OptionalSide2FindManyArgs = {
    /**
     * Select specific fields to fetch from the OptionalSide2
     */
    select?: OptionalSide2Select | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OptionalSide2Include | null | undefined
    /**
     * Filter, which OptionalSide2s to fetch.
     */
    where?: OptionalSide2WhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OptionalSide2s to fetch.
     */
    orderBy?: Enumerable<OptionalSide2OrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OptionalSide2s.
     */
    cursor?: OptionalSide2WhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` OptionalSide2s from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` OptionalSide2s.
     */
    skip?: number | undefined
    distinct?: Enumerable<OptionalSide2ScalarFieldEnum> | undefined
  }


  /**
   * OptionalSide2 create
   */
  export type OptionalSide2CreateArgs = {
    /**
     * Select specific fields to fetch from the OptionalSide2
     */
    select?: OptionalSide2Select | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OptionalSide2Include | null | undefined
    /**
     * The data needed to create a OptionalSide2.
     */
    data: XOR<OptionalSide2CreateInput, OptionalSide2UncheckedCreateInput>
  }


  /**
   * OptionalSide2 createMany
   */
  export type OptionalSide2CreateManyArgs = {
    /**
     * The data used to create many OptionalSide2s.
     */
    data: Enumerable<OptionalSide2CreateManyInput>
  }


  /**
   * OptionalSide2 update
   */
  export type OptionalSide2UpdateArgs = {
    /**
     * Select specific fields to fetch from the OptionalSide2
     */
    select?: OptionalSide2Select | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OptionalSide2Include | null | undefined
    /**
     * The data needed to update a OptionalSide2.
     */
    data: XOR<OptionalSide2UpdateInput, OptionalSide2UncheckedUpdateInput>
    /**
     * Choose, which OptionalSide2 to update.
     */
    where: OptionalSide2WhereUniqueInput
  }


  /**
   * OptionalSide2 updateMany
   */
  export type OptionalSide2UpdateManyArgs = {
    /**
     * The data used to update OptionalSide2s.
     */
    data: XOR<OptionalSide2UpdateManyMutationInput, OptionalSide2UncheckedUpdateManyInput>
    /**
     * Filter which OptionalSide2s to update
     */
    where?: OptionalSide2WhereInput | undefined
  }


  /**
   * OptionalSide2 upsert
   */
  export type OptionalSide2UpsertArgs = {
    /**
     * Select specific fields to fetch from the OptionalSide2
     */
    select?: OptionalSide2Select | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OptionalSide2Include | null | undefined
    /**
     * The filter to search for the OptionalSide2 to update in case it exists.
     */
    where: OptionalSide2WhereUniqueInput
    /**
     * In case the OptionalSide2 found by the \`where\` argument doesn't exist, create a new OptionalSide2 with this data.
     */
    create: XOR<OptionalSide2CreateInput, OptionalSide2UncheckedCreateInput>
    /**
     * In case the OptionalSide2 was found with the provided \`where\` argument, update it with this data.
     */
    update: XOR<OptionalSide2UpdateInput, OptionalSide2UncheckedUpdateInput>
  }


  /**
   * OptionalSide2 delete
   */
  export type OptionalSide2DeleteArgs = {
    /**
     * Select specific fields to fetch from the OptionalSide2
     */
    select?: OptionalSide2Select | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OptionalSide2Include | null | undefined
    /**
     * Filter which OptionalSide2 to delete.
     */
    where: OptionalSide2WhereUniqueInput
  }


  /**
   * OptionalSide2 deleteMany
   */
  export type OptionalSide2DeleteManyArgs = {
    /**
     * Filter which OptionalSide2s to delete
     */
    where?: OptionalSide2WhereInput | undefined
  }


  /**
   * OptionalSide2 findRaw
   */
  export type OptionalSide2FindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. \${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue | undefined
    /**
     * Additional options to pass to the \`find\` command \${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue | undefined
  }


  /**
   * OptionalSide2 aggregateRaw
   */
  export type OptionalSide2AggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. \${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[] | undefined
    /**
     * Additional options to pass to the \`aggregate\` command \${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue | undefined
  }


  /**
   * OptionalSide2 without action
   */
  export type OptionalSide2Args = {
    /**
     * Select specific fields to fetch from the OptionalSide2
     */
    select?: OptionalSide2Select | null | undefined
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OptionalSide2Include | null | undefined
  }



  /**
   * Model A
   */


  export type AggregateA = {
    _count: ACountAggregateOutputType | null
    _avg: AAvgAggregateOutputType | null
    _sum: ASumAggregateOutputType | null
    _min: AMinAggregateOutputType | null
    _max: AMaxAggregateOutputType | null
  }

  export type AAvgAggregateOutputType = {
    int: number | null
    sInt: number | null
    bInt: number | null
  }

  export type ASumAggregateOutputType = {
    int: number | null
    sInt: number | null
    bInt: bigint | null
  }

  export type AMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    int: number | null
    sInt: number | null
    bInt: bigint | null
  }

  export type AMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    int: number | null
    sInt: number | null
    bInt: bigint | null
  }

  export type ACountAggregateOutputType = {
    id: number
    email: number
    name: number
    int: number
    sInt: number
    bInt: number
    _all: number
  }


  export type AAvgAggregateInputType = {
    int?: true | undefined
    sInt?: true | undefined
    bInt?: true | undefined
  }

  export type ASumAggregateInputType = {
    int?: true | undefined
    sInt?: true | undefined
    bInt?: true | undefined
  }

  export type AMinAggregateInputType = {
    id?: true | undefined
    email?: true | undefined
    name?: true | undefined
    int?: true | undefined
    sInt?: true | undefined
    bInt?: true | undefined
  }

  export type AMaxAggregateInputType = {
    id?: true | undefined
    email?: true | undefined
    name?: true | undefined
    int?: true | undefined
    sInt?: true | undefined
    bInt?: true | undefined
  }

  export type ACountAggregateInputType = {
    id?: true | undefined
    email?: true | undefined
    name?: true | undefined
    int?: true | undefined
    sInt?: true | undefined
    bInt?: true | undefined
    _all?: true | undefined
  }

  export type AAggregateArgs = {
    /**
     * Filter which A to aggregate.
     */
    where?: AWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AS to fetch.
     */
    orderBy?: Enumerable<AOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` AS from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` AS.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AS
    **/
    _count?: true | ACountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ASumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AMaxAggregateInputType
  }

  export type GetAAggregateType<T extends AAggregateArgs> = {
        [P in keyof T & keyof AggregateA]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateA[P]>
      : GetScalarType<T[P], AggregateA[P]>
  }




  export type AGroupByArgs = {
    where?: AWhereInput | undefined
    orderBy?: Enumerable<AOrderByWithAggregationInput> | undefined
    by: AScalarFieldEnum[]
    having?: AScalarWhereWithAggregatesInput | undefined
    take?: number | undefined
    skip?: number | undefined
    _count?: ACountAggregateInputType | true
    _avg?: AAvgAggregateInputType
    _sum?: ASumAggregateInputType
    _min?: AMinAggregateInputType
    _max?: AMaxAggregateInputType
  }


  export type AGroupByOutputType = {
    id: string
    email: string
    name: string | null
    int: number
    sInt: number
    bInt: bigint
    _count: ACountAggregateOutputType | null
    _avg: AAvgAggregateOutputType | null
    _sum: ASumAggregateOutputType | null
    _min: AMinAggregateOutputType | null
    _max: AMaxAggregateOutputType | null
  }

  type GetAGroupByPayload<T extends AGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AGroupByOutputType[P]>
            : GetScalarType<T[P], AGroupByOutputType[P]>
        }
      >
    >


  export type ASelect = {
    id?: boolean | undefined
    email?: boolean | undefined
    name?: boolean | undefined
    int?: boolean | undefined
    sInt?: boolean | undefined
    bInt?: boolean | undefined
  }


  export type AGetPayload<S extends boolean | null | undefined | AArgs> =
    S extends { select: any, include: any } ? 'Please either choose \`select\` or \`include\`' :
    S extends true ? A :
    S extends undefined ? never :
    S extends { include: any } & (AArgs | AFindManyArgs)
    ? A 
    : S extends { select: any } & (AArgs | AFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof A ? A[P] : never
  } 
      : A


  type ACountArgs = 
    Omit<AFindManyArgs, 'select' | 'include'> & {
      select?: ACountAggregateInputType | true
    }

  export interface ADelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one A that matches the filter.
     * @param {AFindUniqueArgs} args - Arguments to find a A
     * @example
     * // Get one A
     * const a = await prisma.a.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'A'> extends True ? Prisma__AClient<AGetPayload<T>> : Prisma__AClient<AGetPayload<T> | null, null>

    /**
     * Find one A that matches the filter or throw an error  with \`error.code='P2025'\` 
     *     if no matches were found.
     * @param {AFindUniqueOrThrowArgs} args - Arguments to find a A
     * @example
     * // Get one A
     * const a = await prisma.a.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AFindUniqueOrThrowArgs>
    ): Prisma__AClient<AGetPayload<T>>

    /**
     * Find the first A that matches the filter.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AFindFirstArgs} args - Arguments to find a A
     * @example
     * // Get one A
     * const a = await prisma.a.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'A'> extends True ? Prisma__AClient<AGetPayload<T>> : Prisma__AClient<AGetPayload<T> | null, null>

    /**
     * Find the first A that matches the filter or
     * throw \`NotFoundError\` if no matches were found.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AFindFirstOrThrowArgs} args - Arguments to find a A
     * @example
     * // Get one A
     * const a = await prisma.a.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AFindFirstOrThrowArgs>
    ): Prisma__AClient<AGetPayload<T>>

    /**
     * Find zero or more As that matches the filter.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all As
     * const as = await prisma.a.findMany()
     * 
     * // Get first 10 As
     * const as = await prisma.a.findMany({ take: 10 })
     * 
     * // Only select the \`id\`
     * const aWithIdOnly = await prisma.a.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AFindManyArgs>(
      args?: SelectSubset<T, AFindManyArgs>
    ): Prisma.PrismaPromise<Array<AGetPayload<T>>>

    /**
     * Create a A.
     * @param {ACreateArgs} args - Arguments to create a A.
     * @example
     * // Create one A
     * const A = await prisma.a.create({
     *   data: {
     *     // ... data to create a A
     *   }
     * })
     * 
    **/
    create<T extends ACreateArgs>(
      args: SelectSubset<T, ACreateArgs>
    ): Prisma__AClient<AGetPayload<T>>

    /**
     * Create many As.
     *     @param {ACreateManyArgs} args - Arguments to create many As.
     *     @example
     *     // Create many As
     *     const a = await prisma.a.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ACreateManyArgs>(
      args?: SelectSubset<T, ACreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a A.
     * @param {ADeleteArgs} args - Arguments to delete one A.
     * @example
     * // Delete one A
     * const A = await prisma.a.delete({
     *   where: {
     *     // ... filter to delete one A
     *   }
     * })
     * 
    **/
    delete<T extends ADeleteArgs>(
      args: SelectSubset<T, ADeleteArgs>
    ): Prisma__AClient<AGetPayload<T>>

    /**
     * Update one A.
     * @param {AUpdateArgs} args - Arguments to update one A.
     * @example
     * // Update one A
     * const a = await prisma.a.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AUpdateArgs>(
      args: SelectSubset<T, AUpdateArgs>
    ): Prisma__AClient<AGetPayload<T>>

    /**
     * Delete zero or more As.
     * @param {ADeleteManyArgs} args - Arguments to filter As to delete.
     * @example
     * // Delete a few As
     * const { count } = await prisma.a.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ADeleteManyArgs>(
      args?: SelectSubset<T, ADeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more As.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many As
     * const a = await prisma.a.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AUpdateManyArgs>(
      args: SelectSubset<T, AUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one A.
     * @param {AUpsertArgs} args - Arguments to update or create a A.
     * @example
     * // Update or create a A
     * const a = await prisma.a.upsert({
     *   create: {
     *     // ... data to create a A
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the A we want to update
     *   }
     * })
    **/
    upsert<T extends AUpsertArgs>(
      args: SelectSubset<T, AUpsertArgs>
    ): Prisma__AClient<AGetPayload<T>>

    /**
     * Find zero or more As that matches the filter.
     * @param {AFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const a = await prisma.a.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: AFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a A.
     * @param {AAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const a = await prisma.a.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: AAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of As.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ACountArgs} args - Arguments to filter As to count.
     * @example
     * // Count the number of As
     * const count = await prisma.a.count({
     *   where: {
     *     // ... the filter for the As we want to count
     *   }
     * })
    **/
    count<T extends ACountArgs>(
      args?: Subset<T, ACountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ACountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a A.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AAggregateArgs>(args: Subset<T, AAggregateArgs>): Prisma.PrismaPromise<GetAAggregateType<T>>

    /**
     * Group by A.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AGroupByArgs['orderBy'] }
        : { orderBy?: AGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? \`Error: "by" must not be empty.\`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? \`Error: Field "\${P}" used in "having" needs to be provided in "by".\`
            : [
                Error,
                'Field ',
                P,
                \` in "having" needs to be provided in "by"\`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
        }[OrderFields]
    >(args: SubsetIntersection<T, AGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for A.
   * Why is this prefixed with \`Prisma__\`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * A base type for findUnique actions
   */
  export type AFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the A
     */
    select?: ASelect | null | undefined
    /**
     * Filter, which A to fetch.
     */
    where: AWhereUniqueInput
  }

  /**
   * A findUnique
   */
  export interface AFindUniqueArgs extends AFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use \`findUniqueOrThrow\` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * A findUniqueOrThrow
   */
  export type AFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the A
     */
    select?: ASelect | null | undefined
    /**
     * Filter, which A to fetch.
     */
    where: AWhereUniqueInput
  }


  /**
   * A base type for findFirst actions
   */
  export type AFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the A
     */
    select?: ASelect | null | undefined
    /**
     * Filter, which A to fetch.
     */
    where?: AWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AS to fetch.
     */
    orderBy?: Enumerable<AOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AS.
     */
    cursor?: AWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` AS from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` AS.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AS.
     */
    distinct?: Enumerable<AScalarFieldEnum> | undefined
  }

  /**
   * A findFirst
   */
  export interface AFindFirstArgs extends AFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use \`findFirstOrThrow\` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * A findFirstOrThrow
   */
  export type AFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the A
     */
    select?: ASelect | null | undefined
    /**
     * Filter, which A to fetch.
     */
    where?: AWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AS to fetch.
     */
    orderBy?: Enumerable<AOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AS.
     */
    cursor?: AWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` AS from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` AS.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AS.
     */
    distinct?: Enumerable<AScalarFieldEnum> | undefined
  }


  /**
   * A findMany
   */
  export type AFindManyArgs = {
    /**
     * Select specific fields to fetch from the A
     */
    select?: ASelect | null | undefined
    /**
     * Filter, which AS to fetch.
     */
    where?: AWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AS to fetch.
     */
    orderBy?: Enumerable<AOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AS.
     */
    cursor?: AWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` AS from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` AS.
     */
    skip?: number | undefined
    distinct?: Enumerable<AScalarFieldEnum> | undefined
  }


  /**
   * A create
   */
  export type ACreateArgs = {
    /**
     * Select specific fields to fetch from the A
     */
    select?: ASelect | null | undefined
    /**
     * The data needed to create a A.
     */
    data: XOR<ACreateInput, AUncheckedCreateInput>
  }


  /**
   * A createMany
   */
  export type ACreateManyArgs = {
    /**
     * The data used to create many AS.
     */
    data: Enumerable<ACreateManyInput>
  }


  /**
   * A update
   */
  export type AUpdateArgs = {
    /**
     * Select specific fields to fetch from the A
     */
    select?: ASelect | null | undefined
    /**
     * The data needed to update a A.
     */
    data: XOR<AUpdateInput, AUncheckedUpdateInput>
    /**
     * Choose, which A to update.
     */
    where: AWhereUniqueInput
  }


  /**
   * A updateMany
   */
  export type AUpdateManyArgs = {
    /**
     * The data used to update AS.
     */
    data: XOR<AUpdateManyMutationInput, AUncheckedUpdateManyInput>
    /**
     * Filter which AS to update
     */
    where?: AWhereInput | undefined
  }


  /**
   * A upsert
   */
  export type AUpsertArgs = {
    /**
     * Select specific fields to fetch from the A
     */
    select?: ASelect | null | undefined
    /**
     * The filter to search for the A to update in case it exists.
     */
    where: AWhereUniqueInput
    /**
     * In case the A found by the \`where\` argument doesn't exist, create a new A with this data.
     */
    create: XOR<ACreateInput, AUncheckedCreateInput>
    /**
     * In case the A was found with the provided \`where\` argument, update it with this data.
     */
    update: XOR<AUpdateInput, AUncheckedUpdateInput>
  }


  /**
   * A delete
   */
  export type ADeleteArgs = {
    /**
     * Select specific fields to fetch from the A
     */
    select?: ASelect | null | undefined
    /**
     * Filter which A to delete.
     */
    where: AWhereUniqueInput
  }


  /**
   * A deleteMany
   */
  export type ADeleteManyArgs = {
    /**
     * Filter which AS to delete
     */
    where?: AWhereInput | undefined
  }


  /**
   * A findRaw
   */
  export type AFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. \${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue | undefined
    /**
     * Additional options to pass to the \`find\` command \${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue | undefined
  }


  /**
   * A aggregateRaw
   */
  export type AAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. \${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[] | undefined
    /**
     * Additional options to pass to the \`aggregate\` command \${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue | undefined
  }


  /**
   * A without action
   */
  export type AArgs = {
    /**
     * Select specific fields to fetch from the A
     */
    select?: ASelect | null | undefined
  }



  /**
   * Model B
   */


  export type AggregateB = {
    _count: BCountAggregateOutputType | null
    _avg: BAvgAggregateOutputType | null
    _sum: BSumAggregateOutputType | null
    _min: BMinAggregateOutputType | null
    _max: BMaxAggregateOutputType | null
  }

  export type BAvgAggregateOutputType = {
    float: number | null
    dFloat: number | null
  }

  export type BSumAggregateOutputType = {
    float: number | null
    dFloat: number | null
  }

  export type BMinAggregateOutputType = {
    id: string | null
    float: number | null
    dFloat: number | null
  }

  export type BMaxAggregateOutputType = {
    id: string | null
    float: number | null
    dFloat: number | null
  }

  export type BCountAggregateOutputType = {
    id: number
    float: number
    dFloat: number
    _all: number
  }


  export type BAvgAggregateInputType = {
    float?: true | undefined
    dFloat?: true | undefined
  }

  export type BSumAggregateInputType = {
    float?: true | undefined
    dFloat?: true | undefined
  }

  export type BMinAggregateInputType = {
    id?: true | undefined
    float?: true | undefined
    dFloat?: true | undefined
  }

  export type BMaxAggregateInputType = {
    id?: true | undefined
    float?: true | undefined
    dFloat?: true | undefined
  }

  export type BCountAggregateInputType = {
    id?: true | undefined
    float?: true | undefined
    dFloat?: true | undefined
    _all?: true | undefined
  }

  export type BAggregateArgs = {
    /**
     * Filter which B to aggregate.
     */
    where?: BWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BS to fetch.
     */
    orderBy?: Enumerable<BOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` BS from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` BS.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BS
    **/
    _count?: true | BCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BMaxAggregateInputType
  }

  export type GetBAggregateType<T extends BAggregateArgs> = {
        [P in keyof T & keyof AggregateB]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateB[P]>
      : GetScalarType<T[P], AggregateB[P]>
  }




  export type BGroupByArgs = {
    where?: BWhereInput | undefined
    orderBy?: Enumerable<BOrderByWithAggregationInput> | undefined
    by: BScalarFieldEnum[]
    having?: BScalarWhereWithAggregatesInput | undefined
    take?: number | undefined
    skip?: number | undefined
    _count?: BCountAggregateInputType | true
    _avg?: BAvgAggregateInputType
    _sum?: BSumAggregateInputType
    _min?: BMinAggregateInputType
    _max?: BMaxAggregateInputType
  }


  export type BGroupByOutputType = {
    id: string
    float: number
    dFloat: number
    _count: BCountAggregateOutputType | null
    _avg: BAvgAggregateOutputType | null
    _sum: BSumAggregateOutputType | null
    _min: BMinAggregateOutputType | null
    _max: BMaxAggregateOutputType | null
  }

  type GetBGroupByPayload<T extends BGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<BGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BGroupByOutputType[P]>
            : GetScalarType<T[P], BGroupByOutputType[P]>
        }
      >
    >


  export type BSelect = {
    id?: boolean | undefined
    float?: boolean | undefined
    dFloat?: boolean | undefined
  }


  export type BGetPayload<S extends boolean | null | undefined | BArgs> =
    S extends { select: any, include: any } ? 'Please either choose \`select\` or \`include\`' :
    S extends true ? B :
    S extends undefined ? never :
    S extends { include: any } & (BArgs | BFindManyArgs)
    ? B 
    : S extends { select: any } & (BArgs | BFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof B ? B[P] : never
  } 
      : B


  type BCountArgs = 
    Omit<BFindManyArgs, 'select' | 'include'> & {
      select?: BCountAggregateInputType | true
    }

  export interface BDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one B that matches the filter.
     * @param {BFindUniqueArgs} args - Arguments to find a B
     * @example
     * // Get one B
     * const b = await prisma.b.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'B'> extends True ? Prisma__BClient<BGetPayload<T>> : Prisma__BClient<BGetPayload<T> | null, null>

    /**
     * Find one B that matches the filter or throw an error  with \`error.code='P2025'\` 
     *     if no matches were found.
     * @param {BFindUniqueOrThrowArgs} args - Arguments to find a B
     * @example
     * // Get one B
     * const b = await prisma.b.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BFindUniqueOrThrowArgs>
    ): Prisma__BClient<BGetPayload<T>>

    /**
     * Find the first B that matches the filter.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BFindFirstArgs} args - Arguments to find a B
     * @example
     * // Get one B
     * const b = await prisma.b.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'B'> extends True ? Prisma__BClient<BGetPayload<T>> : Prisma__BClient<BGetPayload<T> | null, null>

    /**
     * Find the first B that matches the filter or
     * throw \`NotFoundError\` if no matches were found.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BFindFirstOrThrowArgs} args - Arguments to find a B
     * @example
     * // Get one B
     * const b = await prisma.b.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BFindFirstOrThrowArgs>
    ): Prisma__BClient<BGetPayload<T>>

    /**
     * Find zero or more Bs that matches the filter.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bs
     * const bs = await prisma.b.findMany()
     * 
     * // Get first 10 Bs
     * const bs = await prisma.b.findMany({ take: 10 })
     * 
     * // Only select the \`id\`
     * const bWithIdOnly = await prisma.b.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BFindManyArgs>(
      args?: SelectSubset<T, BFindManyArgs>
    ): Prisma.PrismaPromise<Array<BGetPayload<T>>>

    /**
     * Create a B.
     * @param {BCreateArgs} args - Arguments to create a B.
     * @example
     * // Create one B
     * const B = await prisma.b.create({
     *   data: {
     *     // ... data to create a B
     *   }
     * })
     * 
    **/
    create<T extends BCreateArgs>(
      args: SelectSubset<T, BCreateArgs>
    ): Prisma__BClient<BGetPayload<T>>

    /**
     * Create many Bs.
     *     @param {BCreateManyArgs} args - Arguments to create many Bs.
     *     @example
     *     // Create many Bs
     *     const b = await prisma.b.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BCreateManyArgs>(
      args?: SelectSubset<T, BCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a B.
     * @param {BDeleteArgs} args - Arguments to delete one B.
     * @example
     * // Delete one B
     * const B = await prisma.b.delete({
     *   where: {
     *     // ... filter to delete one B
     *   }
     * })
     * 
    **/
    delete<T extends BDeleteArgs>(
      args: SelectSubset<T, BDeleteArgs>
    ): Prisma__BClient<BGetPayload<T>>

    /**
     * Update one B.
     * @param {BUpdateArgs} args - Arguments to update one B.
     * @example
     * // Update one B
     * const b = await prisma.b.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BUpdateArgs>(
      args: SelectSubset<T, BUpdateArgs>
    ): Prisma__BClient<BGetPayload<T>>

    /**
     * Delete zero or more Bs.
     * @param {BDeleteManyArgs} args - Arguments to filter Bs to delete.
     * @example
     * // Delete a few Bs
     * const { count } = await prisma.b.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BDeleteManyArgs>(
      args?: SelectSubset<T, BDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bs.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bs
     * const b = await prisma.b.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BUpdateManyArgs>(
      args: SelectSubset<T, BUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one B.
     * @param {BUpsertArgs} args - Arguments to update or create a B.
     * @example
     * // Update or create a B
     * const b = await prisma.b.upsert({
     *   create: {
     *     // ... data to create a B
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the B we want to update
     *   }
     * })
    **/
    upsert<T extends BUpsertArgs>(
      args: SelectSubset<T, BUpsertArgs>
    ): Prisma__BClient<BGetPayload<T>>

    /**
     * Find zero or more Bs that matches the filter.
     * @param {BFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const b = await prisma.b.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: BFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a B.
     * @param {BAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const b = await prisma.b.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: BAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Bs.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BCountArgs} args - Arguments to filter Bs to count.
     * @example
     * // Count the number of Bs
     * const count = await prisma.b.count({
     *   where: {
     *     // ... the filter for the Bs we want to count
     *   }
     * })
    **/
    count<T extends BCountArgs>(
      args?: Subset<T, BCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a B.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BAggregateArgs>(args: Subset<T, BAggregateArgs>): Prisma.PrismaPromise<GetBAggregateType<T>>

    /**
     * Group by B.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BGroupByArgs['orderBy'] }
        : { orderBy?: BGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? \`Error: "by" must not be empty.\`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? \`Error: Field "\${P}" used in "having" needs to be provided in "by".\`
            : [
                Error,
                'Field ',
                P,
                \` in "having" needs to be provided in "by"\`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
        }[OrderFields]
    >(args: SubsetIntersection<T, BGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for B.
   * Why is this prefixed with \`Prisma__\`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * B base type for findUnique actions
   */
  export type BFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the B
     */
    select?: BSelect | null | undefined
    /**
     * Filter, which B to fetch.
     */
    where: BWhereUniqueInput
  }

  /**
   * B findUnique
   */
  export interface BFindUniqueArgs extends BFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use \`findUniqueOrThrow\` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * B findUniqueOrThrow
   */
  export type BFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the B
     */
    select?: BSelect | null | undefined
    /**
     * Filter, which B to fetch.
     */
    where: BWhereUniqueInput
  }


  /**
   * B base type for findFirst actions
   */
  export type BFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the B
     */
    select?: BSelect | null | undefined
    /**
     * Filter, which B to fetch.
     */
    where?: BWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BS to fetch.
     */
    orderBy?: Enumerable<BOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BS.
     */
    cursor?: BWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` BS from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` BS.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BS.
     */
    distinct?: Enumerable<BScalarFieldEnum> | undefined
  }

  /**
   * B findFirst
   */
  export interface BFindFirstArgs extends BFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use \`findFirstOrThrow\` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * B findFirstOrThrow
   */
  export type BFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the B
     */
    select?: BSelect | null | undefined
    /**
     * Filter, which B to fetch.
     */
    where?: BWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BS to fetch.
     */
    orderBy?: Enumerable<BOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BS.
     */
    cursor?: BWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` BS from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` BS.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BS.
     */
    distinct?: Enumerable<BScalarFieldEnum> | undefined
  }


  /**
   * B findMany
   */
  export type BFindManyArgs = {
    /**
     * Select specific fields to fetch from the B
     */
    select?: BSelect | null | undefined
    /**
     * Filter, which BS to fetch.
     */
    where?: BWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BS to fetch.
     */
    orderBy?: Enumerable<BOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BS.
     */
    cursor?: BWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` BS from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` BS.
     */
    skip?: number | undefined
    distinct?: Enumerable<BScalarFieldEnum> | undefined
  }


  /**
   * B create
   */
  export type BCreateArgs = {
    /**
     * Select specific fields to fetch from the B
     */
    select?: BSelect | null | undefined
    /**
     * The data needed to create a B.
     */
    data: XOR<BCreateInput, BUncheckedCreateInput>
  }


  /**
   * B createMany
   */
  export type BCreateManyArgs = {
    /**
     * The data used to create many BS.
     */
    data: Enumerable<BCreateManyInput>
  }


  /**
   * B update
   */
  export type BUpdateArgs = {
    /**
     * Select specific fields to fetch from the B
     */
    select?: BSelect | null | undefined
    /**
     * The data needed to update a B.
     */
    data: XOR<BUpdateInput, BUncheckedUpdateInput>
    /**
     * Choose, which B to update.
     */
    where: BWhereUniqueInput
  }


  /**
   * B updateMany
   */
  export type BUpdateManyArgs = {
    /**
     * The data used to update BS.
     */
    data: XOR<BUpdateManyMutationInput, BUncheckedUpdateManyInput>
    /**
     * Filter which BS to update
     */
    where?: BWhereInput | undefined
  }


  /**
   * B upsert
   */
  export type BUpsertArgs = {
    /**
     * Select specific fields to fetch from the B
     */
    select?: BSelect | null | undefined
    /**
     * The filter to search for the B to update in case it exists.
     */
    where: BWhereUniqueInput
    /**
     * In case the B found by the \`where\` argument doesn't exist, create a new B with this data.
     */
    create: XOR<BCreateInput, BUncheckedCreateInput>
    /**
     * In case the B was found with the provided \`where\` argument, update it with this data.
     */
    update: XOR<BUpdateInput, BUncheckedUpdateInput>
  }


  /**
   * B delete
   */
  export type BDeleteArgs = {
    /**
     * Select specific fields to fetch from the B
     */
    select?: BSelect | null | undefined
    /**
     * Filter which B to delete.
     */
    where: BWhereUniqueInput
  }


  /**
   * B deleteMany
   */
  export type BDeleteManyArgs = {
    /**
     * Filter which BS to delete
     */
    where?: BWhereInput | undefined
  }


  /**
   * B findRaw
   */
  export type BFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. \${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue | undefined
    /**
     * Additional options to pass to the \`find\` command \${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue | undefined
  }


  /**
   * B aggregateRaw
   */
  export type BAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. \${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[] | undefined
    /**
     * Additional options to pass to the \`aggregate\` command \${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue | undefined
  }


  /**
   * B without action
   */
  export type BArgs = {
    /**
     * Select specific fields to fetch from the B
     */
    select?: BSelect | null | undefined
  }



  /**
   * Model C
   */


  export type AggregateC = {
    _count: CCountAggregateOutputType | null
    _min: CMinAggregateOutputType | null
    _max: CMaxAggregateOutputType | null
  }

  export type CMinAggregateOutputType = {
    id: string | null
    char: string | null
    vChar: string | null
    text: string | null
    bit: string | null
    vBit: string | null
    uuid: string | null
  }

  export type CMaxAggregateOutputType = {
    id: string | null
    char: string | null
    vChar: string | null
    text: string | null
    bit: string | null
    vBit: string | null
    uuid: string | null
  }

  export type CCountAggregateOutputType = {
    id: number
    char: number
    vChar: number
    text: number
    bit: number
    vBit: number
    uuid: number
    _all: number
  }


  export type CMinAggregateInputType = {
    id?: true | undefined
    char?: true | undefined
    vChar?: true | undefined
    text?: true | undefined
    bit?: true | undefined
    vBit?: true | undefined
    uuid?: true | undefined
  }

  export type CMaxAggregateInputType = {
    id?: true | undefined
    char?: true | undefined
    vChar?: true | undefined
    text?: true | undefined
    bit?: true | undefined
    vBit?: true | undefined
    uuid?: true | undefined
  }

  export type CCountAggregateInputType = {
    id?: true | undefined
    char?: true | undefined
    vChar?: true | undefined
    text?: true | undefined
    bit?: true | undefined
    vBit?: true | undefined
    uuid?: true | undefined
    _all?: true | undefined
  }

  export type CAggregateArgs = {
    /**
     * Filter which C to aggregate.
     */
    where?: CWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CS to fetch.
     */
    orderBy?: Enumerable<COrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` CS from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` CS.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CS
    **/
    _count?: true | CCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CMaxAggregateInputType
  }

  export type GetCAggregateType<T extends CAggregateArgs> = {
        [P in keyof T & keyof AggregateC]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateC[P]>
      : GetScalarType<T[P], AggregateC[P]>
  }




  export type CGroupByArgs = {
    where?: CWhereInput | undefined
    orderBy?: Enumerable<COrderByWithAggregationInput> | undefined
    by: CScalarFieldEnum[]
    having?: CScalarWhereWithAggregatesInput | undefined
    take?: number | undefined
    skip?: number | undefined
    _count?: CCountAggregateInputType | true
    _min?: CMinAggregateInputType
    _max?: CMaxAggregateInputType
  }


  export type CGroupByOutputType = {
    id: string
    char: string
    vChar: string
    text: string
    bit: string
    vBit: string
    uuid: string
    _count: CCountAggregateOutputType | null
    _min: CMinAggregateOutputType | null
    _max: CMaxAggregateOutputType | null
  }

  type GetCGroupByPayload<T extends CGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CGroupByOutputType[P]>
            : GetScalarType<T[P], CGroupByOutputType[P]>
        }
      >
    >


  export type CSelect = {
    id?: boolean | undefined
    char?: boolean | undefined
    vChar?: boolean | undefined
    text?: boolean | undefined
    bit?: boolean | undefined
    vBit?: boolean | undefined
    uuid?: boolean | undefined
  }


  export type CGetPayload<S extends boolean | null | undefined | CArgs> =
    S extends { select: any, include: any } ? 'Please either choose \`select\` or \`include\`' :
    S extends true ? C :
    S extends undefined ? never :
    S extends { include: any } & (CArgs | CFindManyArgs)
    ? C 
    : S extends { select: any } & (CArgs | CFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof C ? C[P] : never
  } 
      : C


  type CCountArgs = 
    Omit<CFindManyArgs, 'select' | 'include'> & {
      select?: CCountAggregateInputType | true
    }

  export interface CDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one C that matches the filter.
     * @param {CFindUniqueArgs} args - Arguments to find a C
     * @example
     * // Get one C
     * const c = await prisma.c.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'C'> extends True ? Prisma__CClient<CGetPayload<T>> : Prisma__CClient<CGetPayload<T> | null, null>

    /**
     * Find one C that matches the filter or throw an error  with \`error.code='P2025'\` 
     *     if no matches were found.
     * @param {CFindUniqueOrThrowArgs} args - Arguments to find a C
     * @example
     * // Get one C
     * const c = await prisma.c.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CFindUniqueOrThrowArgs>
    ): Prisma__CClient<CGetPayload<T>>

    /**
     * Find the first C that matches the filter.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CFindFirstArgs} args - Arguments to find a C
     * @example
     * // Get one C
     * const c = await prisma.c.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'C'> extends True ? Prisma__CClient<CGetPayload<T>> : Prisma__CClient<CGetPayload<T> | null, null>

    /**
     * Find the first C that matches the filter or
     * throw \`NotFoundError\` if no matches were found.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CFindFirstOrThrowArgs} args - Arguments to find a C
     * @example
     * // Get one C
     * const c = await prisma.c.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CFindFirstOrThrowArgs>
    ): Prisma__CClient<CGetPayload<T>>

    /**
     * Find zero or more Cs that matches the filter.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cs
     * const cs = await prisma.c.findMany()
     * 
     * // Get first 10 Cs
     * const cs = await prisma.c.findMany({ take: 10 })
     * 
     * // Only select the \`id\`
     * const cWithIdOnly = await prisma.c.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CFindManyArgs>(
      args?: SelectSubset<T, CFindManyArgs>
    ): Prisma.PrismaPromise<Array<CGetPayload<T>>>

    /**
     * Create a C.
     * @param {CCreateArgs} args - Arguments to create a C.
     * @example
     * // Create one C
     * const C = await prisma.c.create({
     *   data: {
     *     // ... data to create a C
     *   }
     * })
     * 
    **/
    create<T extends CCreateArgs>(
      args: SelectSubset<T, CCreateArgs>
    ): Prisma__CClient<CGetPayload<T>>

    /**
     * Create many Cs.
     *     @param {CCreateManyArgs} args - Arguments to create many Cs.
     *     @example
     *     // Create many Cs
     *     const c = await prisma.c.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CCreateManyArgs>(
      args?: SelectSubset<T, CCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a C.
     * @param {CDeleteArgs} args - Arguments to delete one C.
     * @example
     * // Delete one C
     * const C = await prisma.c.delete({
     *   where: {
     *     // ... filter to delete one C
     *   }
     * })
     * 
    **/
    delete<T extends CDeleteArgs>(
      args: SelectSubset<T, CDeleteArgs>
    ): Prisma__CClient<CGetPayload<T>>

    /**
     * Update one C.
     * @param {CUpdateArgs} args - Arguments to update one C.
     * @example
     * // Update one C
     * const c = await prisma.c.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CUpdateArgs>(
      args: SelectSubset<T, CUpdateArgs>
    ): Prisma__CClient<CGetPayload<T>>

    /**
     * Delete zero or more Cs.
     * @param {CDeleteManyArgs} args - Arguments to filter Cs to delete.
     * @example
     * // Delete a few Cs
     * const { count } = await prisma.c.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CDeleteManyArgs>(
      args?: SelectSubset<T, CDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cs.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cs
     * const c = await prisma.c.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CUpdateManyArgs>(
      args: SelectSubset<T, CUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one C.
     * @param {CUpsertArgs} args - Arguments to update or create a C.
     * @example
     * // Update or create a C
     * const c = await prisma.c.upsert({
     *   create: {
     *     // ... data to create a C
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the C we want to update
     *   }
     * })
    **/
    upsert<T extends CUpsertArgs>(
      args: SelectSubset<T, CUpsertArgs>
    ): Prisma__CClient<CGetPayload<T>>

    /**
     * Find zero or more Cs that matches the filter.
     * @param {CFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const c = await prisma.c.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: CFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a C.
     * @param {CAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const c = await prisma.c.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: CAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Cs.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CCountArgs} args - Arguments to filter Cs to count.
     * @example
     * // Count the number of Cs
     * const count = await prisma.c.count({
     *   where: {
     *     // ... the filter for the Cs we want to count
     *   }
     * })
    **/
    count<T extends CCountArgs>(
      args?: Subset<T, CCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a C.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CAggregateArgs>(args: Subset<T, CAggregateArgs>): Prisma.PrismaPromise<GetCAggregateType<T>>

    /**
     * Group by C.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CGroupByArgs['orderBy'] }
        : { orderBy?: CGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? \`Error: "by" must not be empty.\`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? \`Error: Field "\${P}" used in "having" needs to be provided in "by".\`
            : [
                Error,
                'Field ',
                P,
                \` in "having" needs to be provided in "by"\`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
        }[OrderFields]
    >(args: SubsetIntersection<T, CGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for C.
   * Why is this prefixed with \`Prisma__\`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * C base type for findUnique actions
   */
  export type CFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the C
     */
    select?: CSelect | null | undefined
    /**
     * Filter, which C to fetch.
     */
    where: CWhereUniqueInput
  }

  /**
   * C findUnique
   */
  export interface CFindUniqueArgs extends CFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use \`findUniqueOrThrow\` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * C findUniqueOrThrow
   */
  export type CFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the C
     */
    select?: CSelect | null | undefined
    /**
     * Filter, which C to fetch.
     */
    where: CWhereUniqueInput
  }


  /**
   * C base type for findFirst actions
   */
  export type CFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the C
     */
    select?: CSelect | null | undefined
    /**
     * Filter, which C to fetch.
     */
    where?: CWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CS to fetch.
     */
    orderBy?: Enumerable<COrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CS.
     */
    cursor?: CWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` CS from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` CS.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CS.
     */
    distinct?: Enumerable<CScalarFieldEnum> | undefined
  }

  /**
   * C findFirst
   */
  export interface CFindFirstArgs extends CFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use \`findFirstOrThrow\` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * C findFirstOrThrow
   */
  export type CFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the C
     */
    select?: CSelect | null | undefined
    /**
     * Filter, which C to fetch.
     */
    where?: CWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CS to fetch.
     */
    orderBy?: Enumerable<COrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CS.
     */
    cursor?: CWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` CS from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` CS.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CS.
     */
    distinct?: Enumerable<CScalarFieldEnum> | undefined
  }


  /**
   * C findMany
   */
  export type CFindManyArgs = {
    /**
     * Select specific fields to fetch from the C
     */
    select?: CSelect | null | undefined
    /**
     * Filter, which CS to fetch.
     */
    where?: CWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CS to fetch.
     */
    orderBy?: Enumerable<COrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CS.
     */
    cursor?: CWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` CS from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` CS.
     */
    skip?: number | undefined
    distinct?: Enumerable<CScalarFieldEnum> | undefined
  }


  /**
   * C create
   */
  export type CCreateArgs = {
    /**
     * Select specific fields to fetch from the C
     */
    select?: CSelect | null | undefined
    /**
     * The data needed to create a C.
     */
    data: XOR<CCreateInput, CUncheckedCreateInput>
  }


  /**
   * C createMany
   */
  export type CCreateManyArgs = {
    /**
     * The data used to create many CS.
     */
    data: Enumerable<CCreateManyInput>
  }


  /**
   * C update
   */
  export type CUpdateArgs = {
    /**
     * Select specific fields to fetch from the C
     */
    select?: CSelect | null | undefined
    /**
     * The data needed to update a C.
     */
    data: XOR<CUpdateInput, CUncheckedUpdateInput>
    /**
     * Choose, which C to update.
     */
    where: CWhereUniqueInput
  }


  /**
   * C updateMany
   */
  export type CUpdateManyArgs = {
    /**
     * The data used to update CS.
     */
    data: XOR<CUpdateManyMutationInput, CUncheckedUpdateManyInput>
    /**
     * Filter which CS to update
     */
    where?: CWhereInput | undefined
  }


  /**
   * C upsert
   */
  export type CUpsertArgs = {
    /**
     * Select specific fields to fetch from the C
     */
    select?: CSelect | null | undefined
    /**
     * The filter to search for the C to update in case it exists.
     */
    where: CWhereUniqueInput
    /**
     * In case the C found by the \`where\` argument doesn't exist, create a new C with this data.
     */
    create: XOR<CCreateInput, CUncheckedCreateInput>
    /**
     * In case the C was found with the provided \`where\` argument, update it with this data.
     */
    update: XOR<CUpdateInput, CUncheckedUpdateInput>
  }


  /**
   * C delete
   */
  export type CDeleteArgs = {
    /**
     * Select specific fields to fetch from the C
     */
    select?: CSelect | null | undefined
    /**
     * Filter which C to delete.
     */
    where: CWhereUniqueInput
  }


  /**
   * C deleteMany
   */
  export type CDeleteManyArgs = {
    /**
     * Filter which CS to delete
     */
    where?: CWhereInput | undefined
  }


  /**
   * C findRaw
   */
  export type CFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. \${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue | undefined
    /**
     * Additional options to pass to the \`find\` command \${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue | undefined
  }


  /**
   * C aggregateRaw
   */
  export type CAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. \${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[] | undefined
    /**
     * Additional options to pass to the \`aggregate\` command \${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue | undefined
  }


  /**
   * C without action
   */
  export type CArgs = {
    /**
     * Select specific fields to fetch from the C
     */
    select?: CSelect | null | undefined
  }



  /**
   * Model D
   */


  export type AggregateD = {
    _count: DCountAggregateOutputType | null
    _avg: DAvgAggregateOutputType | null
    _sum: DSumAggregateOutputType | null
    _min: DMinAggregateOutputType | null
    _max: DMaxAggregateOutputType | null
  }

  export type DAvgAggregateOutputType = {
    list: number | null
  }

  export type DSumAggregateOutputType = {
    list: number[] | null
  }

  export type DMinAggregateOutputType = {
    id: string | null
    bool: boolean | null
    byteA: Buffer | null
    xml: string | null
  }

  export type DMaxAggregateOutputType = {
    id: string | null
    bool: boolean | null
    byteA: Buffer | null
    xml: string | null
  }

  export type DCountAggregateOutputType = {
    id: number
    bool: number
    byteA: number
    xml: number
    json: number
    jsonb: number
    list: number
    _all: number
  }


  export type DAvgAggregateInputType = {
    list?: true | undefined
  }

  export type DSumAggregateInputType = {
    list?: true | undefined
  }

  export type DMinAggregateInputType = {
    id?: true | undefined
    bool?: true | undefined
    byteA?: true | undefined
    xml?: true | undefined
  }

  export type DMaxAggregateInputType = {
    id?: true | undefined
    bool?: true | undefined
    byteA?: true | undefined
    xml?: true | undefined
  }

  export type DCountAggregateInputType = {
    id?: true | undefined
    bool?: true | undefined
    byteA?: true | undefined
    xml?: true | undefined
    json?: true | undefined
    jsonb?: true | undefined
    list?: true | undefined
    _all?: true | undefined
  }

  export type DAggregateArgs = {
    /**
     * Filter which D to aggregate.
     */
    where?: DWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DS to fetch.
     */
    orderBy?: Enumerable<DOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` DS from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` DS.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DS
    **/
    _count?: true | DCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DMaxAggregateInputType
  }

  export type GetDAggregateType<T extends DAggregateArgs> = {
        [P in keyof T & keyof AggregateD]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateD[P]>
      : GetScalarType<T[P], AggregateD[P]>
  }




  export type DGroupByArgs = {
    where?: DWhereInput | undefined
    orderBy?: Enumerable<DOrderByWithAggregationInput> | undefined
    by: DScalarFieldEnum[]
    having?: DScalarWhereWithAggregatesInput | undefined
    take?: number | undefined
    skip?: number | undefined
    _count?: DCountAggregateInputType | true
    _avg?: DAvgAggregateInputType
    _sum?: DSumAggregateInputType
    _min?: DMinAggregateInputType
    _max?: DMaxAggregateInputType
  }


  export type DGroupByOutputType = {
    id: string
    bool: boolean
    byteA: Buffer
    xml: string
    json: JsonValue
    jsonb: JsonValue
    list: number[]
    _count: DCountAggregateOutputType | null
    _avg: DAvgAggregateOutputType | null
    _sum: DSumAggregateOutputType | null
    _min: DMinAggregateOutputType | null
    _max: DMaxAggregateOutputType | null
  }

  type GetDGroupByPayload<T extends DGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DGroupByOutputType[P]>
            : GetScalarType<T[P], DGroupByOutputType[P]>
        }
      >
    >


  export type DSelect = {
    id?: boolean | undefined
    bool?: boolean | undefined
    byteA?: boolean | undefined
    xml?: boolean | undefined
    json?: boolean | undefined
    jsonb?: boolean | undefined
    list?: boolean | undefined
  }


  export type DGetPayload<S extends boolean | null | undefined | DArgs> =
    S extends { select: any, include: any } ? 'Please either choose \`select\` or \`include\`' :
    S extends true ? D :
    S extends undefined ? never :
    S extends { include: any } & (DArgs | DFindManyArgs)
    ? D 
    : S extends { select: any } & (DArgs | DFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof D ? D[P] : never
  } 
      : D


  type DCountArgs = 
    Omit<DFindManyArgs, 'select' | 'include'> & {
      select?: DCountAggregateInputType | true
    }

  export interface DDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one D that matches the filter.
     * @param {DFindUniqueArgs} args - Arguments to find a D
     * @example
     * // Get one D
     * const d = await prisma.d.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'D'> extends True ? Prisma__DClient<DGetPayload<T>> : Prisma__DClient<DGetPayload<T> | null, null>

    /**
     * Find one D that matches the filter or throw an error  with \`error.code='P2025'\` 
     *     if no matches were found.
     * @param {DFindUniqueOrThrowArgs} args - Arguments to find a D
     * @example
     * // Get one D
     * const d = await prisma.d.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, DFindUniqueOrThrowArgs>
    ): Prisma__DClient<DGetPayload<T>>

    /**
     * Find the first D that matches the filter.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DFindFirstArgs} args - Arguments to find a D
     * @example
     * // Get one D
     * const d = await prisma.d.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'D'> extends True ? Prisma__DClient<DGetPayload<T>> : Prisma__DClient<DGetPayload<T> | null, null>

    /**
     * Find the first D that matches the filter or
     * throw \`NotFoundError\` if no matches were found.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DFindFirstOrThrowArgs} args - Arguments to find a D
     * @example
     * // Get one D
     * const d = await prisma.d.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DFindFirstOrThrowArgs>(
      args?: SelectSubset<T, DFindFirstOrThrowArgs>
    ): Prisma__DClient<DGetPayload<T>>

    /**
     * Find zero or more Ds that matches the filter.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ds
     * const ds = await prisma.d.findMany()
     * 
     * // Get first 10 Ds
     * const ds = await prisma.d.findMany({ take: 10 })
     * 
     * // Only select the \`id\`
     * const dWithIdOnly = await prisma.d.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DFindManyArgs>(
      args?: SelectSubset<T, DFindManyArgs>
    ): Prisma.PrismaPromise<Array<DGetPayload<T>>>

    /**
     * Create a D.
     * @param {DCreateArgs} args - Arguments to create a D.
     * @example
     * // Create one D
     * const D = await prisma.d.create({
     *   data: {
     *     // ... data to create a D
     *   }
     * })
     * 
    **/
    create<T extends DCreateArgs>(
      args: SelectSubset<T, DCreateArgs>
    ): Prisma__DClient<DGetPayload<T>>

    /**
     * Create many Ds.
     *     @param {DCreateManyArgs} args - Arguments to create many Ds.
     *     @example
     *     // Create many Ds
     *     const d = await prisma.d.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DCreateManyArgs>(
      args?: SelectSubset<T, DCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a D.
     * @param {DDeleteArgs} args - Arguments to delete one D.
     * @example
     * // Delete one D
     * const D = await prisma.d.delete({
     *   where: {
     *     // ... filter to delete one D
     *   }
     * })
     * 
    **/
    delete<T extends DDeleteArgs>(
      args: SelectSubset<T, DDeleteArgs>
    ): Prisma__DClient<DGetPayload<T>>

    /**
     * Update one D.
     * @param {DUpdateArgs} args - Arguments to update one D.
     * @example
     * // Update one D
     * const d = await prisma.d.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DUpdateArgs>(
      args: SelectSubset<T, DUpdateArgs>
    ): Prisma__DClient<DGetPayload<T>>

    /**
     * Delete zero or more Ds.
     * @param {DDeleteManyArgs} args - Arguments to filter Ds to delete.
     * @example
     * // Delete a few Ds
     * const { count } = await prisma.d.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DDeleteManyArgs>(
      args?: SelectSubset<T, DDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ds.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ds
     * const d = await prisma.d.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DUpdateManyArgs>(
      args: SelectSubset<T, DUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one D.
     * @param {DUpsertArgs} args - Arguments to update or create a D.
     * @example
     * // Update or create a D
     * const d = await prisma.d.upsert({
     *   create: {
     *     // ... data to create a D
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the D we want to update
     *   }
     * })
    **/
    upsert<T extends DUpsertArgs>(
      args: SelectSubset<T, DUpsertArgs>
    ): Prisma__DClient<DGetPayload<T>>

    /**
     * Find zero or more Ds that matches the filter.
     * @param {DFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const d = await prisma.d.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: DFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a D.
     * @param {DAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const d = await prisma.d.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: DAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Ds.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DCountArgs} args - Arguments to filter Ds to count.
     * @example
     * // Count the number of Ds
     * const count = await prisma.d.count({
     *   where: {
     *     // ... the filter for the Ds we want to count
     *   }
     * })
    **/
    count<T extends DCountArgs>(
      args?: Subset<T, DCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a D.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DAggregateArgs>(args: Subset<T, DAggregateArgs>): Prisma.PrismaPromise<GetDAggregateType<T>>

    /**
     * Group by D.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DGroupByArgs['orderBy'] }
        : { orderBy?: DGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? \`Error: "by" must not be empty.\`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? \`Error: Field "\${P}" used in "having" needs to be provided in "by".\`
            : [
                Error,
                'Field ',
                P,
                \` in "having" needs to be provided in "by"\`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
        }[OrderFields]
    >(args: SubsetIntersection<T, DGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for D.
   * Why is this prefixed with \`Prisma__\`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * D base type for findUnique actions
   */
  export type DFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the D
     */
    select?: DSelect | null | undefined
    /**
     * Filter, which D to fetch.
     */
    where: DWhereUniqueInput
  }

  /**
   * D findUnique
   */
  export interface DFindUniqueArgs extends DFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use \`findUniqueOrThrow\` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * D findUniqueOrThrow
   */
  export type DFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the D
     */
    select?: DSelect | null | undefined
    /**
     * Filter, which D to fetch.
     */
    where: DWhereUniqueInput
  }


  /**
   * D base type for findFirst actions
   */
  export type DFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the D
     */
    select?: DSelect | null | undefined
    /**
     * Filter, which D to fetch.
     */
    where?: DWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DS to fetch.
     */
    orderBy?: Enumerable<DOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DS.
     */
    cursor?: DWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` DS from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` DS.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DS.
     */
    distinct?: Enumerable<DScalarFieldEnum> | undefined
  }

  /**
   * D findFirst
   */
  export interface DFindFirstArgs extends DFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use \`findFirstOrThrow\` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * D findFirstOrThrow
   */
  export type DFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the D
     */
    select?: DSelect | null | undefined
    /**
     * Filter, which D to fetch.
     */
    where?: DWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DS to fetch.
     */
    orderBy?: Enumerable<DOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DS.
     */
    cursor?: DWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` DS from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` DS.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DS.
     */
    distinct?: Enumerable<DScalarFieldEnum> | undefined
  }


  /**
   * D findMany
   */
  export type DFindManyArgs = {
    /**
     * Select specific fields to fetch from the D
     */
    select?: DSelect | null | undefined
    /**
     * Filter, which DS to fetch.
     */
    where?: DWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DS to fetch.
     */
    orderBy?: Enumerable<DOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DS.
     */
    cursor?: DWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` DS from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` DS.
     */
    skip?: number | undefined
    distinct?: Enumerable<DScalarFieldEnum> | undefined
  }


  /**
   * D create
   */
  export type DCreateArgs = {
    /**
     * Select specific fields to fetch from the D
     */
    select?: DSelect | null | undefined
    /**
     * The data needed to create a D.
     */
    data: XOR<DCreateInput, DUncheckedCreateInput>
  }


  /**
   * D createMany
   */
  export type DCreateManyArgs = {
    /**
     * The data used to create many DS.
     */
    data: Enumerable<DCreateManyInput>
  }


  /**
   * D update
   */
  export type DUpdateArgs = {
    /**
     * Select specific fields to fetch from the D
     */
    select?: DSelect | null | undefined
    /**
     * The data needed to update a D.
     */
    data: XOR<DUpdateInput, DUncheckedUpdateInput>
    /**
     * Choose, which D to update.
     */
    where: DWhereUniqueInput
  }


  /**
   * D updateMany
   */
  export type DUpdateManyArgs = {
    /**
     * The data used to update DS.
     */
    data: XOR<DUpdateManyMutationInput, DUncheckedUpdateManyInput>
    /**
     * Filter which DS to update
     */
    where?: DWhereInput | undefined
  }


  /**
   * D upsert
   */
  export type DUpsertArgs = {
    /**
     * Select specific fields to fetch from the D
     */
    select?: DSelect | null | undefined
    /**
     * The filter to search for the D to update in case it exists.
     */
    where: DWhereUniqueInput
    /**
     * In case the D found by the \`where\` argument doesn't exist, create a new D with this data.
     */
    create: XOR<DCreateInput, DUncheckedCreateInput>
    /**
     * In case the D was found with the provided \`where\` argument, update it with this data.
     */
    update: XOR<DUpdateInput, DUncheckedUpdateInput>
  }


  /**
   * D delete
   */
  export type DDeleteArgs = {
    /**
     * Select specific fields to fetch from the D
     */
    select?: DSelect | null | undefined
    /**
     * Filter which D to delete.
     */
    where: DWhereUniqueInput
  }


  /**
   * D deleteMany
   */
  export type DDeleteManyArgs = {
    /**
     * Filter which DS to delete
     */
    where?: DWhereInput | undefined
  }


  /**
   * D findRaw
   */
  export type DFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. \${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue | undefined
    /**
     * Additional options to pass to the \`find\` command \${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue | undefined
  }


  /**
   * D aggregateRaw
   */
  export type DAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. \${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[] | undefined
    /**
     * Additional options to pass to the \`aggregate\` command \${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue | undefined
  }


  /**
   * D without action
   */
  export type DArgs = {
    /**
     * Select specific fields to fetch from the D
     */
    select?: DSelect | null | undefined
  }



  /**
   * Model E
   */


  export type AggregateE = {
    _count: ECountAggregateOutputType | null
    _min: EMinAggregateOutputType | null
    _max: EMaxAggregateOutputType | null
  }

  export type EMinAggregateOutputType = {
    id: string | null
    date: Date | null
    time: Date | null
    ts: Date | null
  }

  export type EMaxAggregateOutputType = {
    id: string | null
    date: Date | null
    time: Date | null
    ts: Date | null
  }

  export type ECountAggregateOutputType = {
    id: number
    date: number
    time: number
    ts: number
    _all: number
  }


  export type EMinAggregateInputType = {
    id?: true | undefined
    date?: true | undefined
    time?: true | undefined
    ts?: true | undefined
  }

  export type EMaxAggregateInputType = {
    id?: true | undefined
    date?: true | undefined
    time?: true | undefined
    ts?: true | undefined
  }

  export type ECountAggregateInputType = {
    id?: true | undefined
    date?: true | undefined
    time?: true | undefined
    ts?: true | undefined
    _all?: true | undefined
  }

  export type EAggregateArgs = {
    /**
     * Filter which E to aggregate.
     */
    where?: EWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ES to fetch.
     */
    orderBy?: Enumerable<EOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` ES from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` ES.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ES
    **/
    _count?: true | ECountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EMaxAggregateInputType
  }

  export type GetEAggregateType<T extends EAggregateArgs> = {
        [P in keyof T & keyof AggregateE]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateE[P]>
      : GetScalarType<T[P], AggregateE[P]>
  }




  export type EGroupByArgs = {
    where?: EWhereInput | undefined
    orderBy?: Enumerable<EOrderByWithAggregationInput> | undefined
    by: EScalarFieldEnum[]
    having?: EScalarWhereWithAggregatesInput | undefined
    take?: number | undefined
    skip?: number | undefined
    _count?: ECountAggregateInputType | true
    _min?: EMinAggregateInputType
    _max?: EMaxAggregateInputType
  }


  export type EGroupByOutputType = {
    id: string
    date: Date
    time: Date
    ts: Date
    _count: ECountAggregateOutputType | null
    _min: EMinAggregateOutputType | null
    _max: EMaxAggregateOutputType | null
  }

  type GetEGroupByPayload<T extends EGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<EGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EGroupByOutputType[P]>
            : GetScalarType<T[P], EGroupByOutputType[P]>
        }
      >
    >


  export type ESelect = {
    id?: boolean | undefined
    date?: boolean | undefined
    time?: boolean | undefined
    ts?: boolean | undefined
  }


  export type EGetPayload<S extends boolean | null | undefined | EArgs> =
    S extends { select: any, include: any } ? 'Please either choose \`select\` or \`include\`' :
    S extends true ? E :
    S extends undefined ? never :
    S extends { include: any } & (EArgs | EFindManyArgs)
    ? E 
    : S extends { select: any } & (EArgs | EFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof E ? E[P] : never
  } 
      : E


  type ECountArgs = 
    Omit<EFindManyArgs, 'select' | 'include'> & {
      select?: ECountAggregateInputType | true
    }

  export interface EDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one E that matches the filter.
     * @param {EFindUniqueArgs} args - Arguments to find a E
     * @example
     * // Get one E
     * const e = await prisma.e.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'E'> extends True ? Prisma__EClient<EGetPayload<T>> : Prisma__EClient<EGetPayload<T> | null, null>

    /**
     * Find one E that matches the filter or throw an error  with \`error.code='P2025'\` 
     *     if no matches were found.
     * @param {EFindUniqueOrThrowArgs} args - Arguments to find a E
     * @example
     * // Get one E
     * const e = await prisma.e.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, EFindUniqueOrThrowArgs>
    ): Prisma__EClient<EGetPayload<T>>

    /**
     * Find the first E that matches the filter.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EFindFirstArgs} args - Arguments to find a E
     * @example
     * // Get one E
     * const e = await prisma.e.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'E'> extends True ? Prisma__EClient<EGetPayload<T>> : Prisma__EClient<EGetPayload<T> | null, null>

    /**
     * Find the first E that matches the filter or
     * throw \`NotFoundError\` if no matches were found.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EFindFirstOrThrowArgs} args - Arguments to find a E
     * @example
     * // Get one E
     * const e = await prisma.e.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EFindFirstOrThrowArgs>(
      args?: SelectSubset<T, EFindFirstOrThrowArgs>
    ): Prisma__EClient<EGetPayload<T>>

    /**
     * Find zero or more Es that matches the filter.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Es
     * const es = await prisma.e.findMany()
     * 
     * // Get first 10 Es
     * const es = await prisma.e.findMany({ take: 10 })
     * 
     * // Only select the \`id\`
     * const eWithIdOnly = await prisma.e.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EFindManyArgs>(
      args?: SelectSubset<T, EFindManyArgs>
    ): Prisma.PrismaPromise<Array<EGetPayload<T>>>

    /**
     * Create a E.
     * @param {ECreateArgs} args - Arguments to create a E.
     * @example
     * // Create one E
     * const E = await prisma.e.create({
     *   data: {
     *     // ... data to create a E
     *   }
     * })
     * 
    **/
    create<T extends ECreateArgs>(
      args: SelectSubset<T, ECreateArgs>
    ): Prisma__EClient<EGetPayload<T>>

    /**
     * Create many Es.
     *     @param {ECreateManyArgs} args - Arguments to create many Es.
     *     @example
     *     // Create many Es
     *     const e = await prisma.e.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ECreateManyArgs>(
      args?: SelectSubset<T, ECreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a E.
     * @param {EDeleteArgs} args - Arguments to delete one E.
     * @example
     * // Delete one E
     * const E = await prisma.e.delete({
     *   where: {
     *     // ... filter to delete one E
     *   }
     * })
     * 
    **/
    delete<T extends EDeleteArgs>(
      args: SelectSubset<T, EDeleteArgs>
    ): Prisma__EClient<EGetPayload<T>>

    /**
     * Update one E.
     * @param {EUpdateArgs} args - Arguments to update one E.
     * @example
     * // Update one E
     * const e = await prisma.e.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EUpdateArgs>(
      args: SelectSubset<T, EUpdateArgs>
    ): Prisma__EClient<EGetPayload<T>>

    /**
     * Delete zero or more Es.
     * @param {EDeleteManyArgs} args - Arguments to filter Es to delete.
     * @example
     * // Delete a few Es
     * const { count } = await prisma.e.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EDeleteManyArgs>(
      args?: SelectSubset<T, EDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Es.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Es
     * const e = await prisma.e.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EUpdateManyArgs>(
      args: SelectSubset<T, EUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one E.
     * @param {EUpsertArgs} args - Arguments to update or create a E.
     * @example
     * // Update or create a E
     * const e = await prisma.e.upsert({
     *   create: {
     *     // ... data to create a E
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the E we want to update
     *   }
     * })
    **/
    upsert<T extends EUpsertArgs>(
      args: SelectSubset<T, EUpsertArgs>
    ): Prisma__EClient<EGetPayload<T>>

    /**
     * Find zero or more Es that matches the filter.
     * @param {EFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const e = await prisma.e.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: EFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a E.
     * @param {EAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const e = await prisma.e.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: EAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Es.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ECountArgs} args - Arguments to filter Es to count.
     * @example
     * // Count the number of Es
     * const count = await prisma.e.count({
     *   where: {
     *     // ... the filter for the Es we want to count
     *   }
     * })
    **/
    count<T extends ECountArgs>(
      args?: Subset<T, ECountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ECountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a E.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EAggregateArgs>(args: Subset<T, EAggregateArgs>): Prisma.PrismaPromise<GetEAggregateType<T>>

    /**
     * Group by E.
     * Note, that providing \`undefined\` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EGroupByArgs['orderBy'] }
        : { orderBy?: EGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? \`Error: "by" must not be empty.\`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? \`Error: Field "\${P}" used in "having" needs to be provided in "by".\`
            : [
                Error,
                'Field ',
                P,
                \` in "having" needs to be provided in "by"\`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : \`Error: Field "\${P}" in "orderBy" needs to be provided in "by"\`
        }[OrderFields]
    >(args: SubsetIntersection<T, EGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for E.
   * Why is this prefixed with \`Prisma__\`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * E base type for findUnique actions
   */
  export type EFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the E
     */
    select?: ESelect | null | undefined
    /**
     * Filter, which E to fetch.
     */
    where: EWhereUniqueInput
  }

  /**
   * E findUnique
   */
  export interface EFindUniqueArgs extends EFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use \`findUniqueOrThrow\` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * E findUniqueOrThrow
   */
  export type EFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the E
     */
    select?: ESelect | null | undefined
    /**
     * Filter, which E to fetch.
     */
    where: EWhereUniqueInput
  }


  /**
   * E base type for findFirst actions
   */
  export type EFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the E
     */
    select?: ESelect | null | undefined
    /**
     * Filter, which E to fetch.
     */
    where?: EWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ES to fetch.
     */
    orderBy?: Enumerable<EOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ES.
     */
    cursor?: EWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` ES from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` ES.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ES.
     */
    distinct?: Enumerable<EScalarFieldEnum> | undefined
  }

  /**
   * E findFirst
   */
  export interface EFindFirstArgs extends EFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use \`findFirstOrThrow\` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * E findFirstOrThrow
   */
  export type EFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the E
     */
    select?: ESelect | null | undefined
    /**
     * Filter, which E to fetch.
     */
    where?: EWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ES to fetch.
     */
    orderBy?: Enumerable<EOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ES.
     */
    cursor?: EWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` ES from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` ES.
     */
    skip?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ES.
     */
    distinct?: Enumerable<EScalarFieldEnum> | undefined
  }


  /**
   * E findMany
   */
  export type EFindManyArgs = {
    /**
     * Select specific fields to fetch from the E
     */
    select?: ESelect | null | undefined
    /**
     * Filter, which ES to fetch.
     */
    where?: EWhereInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ES to fetch.
     */
    orderBy?: Enumerable<EOrderByWithRelationInput> | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ES.
     */
    cursor?: EWhereUniqueInput | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take \`±n\` ES from the position of the cursor.
     */
    take?: number | undefined
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first \`n\` ES.
     */
    skip?: number | undefined
    distinct?: Enumerable<EScalarFieldEnum> | undefined
  }


  /**
   * E create
   */
  export type ECreateArgs = {
    /**
     * Select specific fields to fetch from the E
     */
    select?: ESelect | null | undefined
    /**
     * The data needed to create a E.
     */
    data: XOR<ECreateInput, EUncheckedCreateInput>
  }


  /**
   * E createMany
   */
  export type ECreateManyArgs = {
    /**
     * The data used to create many ES.
     */
    data: Enumerable<ECreateManyInput>
  }


  /**
   * E update
   */
  export type EUpdateArgs = {
    /**
     * Select specific fields to fetch from the E
     */
    select?: ESelect | null | undefined
    /**
     * The data needed to update a E.
     */
    data: XOR<EUpdateInput, EUncheckedUpdateInput>
    /**
     * Choose, which E to update.
     */
    where: EWhereUniqueInput
  }


  /**
   * E updateMany
   */
  export type EUpdateManyArgs = {
    /**
     * The data used to update ES.
     */
    data: XOR<EUpdateManyMutationInput, EUncheckedUpdateManyInput>
    /**
     * Filter which ES to update
     */
    where?: EWhereInput | undefined
  }


  /**
   * E upsert
   */
  export type EUpsertArgs = {
    /**
     * Select specific fields to fetch from the E
     */
    select?: ESelect | null | undefined
    /**
     * The filter to search for the E to update in case it exists.
     */
    where: EWhereUniqueInput
    /**
     * In case the E found by the \`where\` argument doesn't exist, create a new E with this data.
     */
    create: XOR<ECreateInput, EUncheckedCreateInput>
    /**
     * In case the E was found with the provided \`where\` argument, update it with this data.
     */
    update: XOR<EUpdateInput, EUncheckedUpdateInput>
  }


  /**
   * E delete
   */
  export type EDeleteArgs = {
    /**
     * Select specific fields to fetch from the E
     */
    select?: ESelect | null | undefined
    /**
     * Filter which E to delete.
     */
    where: EWhereUniqueInput
  }


  /**
   * E deleteMany
   */
  export type EDeleteManyArgs = {
    /**
     * Filter which ES to delete
     */
    where?: EWhereInput | undefined
  }


  /**
   * E findRaw
   */
  export type EFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. \${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue | undefined
    /**
     * Additional options to pass to the \`find\` command \${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue | undefined
  }


  /**
   * E aggregateRaw
   */
  export type EAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. \${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[] | undefined
    /**
     * Additional options to pass to the \`aggregate\` command \${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue | undefined
  }


  /**
   * E without action
   */
  export type EArgs = {
    /**
     * Select specific fields to fetch from the E
     */
    select?: ESelect | null | undefined
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    int: 'int',
    sInt: 'sInt',
    bInt: 'bInt'
  };

  export type AScalarFieldEnum = (typeof AScalarFieldEnum)[keyof typeof AScalarFieldEnum]


  export const BScalarFieldEnum: {
    id: 'id',
    float: 'float',
    dFloat: 'dFloat'
  };

  export type BScalarFieldEnum = (typeof BScalarFieldEnum)[keyof typeof BScalarFieldEnum]


  export const CScalarFieldEnum: {
    id: 'id',
    char: 'char',
    vChar: 'vChar',
    text: 'text',
    bit: 'bit',
    vBit: 'vBit',
    uuid: 'uuid'
  };

  export type CScalarFieldEnum = (typeof CScalarFieldEnum)[keyof typeof CScalarFieldEnum]


  export const DScalarFieldEnum: {
    id: 'id',
    bool: 'bool',
    byteA: 'byteA',
    xml: 'xml',
    json: 'json',
    jsonb: 'jsonb',
    list: 'list'
  };

  export type DScalarFieldEnum = (typeof DScalarFieldEnum)[keyof typeof DScalarFieldEnum]


  export const EScalarFieldEnum: {
    id: 'id',
    date: 'date',
    time: 'time',
    ts: 'ts'
  };

  export type EScalarFieldEnum = (typeof EScalarFieldEnum)[keyof typeof EScalarFieldEnum]


  export const EmbedHolderScalarFieldEnum: {
    id: 'id',
    time: 'time',
    text: 'text',
    boolean: 'boolean'
  };

  export type EmbedHolderScalarFieldEnum = (typeof EmbedHolderScalarFieldEnum)[keyof typeof EmbedHolderScalarFieldEnum]


  export const MScalarFieldEnum: {
    id: 'id',
    n_ids: 'n_ids',
    int: 'int',
    optionalInt: 'optionalInt',
    float: 'float',
    optionalFloat: 'optionalFloat',
    string: 'string',
    optionalString: 'optionalString',
    json: 'json',
    optionalJson: 'optionalJson',
    enum: 'enum',
    optionalEnum: 'optionalEnum',
    boolean: 'boolean',
    optionalBoolean: 'optionalBoolean'
  };

  export type MScalarFieldEnum = (typeof MScalarFieldEnum)[keyof typeof MScalarFieldEnum]


  export const ManyRequiredScalarFieldEnum: {
    id: 'id',
    oneOptionalId: 'oneOptionalId',
    int: 'int',
    optionalInt: 'optionalInt',
    float: 'float',
    optionalFloat: 'optionalFloat',
    string: 'string',
    optionalString: 'optionalString',
    json: 'json',
    optionalJson: 'optionalJson',
    enum: 'enum',
    optionalEnum: 'optionalEnum',
    boolean: 'boolean',
    optionalBoolean: 'optionalBoolean'
  };

  export type ManyRequiredScalarFieldEnum = (typeof ManyRequiredScalarFieldEnum)[keyof typeof ManyRequiredScalarFieldEnum]


  export const NScalarFieldEnum: {
    id: 'id',
    m_ids: 'm_ids',
    int: 'int',
    optionalInt: 'optionalInt',
    float: 'float',
    optionalFloat: 'optionalFloat',
    string: 'string',
    optionalString: 'optionalString',
    json: 'json',
    optionalJson: 'optionalJson',
    enum: 'enum',
    optionalEnum: 'optionalEnum',
    boolean: 'boolean',
    optionalBoolean: 'optionalBoolean'
  };

  export type NScalarFieldEnum = (typeof NScalarFieldEnum)[keyof typeof NScalarFieldEnum]


  export const OneOptionalScalarFieldEnum: {
    id: 'id',
    int: 'int',
    optionalInt: 'optionalInt',
    float: 'float',
    optionalFloat: 'optionalFloat',
    string: 'string',
    optionalString: 'optionalString',
    json: 'json',
    optionalJson: 'optionalJson',
    enum: 'enum',
    optionalEnum: 'optionalEnum',
    boolean: 'boolean',
    optionalBoolean: 'optionalBoolean'
  };

  export type OneOptionalScalarFieldEnum = (typeof OneOptionalScalarFieldEnum)[keyof typeof OneOptionalScalarFieldEnum]


  export const OptionalSide1ScalarFieldEnum: {
    id: 'id',
    optionalSide2Id: 'optionalSide2Id',
    int: 'int',
    optionalInt: 'optionalInt',
    float: 'float',
    optionalFloat: 'optionalFloat',
    string: 'string',
    optionalString: 'optionalString',
    json: 'json',
    optionalJson: 'optionalJson',
    enum: 'enum',
    optionalEnum: 'optionalEnum',
    boolean: 'boolean',
    optionalBoolean: 'optionalBoolean'
  };

  export type OptionalSide1ScalarFieldEnum = (typeof OptionalSide1ScalarFieldEnum)[keyof typeof OptionalSide1ScalarFieldEnum]


  export const OptionalSide2ScalarFieldEnum: {
    id: 'id',
    int: 'int',
    optionalInt: 'optionalInt',
    float: 'float',
    optionalFloat: 'optionalFloat',
    string: 'string',
    optionalString: 'optionalString',
    json: 'json',
    optionalJson: 'optionalJson',
    enum: 'enum',
    optionalEnum: 'optionalEnum',
    boolean: 'boolean',
    optionalBoolean: 'optionalBoolean'
  };

  export type OptionalSide2ScalarFieldEnum = (typeof OptionalSide2ScalarFieldEnum)[keyof typeof OptionalSide2ScalarFieldEnum]


  export const PostScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    title: 'title',
    content: 'content',
    published: 'published',
    authorId: 'authorId'
  };

  export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    int: 'int',
    optionalInt: 'optionalInt',
    float: 'float',
    optionalFloat: 'optionalFloat',
    string: 'string',
    optionalString: 'optionalString',
    json: 'json',
    optionalJson: 'optionalJson',
    enum: 'enum',
    optionalEnum: 'optionalEnum',
    boolean: 'boolean',
    optionalBoolean: 'optionalBoolean',
    embedHolderId: 'embedHolderId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type PostWhereInput = {
    AND?: Enumerable<PostWhereInput> | undefined
    OR?: Enumerable<PostWhereInput> | undefined
    NOT?: Enumerable<PostWhereInput> | undefined
    id?: StringFilter | string | undefined
    createdAt?: DateTimeFilter | Date | string | undefined
    title?: StringFilter | string | undefined
    content?: StringNullableFilter | string | null | undefined
    published?: BoolFilter | boolean | undefined
    authorId?: StringFilter | string | undefined
    author?: XOR<UserRelationFilter, UserWhereInput> | undefined
  }

  export type PostOrderByWithRelationInput = {
    id?: SortOrder | undefined
    createdAt?: SortOrder | undefined
    title?: SortOrder | undefined
    content?: SortOrder | undefined
    published?: SortOrder | undefined
    authorId?: SortOrder | undefined
    author?: UserOrderByWithRelationInput | undefined
  }

  export type PostWhereUniqueInput = {
    id?: string | undefined
  }

  export type PostOrderByWithAggregationInput = {
    id?: SortOrder | undefined
    createdAt?: SortOrder | undefined
    title?: SortOrder | undefined
    content?: SortOrder | undefined
    published?: SortOrder | undefined
    authorId?: SortOrder | undefined
    _count?: PostCountOrderByAggregateInput | undefined
    _max?: PostMaxOrderByAggregateInput | undefined
    _min?: PostMinOrderByAggregateInput | undefined
  }

  export type PostScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PostScalarWhereWithAggregatesInput> | undefined
    OR?: Enumerable<PostScalarWhereWithAggregatesInput> | undefined
    NOT?: Enumerable<PostScalarWhereWithAggregatesInput> | undefined
    id?: StringWithAggregatesFilter | string | undefined
    createdAt?: DateTimeWithAggregatesFilter | Date | string | undefined
    title?: StringWithAggregatesFilter | string | undefined
    content?: StringNullableWithAggregatesFilter | string | null | undefined
    published?: BoolWithAggregatesFilter | boolean | undefined
    authorId?: StringWithAggregatesFilter | string | undefined
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput> | undefined
    OR?: Enumerable<UserWhereInput> | undefined
    NOT?: Enumerable<UserWhereInput> | undefined
    id?: StringFilter | string | undefined
    email?: StringFilter | string | undefined
    int?: IntFilter | number | undefined
    optionalInt?: IntNullableFilter | number | null | undefined
    float?: FloatFilter | number | undefined
    optionalFloat?: FloatNullableFilter | number | null | undefined
    string?: StringFilter | string | undefined
    optionalString?: StringNullableFilter | string | null | undefined
    json?: JsonFilter | undefined
    optionalJson?: JsonNullableFilter | undefined
    enum?: EnumABeautifulEnumFilter | ABeautifulEnum | undefined
    optionalEnum?: EnumABeautifulEnumNullableFilter | ABeautifulEnum | null | undefined
    boolean?: BoolFilter | boolean | undefined
    optionalBoolean?: BoolNullableFilter | boolean | null | undefined
    embedHolderId?: StringFilter | string | undefined
    posts?: PostListRelationFilter | undefined
    embedHolder?: XOR<EmbedHolderRelationFilter, EmbedHolderWhereInput> | undefined
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder | undefined
    email?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    json?: SortOrder | undefined
    optionalJson?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
    embedHolderId?: SortOrder | undefined
    posts?: PostOrderByRelationAggregateInput | undefined
    embedHolder?: EmbedHolderOrderByWithRelationInput | undefined
  }

  export type UserWhereUniqueInput = {
    id?: string | undefined
    email?: string | undefined
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder | undefined
    email?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    json?: SortOrder | undefined
    optionalJson?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
    embedHolderId?: SortOrder | undefined
    _count?: UserCountOrderByAggregateInput | undefined
    _avg?: UserAvgOrderByAggregateInput | undefined
    _max?: UserMaxOrderByAggregateInput | undefined
    _min?: UserMinOrderByAggregateInput | undefined
    _sum?: UserSumOrderByAggregateInput | undefined
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput> | undefined
    OR?: Enumerable<UserScalarWhereWithAggregatesInput> | undefined
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput> | undefined
    id?: StringWithAggregatesFilter | string | undefined
    email?: StringWithAggregatesFilter | string | undefined
    int?: IntWithAggregatesFilter | number | undefined
    optionalInt?: IntNullableWithAggregatesFilter | number | null | undefined
    float?: FloatWithAggregatesFilter | number | undefined
    optionalFloat?: FloatNullableWithAggregatesFilter | number | null | undefined
    string?: StringWithAggregatesFilter | string | undefined
    optionalString?: StringNullableWithAggregatesFilter | string | null | undefined
    json?: JsonWithAggregatesFilter | undefined
    optionalJson?: JsonNullableWithAggregatesFilter | undefined
    enum?: EnumABeautifulEnumWithAggregatesFilter | ABeautifulEnum | undefined
    optionalEnum?: EnumABeautifulEnumNullableWithAggregatesFilter | ABeautifulEnum | null | undefined
    boolean?: BoolWithAggregatesFilter | boolean | undefined
    optionalBoolean?: BoolNullableWithAggregatesFilter | boolean | null | undefined
    embedHolderId?: StringWithAggregatesFilter | string | undefined
  }

  export type EmbedHolderWhereInput = {
    AND?: Enumerable<EmbedHolderWhereInput> | undefined
    OR?: Enumerable<EmbedHolderWhereInput> | undefined
    NOT?: Enumerable<EmbedHolderWhereInput> | undefined
    id?: StringFilter | string | undefined
    time?: DateTimeFilter | Date | string | undefined
    text?: StringFilter | string | undefined
    boolean?: BoolFilter | boolean | undefined
    embedList?: XOR<EmbedCompositeListFilter, Enumerable<EmbedObjectEqualityInput>> | undefined
    requiredEmbed?: XOR<EmbedCompositeFilter, EmbedObjectEqualityInput> | undefined
    optionalEmbed?: XOR<EmbedNullableCompositeFilter, EmbedObjectEqualityInput> | null | undefined
    User?: UserListRelationFilter | undefined
  }

  export type EmbedHolderOrderByWithRelationInput = {
    id?: SortOrder | undefined
    time?: SortOrder | undefined
    text?: SortOrder | undefined
    boolean?: SortOrder | undefined
    embedList?: EmbedOrderByCompositeAggregateInput | undefined
    requiredEmbed?: EmbedOrderByInput | undefined
    optionalEmbed?: EmbedOrderByInput | undefined
    User?: UserOrderByRelationAggregateInput | undefined
  }

  export type EmbedHolderWhereUniqueInput = {
    id?: string | undefined
  }

  export type EmbedHolderOrderByWithAggregationInput = {
    id?: SortOrder | undefined
    time?: SortOrder | undefined
    text?: SortOrder | undefined
    boolean?: SortOrder | undefined
    _count?: EmbedHolderCountOrderByAggregateInput | undefined
    _max?: EmbedHolderMaxOrderByAggregateInput | undefined
    _min?: EmbedHolderMinOrderByAggregateInput | undefined
  }

  export type EmbedHolderScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EmbedHolderScalarWhereWithAggregatesInput> | undefined
    OR?: Enumerable<EmbedHolderScalarWhereWithAggregatesInput> | undefined
    NOT?: Enumerable<EmbedHolderScalarWhereWithAggregatesInput> | undefined
    id?: StringWithAggregatesFilter | string | undefined
    time?: DateTimeWithAggregatesFilter | Date | string | undefined
    text?: StringWithAggregatesFilter | string | undefined
    boolean?: BoolWithAggregatesFilter | boolean | undefined
  }

  export type MWhereInput = {
    AND?: Enumerable<MWhereInput> | undefined
    OR?: Enumerable<MWhereInput> | undefined
    NOT?: Enumerable<MWhereInput> | undefined
    id?: StringFilter | string | undefined
    n_ids?: StringNullableListFilter | undefined
    int?: IntFilter | number | undefined
    optionalInt?: IntNullableFilter | number | null | undefined
    float?: FloatFilter | number | undefined
    optionalFloat?: FloatNullableFilter | number | null | undefined
    string?: StringFilter | string | undefined
    optionalString?: StringNullableFilter | string | null | undefined
    json?: JsonFilter | undefined
    optionalJson?: JsonNullableFilter | undefined
    enum?: EnumABeautifulEnumFilter | ABeautifulEnum | undefined
    optionalEnum?: EnumABeautifulEnumNullableFilter | ABeautifulEnum | null | undefined
    boolean?: BoolFilter | boolean | undefined
    optionalBoolean?: BoolNullableFilter | boolean | null | undefined
    n?: NListRelationFilter | undefined
  }

  export type MOrderByWithRelationInput = {
    id?: SortOrder | undefined
    n_ids?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    json?: SortOrder | undefined
    optionalJson?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
    n?: NOrderByRelationAggregateInput | undefined
  }

  export type MWhereUniqueInput = {
    id?: string | undefined
  }

  export type MOrderByWithAggregationInput = {
    id?: SortOrder | undefined
    n_ids?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    json?: SortOrder | undefined
    optionalJson?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
    _count?: MCountOrderByAggregateInput | undefined
    _avg?: MAvgOrderByAggregateInput | undefined
    _max?: MMaxOrderByAggregateInput | undefined
    _min?: MMinOrderByAggregateInput | undefined
    _sum?: MSumOrderByAggregateInput | undefined
  }

  export type MScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MScalarWhereWithAggregatesInput> | undefined
    OR?: Enumerable<MScalarWhereWithAggregatesInput> | undefined
    NOT?: Enumerable<MScalarWhereWithAggregatesInput> | undefined
    id?: StringWithAggregatesFilter | string | undefined
    n_ids?: StringNullableListFilter | undefined
    int?: IntWithAggregatesFilter | number | undefined
    optionalInt?: IntNullableWithAggregatesFilter | number | null | undefined
    float?: FloatWithAggregatesFilter | number | undefined
    optionalFloat?: FloatNullableWithAggregatesFilter | number | null | undefined
    string?: StringWithAggregatesFilter | string | undefined
    optionalString?: StringNullableWithAggregatesFilter | string | null | undefined
    json?: JsonWithAggregatesFilter | undefined
    optionalJson?: JsonNullableWithAggregatesFilter | undefined
    enum?: EnumABeautifulEnumWithAggregatesFilter | ABeautifulEnum | undefined
    optionalEnum?: EnumABeautifulEnumNullableWithAggregatesFilter | ABeautifulEnum | null | undefined
    boolean?: BoolWithAggregatesFilter | boolean | undefined
    optionalBoolean?: BoolNullableWithAggregatesFilter | boolean | null | undefined
  }

  export type NWhereInput = {
    AND?: Enumerable<NWhereInput> | undefined
    OR?: Enumerable<NWhereInput> | undefined
    NOT?: Enumerable<NWhereInput> | undefined
    id?: StringFilter | string | undefined
    m_ids?: StringNullableListFilter | undefined
    int?: IntFilter | number | undefined
    optionalInt?: IntNullableFilter | number | null | undefined
    float?: FloatFilter | number | undefined
    optionalFloat?: FloatNullableFilter | number | null | undefined
    string?: StringFilter | string | undefined
    optionalString?: StringNullableFilter | string | null | undefined
    json?: JsonFilter | undefined
    optionalJson?: JsonNullableFilter | undefined
    enum?: EnumABeautifulEnumFilter | ABeautifulEnum | undefined
    optionalEnum?: EnumABeautifulEnumNullableFilter | ABeautifulEnum | null | undefined
    boolean?: BoolFilter | boolean | undefined
    optionalBoolean?: BoolNullableFilter | boolean | null | undefined
    m?: MListRelationFilter | undefined
  }

  export type NOrderByWithRelationInput = {
    id?: SortOrder | undefined
    m_ids?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    json?: SortOrder | undefined
    optionalJson?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
    m?: MOrderByRelationAggregateInput | undefined
  }

  export type NWhereUniqueInput = {
    id?: string | undefined
  }

  export type NOrderByWithAggregationInput = {
    id?: SortOrder | undefined
    m_ids?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    json?: SortOrder | undefined
    optionalJson?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
    _count?: NCountOrderByAggregateInput | undefined
    _avg?: NAvgOrderByAggregateInput | undefined
    _max?: NMaxOrderByAggregateInput | undefined
    _min?: NMinOrderByAggregateInput | undefined
    _sum?: NSumOrderByAggregateInput | undefined
  }

  export type NScalarWhereWithAggregatesInput = {
    AND?: Enumerable<NScalarWhereWithAggregatesInput> | undefined
    OR?: Enumerable<NScalarWhereWithAggregatesInput> | undefined
    NOT?: Enumerable<NScalarWhereWithAggregatesInput> | undefined
    id?: StringWithAggregatesFilter | string | undefined
    m_ids?: StringNullableListFilter | undefined
    int?: IntWithAggregatesFilter | number | undefined
    optionalInt?: IntNullableWithAggregatesFilter | number | null | undefined
    float?: FloatWithAggregatesFilter | number | undefined
    optionalFloat?: FloatNullableWithAggregatesFilter | number | null | undefined
    string?: StringWithAggregatesFilter | string | undefined
    optionalString?: StringNullableWithAggregatesFilter | string | null | undefined
    json?: JsonWithAggregatesFilter | undefined
    optionalJson?: JsonNullableWithAggregatesFilter | undefined
    enum?: EnumABeautifulEnumWithAggregatesFilter | ABeautifulEnum | undefined
    optionalEnum?: EnumABeautifulEnumNullableWithAggregatesFilter | ABeautifulEnum | null | undefined
    boolean?: BoolWithAggregatesFilter | boolean | undefined
    optionalBoolean?: BoolNullableWithAggregatesFilter | boolean | null | undefined
  }

  export type OneOptionalWhereInput = {
    AND?: Enumerable<OneOptionalWhereInput> | undefined
    OR?: Enumerable<OneOptionalWhereInput> | undefined
    NOT?: Enumerable<OneOptionalWhereInput> | undefined
    id?: StringFilter | string | undefined
    int?: IntFilter | number | undefined
    optionalInt?: IntNullableFilter | number | null | undefined
    float?: FloatFilter | number | undefined
    optionalFloat?: FloatNullableFilter | number | null | undefined
    string?: StringFilter | string | undefined
    optionalString?: StringNullableFilter | string | null | undefined
    json?: JsonFilter | undefined
    optionalJson?: JsonNullableFilter | undefined
    enum?: EnumABeautifulEnumFilter | ABeautifulEnum | undefined
    optionalEnum?: EnumABeautifulEnumNullableFilter | ABeautifulEnum | null | undefined
    boolean?: BoolFilter | boolean | undefined
    optionalBoolean?: BoolNullableFilter | boolean | null | undefined
    many?: ManyRequiredListRelationFilter | undefined
  }

  export type OneOptionalOrderByWithRelationInput = {
    id?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    json?: SortOrder | undefined
    optionalJson?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
    many?: ManyRequiredOrderByRelationAggregateInput | undefined
  }

  export type OneOptionalWhereUniqueInput = {
    id?: string | undefined
  }

  export type OneOptionalOrderByWithAggregationInput = {
    id?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    json?: SortOrder | undefined
    optionalJson?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
    _count?: OneOptionalCountOrderByAggregateInput | undefined
    _avg?: OneOptionalAvgOrderByAggregateInput | undefined
    _max?: OneOptionalMaxOrderByAggregateInput | undefined
    _min?: OneOptionalMinOrderByAggregateInput | undefined
    _sum?: OneOptionalSumOrderByAggregateInput | undefined
  }

  export type OneOptionalScalarWhereWithAggregatesInput = {
    AND?: Enumerable<OneOptionalScalarWhereWithAggregatesInput> | undefined
    OR?: Enumerable<OneOptionalScalarWhereWithAggregatesInput> | undefined
    NOT?: Enumerable<OneOptionalScalarWhereWithAggregatesInput> | undefined
    id?: StringWithAggregatesFilter | string | undefined
    int?: IntWithAggregatesFilter | number | undefined
    optionalInt?: IntNullableWithAggregatesFilter | number | null | undefined
    float?: FloatWithAggregatesFilter | number | undefined
    optionalFloat?: FloatNullableWithAggregatesFilter | number | null | undefined
    string?: StringWithAggregatesFilter | string | undefined
    optionalString?: StringNullableWithAggregatesFilter | string | null | undefined
    json?: JsonWithAggregatesFilter | undefined
    optionalJson?: JsonNullableWithAggregatesFilter | undefined
    enum?: EnumABeautifulEnumWithAggregatesFilter | ABeautifulEnum | undefined
    optionalEnum?: EnumABeautifulEnumNullableWithAggregatesFilter | ABeautifulEnum | null | undefined
    boolean?: BoolWithAggregatesFilter | boolean | undefined
    optionalBoolean?: BoolNullableWithAggregatesFilter | boolean | null | undefined
  }

  export type ManyRequiredWhereInput = {
    AND?: Enumerable<ManyRequiredWhereInput> | undefined
    OR?: Enumerable<ManyRequiredWhereInput> | undefined
    NOT?: Enumerable<ManyRequiredWhereInput> | undefined
    id?: StringFilter | string | undefined
    oneOptionalId?: StringNullableFilter | string | null | undefined
    int?: IntFilter | number | undefined
    optionalInt?: IntNullableFilter | number | null | undefined
    float?: FloatFilter | number | undefined
    optionalFloat?: FloatNullableFilter | number | null | undefined
    string?: StringFilter | string | undefined
    optionalString?: StringNullableFilter | string | null | undefined
    json?: JsonFilter | undefined
    optionalJson?: JsonNullableFilter | undefined
    enum?: EnumABeautifulEnumFilter | ABeautifulEnum | undefined
    optionalEnum?: EnumABeautifulEnumNullableFilter | ABeautifulEnum | null | undefined
    boolean?: BoolFilter | boolean | undefined
    optionalBoolean?: BoolNullableFilter | boolean | null | undefined
    one?: XOR<OneOptionalRelationFilter, OneOptionalWhereInput> | null | undefined
  }

  export type ManyRequiredOrderByWithRelationInput = {
    id?: SortOrder | undefined
    oneOptionalId?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    json?: SortOrder | undefined
    optionalJson?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
    one?: OneOptionalOrderByWithRelationInput | undefined
  }

  export type ManyRequiredWhereUniqueInput = {
    id?: string | undefined
  }

  export type ManyRequiredOrderByWithAggregationInput = {
    id?: SortOrder | undefined
    oneOptionalId?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    json?: SortOrder | undefined
    optionalJson?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
    _count?: ManyRequiredCountOrderByAggregateInput | undefined
    _avg?: ManyRequiredAvgOrderByAggregateInput | undefined
    _max?: ManyRequiredMaxOrderByAggregateInput | undefined
    _min?: ManyRequiredMinOrderByAggregateInput | undefined
    _sum?: ManyRequiredSumOrderByAggregateInput | undefined
  }

  export type ManyRequiredScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ManyRequiredScalarWhereWithAggregatesInput> | undefined
    OR?: Enumerable<ManyRequiredScalarWhereWithAggregatesInput> | undefined
    NOT?: Enumerable<ManyRequiredScalarWhereWithAggregatesInput> | undefined
    id?: StringWithAggregatesFilter | string | undefined
    oneOptionalId?: StringNullableWithAggregatesFilter | string | null | undefined
    int?: IntWithAggregatesFilter | number | undefined
    optionalInt?: IntNullableWithAggregatesFilter | number | null | undefined
    float?: FloatWithAggregatesFilter | number | undefined
    optionalFloat?: FloatNullableWithAggregatesFilter | number | null | undefined
    string?: StringWithAggregatesFilter | string | undefined
    optionalString?: StringNullableWithAggregatesFilter | string | null | undefined
    json?: JsonWithAggregatesFilter | undefined
    optionalJson?: JsonNullableWithAggregatesFilter | undefined
    enum?: EnumABeautifulEnumWithAggregatesFilter | ABeautifulEnum | undefined
    optionalEnum?: EnumABeautifulEnumNullableWithAggregatesFilter | ABeautifulEnum | null | undefined
    boolean?: BoolWithAggregatesFilter | boolean | undefined
    optionalBoolean?: BoolNullableWithAggregatesFilter | boolean | null | undefined
  }

  export type OptionalSide1WhereInput = {
    AND?: Enumerable<OptionalSide1WhereInput> | undefined
    OR?: Enumerable<OptionalSide1WhereInput> | undefined
    NOT?: Enumerable<OptionalSide1WhereInput> | undefined
    id?: StringFilter | string | undefined
    optionalSide2Id?: StringNullableFilter | string | null | undefined
    int?: IntFilter | number | undefined
    optionalInt?: IntNullableFilter | number | null | undefined
    float?: FloatFilter | number | undefined
    optionalFloat?: FloatNullableFilter | number | null | undefined
    string?: StringFilter | string | undefined
    optionalString?: StringNullableFilter | string | null | undefined
    json?: JsonFilter | undefined
    optionalJson?: JsonNullableFilter | undefined
    enum?: EnumABeautifulEnumFilter | ABeautifulEnum | undefined
    optionalEnum?: EnumABeautifulEnumNullableFilter | ABeautifulEnum | null | undefined
    boolean?: BoolFilter | boolean | undefined
    optionalBoolean?: BoolNullableFilter | boolean | null | undefined
    opti?: XOR<OptionalSide2RelationFilter, OptionalSide2WhereInput> | null | undefined
  }

  export type OptionalSide1OrderByWithRelationInput = {
    id?: SortOrder | undefined
    optionalSide2Id?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    json?: SortOrder | undefined
    optionalJson?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
    opti?: OptionalSide2OrderByWithRelationInput | undefined
  }

  export type OptionalSide1WhereUniqueInput = {
    id?: string | undefined
    optionalSide2Id?: string | undefined
  }

  export type OptionalSide1OrderByWithAggregationInput = {
    id?: SortOrder | undefined
    optionalSide2Id?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    json?: SortOrder | undefined
    optionalJson?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
    _count?: OptionalSide1CountOrderByAggregateInput | undefined
    _avg?: OptionalSide1AvgOrderByAggregateInput | undefined
    _max?: OptionalSide1MaxOrderByAggregateInput | undefined
    _min?: OptionalSide1MinOrderByAggregateInput | undefined
    _sum?: OptionalSide1SumOrderByAggregateInput | undefined
  }

  export type OptionalSide1ScalarWhereWithAggregatesInput = {
    AND?: Enumerable<OptionalSide1ScalarWhereWithAggregatesInput> | undefined
    OR?: Enumerable<OptionalSide1ScalarWhereWithAggregatesInput> | undefined
    NOT?: Enumerable<OptionalSide1ScalarWhereWithAggregatesInput> | undefined
    id?: StringWithAggregatesFilter | string | undefined
    optionalSide2Id?: StringNullableWithAggregatesFilter | string | null | undefined
    int?: IntWithAggregatesFilter | number | undefined
    optionalInt?: IntNullableWithAggregatesFilter | number | null | undefined
    float?: FloatWithAggregatesFilter | number | undefined
    optionalFloat?: FloatNullableWithAggregatesFilter | number | null | undefined
    string?: StringWithAggregatesFilter | string | undefined
    optionalString?: StringNullableWithAggregatesFilter | string | null | undefined
    json?: JsonWithAggregatesFilter | undefined
    optionalJson?: JsonNullableWithAggregatesFilter | undefined
    enum?: EnumABeautifulEnumWithAggregatesFilter | ABeautifulEnum | undefined
    optionalEnum?: EnumABeautifulEnumNullableWithAggregatesFilter | ABeautifulEnum | null | undefined
    boolean?: BoolWithAggregatesFilter | boolean | undefined
    optionalBoolean?: BoolNullableWithAggregatesFilter | boolean | null | undefined
  }

  export type OptionalSide2WhereInput = {
    AND?: Enumerable<OptionalSide2WhereInput> | undefined
    OR?: Enumerable<OptionalSide2WhereInput> | undefined
    NOT?: Enumerable<OptionalSide2WhereInput> | undefined
    id?: StringFilter | string | undefined
    int?: IntFilter | number | undefined
    optionalInt?: IntNullableFilter | number | null | undefined
    float?: FloatFilter | number | undefined
    optionalFloat?: FloatNullableFilter | number | null | undefined
    string?: StringFilter | string | undefined
    optionalString?: StringNullableFilter | string | null | undefined
    json?: JsonFilter | undefined
    optionalJson?: JsonNullableFilter | undefined
    enum?: EnumABeautifulEnumFilter | ABeautifulEnum | undefined
    optionalEnum?: EnumABeautifulEnumNullableFilter | ABeautifulEnum | null | undefined
    boolean?: BoolFilter | boolean | undefined
    optionalBoolean?: BoolNullableFilter | boolean | null | undefined
    opti?: XOR<OptionalSide1RelationFilter, OptionalSide1WhereInput> | null | undefined
  }

  export type OptionalSide2OrderByWithRelationInput = {
    id?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    json?: SortOrder | undefined
    optionalJson?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
    opti?: OptionalSide1OrderByWithRelationInput | undefined
  }

  export type OptionalSide2WhereUniqueInput = {
    id?: string | undefined
  }

  export type OptionalSide2OrderByWithAggregationInput = {
    id?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    json?: SortOrder | undefined
    optionalJson?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
    _count?: OptionalSide2CountOrderByAggregateInput | undefined
    _avg?: OptionalSide2AvgOrderByAggregateInput | undefined
    _max?: OptionalSide2MaxOrderByAggregateInput | undefined
    _min?: OptionalSide2MinOrderByAggregateInput | undefined
    _sum?: OptionalSide2SumOrderByAggregateInput | undefined
  }

  export type OptionalSide2ScalarWhereWithAggregatesInput = {
    AND?: Enumerable<OptionalSide2ScalarWhereWithAggregatesInput> | undefined
    OR?: Enumerable<OptionalSide2ScalarWhereWithAggregatesInput> | undefined
    NOT?: Enumerable<OptionalSide2ScalarWhereWithAggregatesInput> | undefined
    id?: StringWithAggregatesFilter | string | undefined
    int?: IntWithAggregatesFilter | number | undefined
    optionalInt?: IntNullableWithAggregatesFilter | number | null | undefined
    float?: FloatWithAggregatesFilter | number | undefined
    optionalFloat?: FloatNullableWithAggregatesFilter | number | null | undefined
    string?: StringWithAggregatesFilter | string | undefined
    optionalString?: StringNullableWithAggregatesFilter | string | null | undefined
    json?: JsonWithAggregatesFilter | undefined
    optionalJson?: JsonNullableWithAggregatesFilter | undefined
    enum?: EnumABeautifulEnumWithAggregatesFilter | ABeautifulEnum | undefined
    optionalEnum?: EnumABeautifulEnumNullableWithAggregatesFilter | ABeautifulEnum | null | undefined
    boolean?: BoolWithAggregatesFilter | boolean | undefined
    optionalBoolean?: BoolNullableWithAggregatesFilter | boolean | null | undefined
  }

  export type AWhereInput = {
    AND?: Enumerable<AWhereInput> | undefined
    OR?: Enumerable<AWhereInput> | undefined
    NOT?: Enumerable<AWhereInput> | undefined
    id?: StringFilter | string | undefined
    email?: StringFilter | string | undefined
    name?: StringNullableFilter | string | null | undefined
    int?: IntFilter | number | undefined
    sInt?: IntFilter | number | undefined
    bInt?: BigIntFilter | bigint | number | undefined
  }

  export type AOrderByWithRelationInput = {
    id?: SortOrder | undefined
    email?: SortOrder | undefined
    name?: SortOrder | undefined
    int?: SortOrder | undefined
    sInt?: SortOrder | undefined
    bInt?: SortOrder | undefined
  }

  export type AWhereUniqueInput = {
    id?: string | undefined
    email?: string | undefined
  }

  export type AOrderByWithAggregationInput = {
    id?: SortOrder | undefined
    email?: SortOrder | undefined
    name?: SortOrder | undefined
    int?: SortOrder | undefined
    sInt?: SortOrder | undefined
    bInt?: SortOrder | undefined
    _count?: ACountOrderByAggregateInput | undefined
    _avg?: AAvgOrderByAggregateInput | undefined
    _max?: AMaxOrderByAggregateInput | undefined
    _min?: AMinOrderByAggregateInput | undefined
    _sum?: ASumOrderByAggregateInput | undefined
  }

  export type AScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AScalarWhereWithAggregatesInput> | undefined
    OR?: Enumerable<AScalarWhereWithAggregatesInput> | undefined
    NOT?: Enumerable<AScalarWhereWithAggregatesInput> | undefined
    id?: StringWithAggregatesFilter | string | undefined
    email?: StringWithAggregatesFilter | string | undefined
    name?: StringNullableWithAggregatesFilter | string | null | undefined
    int?: IntWithAggregatesFilter | number | undefined
    sInt?: IntWithAggregatesFilter | number | undefined
    bInt?: BigIntWithAggregatesFilter | bigint | number | undefined
  }

  export type BWhereInput = {
    AND?: Enumerable<BWhereInput> | undefined
    OR?: Enumerable<BWhereInput> | undefined
    NOT?: Enumerable<BWhereInput> | undefined
    id?: StringFilter | string | undefined
    float?: FloatFilter | number | undefined
    dFloat?: FloatFilter | number | undefined
  }

  export type BOrderByWithRelationInput = {
    id?: SortOrder | undefined
    float?: SortOrder | undefined
    dFloat?: SortOrder | undefined
  }

  export type BWhereUniqueInput = {
    id?: string | undefined
  }

  export type BOrderByWithAggregationInput = {
    id?: SortOrder | undefined
    float?: SortOrder | undefined
    dFloat?: SortOrder | undefined
    _count?: BCountOrderByAggregateInput | undefined
    _avg?: BAvgOrderByAggregateInput | undefined
    _max?: BMaxOrderByAggregateInput | undefined
    _min?: BMinOrderByAggregateInput | undefined
    _sum?: BSumOrderByAggregateInput | undefined
  }

  export type BScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BScalarWhereWithAggregatesInput> | undefined
    OR?: Enumerable<BScalarWhereWithAggregatesInput> | undefined
    NOT?: Enumerable<BScalarWhereWithAggregatesInput> | undefined
    id?: StringWithAggregatesFilter | string | undefined
    float?: FloatWithAggregatesFilter | number | undefined
    dFloat?: FloatWithAggregatesFilter | number | undefined
  }

  export type CWhereInput = {
    AND?: Enumerable<CWhereInput> | undefined
    OR?: Enumerable<CWhereInput> | undefined
    NOT?: Enumerable<CWhereInput> | undefined
    id?: StringFilter | string | undefined
    char?: StringFilter | string | undefined
    vChar?: StringFilter | string | undefined
    text?: StringFilter | string | undefined
    bit?: StringFilter | string | undefined
    vBit?: StringFilter | string | undefined
    uuid?: StringFilter | string | undefined
  }

  export type COrderByWithRelationInput = {
    id?: SortOrder | undefined
    char?: SortOrder | undefined
    vChar?: SortOrder | undefined
    text?: SortOrder | undefined
    bit?: SortOrder | undefined
    vBit?: SortOrder | undefined
    uuid?: SortOrder | undefined
  }

  export type CWhereUniqueInput = {
    id?: string | undefined
  }

  export type COrderByWithAggregationInput = {
    id?: SortOrder | undefined
    char?: SortOrder | undefined
    vChar?: SortOrder | undefined
    text?: SortOrder | undefined
    bit?: SortOrder | undefined
    vBit?: SortOrder | undefined
    uuid?: SortOrder | undefined
    _count?: CCountOrderByAggregateInput | undefined
    _max?: CMaxOrderByAggregateInput | undefined
    _min?: CMinOrderByAggregateInput | undefined
  }

  export type CScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CScalarWhereWithAggregatesInput> | undefined
    OR?: Enumerable<CScalarWhereWithAggregatesInput> | undefined
    NOT?: Enumerable<CScalarWhereWithAggregatesInput> | undefined
    id?: StringWithAggregatesFilter | string | undefined
    char?: StringWithAggregatesFilter | string | undefined
    vChar?: StringWithAggregatesFilter | string | undefined
    text?: StringWithAggregatesFilter | string | undefined
    bit?: StringWithAggregatesFilter | string | undefined
    vBit?: StringWithAggregatesFilter | string | undefined
    uuid?: StringWithAggregatesFilter | string | undefined
  }

  export type DWhereInput = {
    AND?: Enumerable<DWhereInput> | undefined
    OR?: Enumerable<DWhereInput> | undefined
    NOT?: Enumerable<DWhereInput> | undefined
    id?: StringFilter | string | undefined
    bool?: BoolFilter | boolean | undefined
    byteA?: BytesFilter | Buffer | undefined
    xml?: StringFilter | string | undefined
    json?: JsonFilter | undefined
    jsonb?: JsonFilter | undefined
    list?: IntNullableListFilter | undefined
  }

  export type DOrderByWithRelationInput = {
    id?: SortOrder | undefined
    bool?: SortOrder | undefined
    byteA?: SortOrder | undefined
    xml?: SortOrder | undefined
    json?: SortOrder | undefined
    jsonb?: SortOrder | undefined
    list?: SortOrder | undefined
  }

  export type DWhereUniqueInput = {
    id?: string | undefined
  }

  export type DOrderByWithAggregationInput = {
    id?: SortOrder | undefined
    bool?: SortOrder | undefined
    byteA?: SortOrder | undefined
    xml?: SortOrder | undefined
    json?: SortOrder | undefined
    jsonb?: SortOrder | undefined
    list?: SortOrder | undefined
    _count?: DCountOrderByAggregateInput | undefined
    _avg?: DAvgOrderByAggregateInput | undefined
    _max?: DMaxOrderByAggregateInput | undefined
    _min?: DMinOrderByAggregateInput | undefined
    _sum?: DSumOrderByAggregateInput | undefined
  }

  export type DScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DScalarWhereWithAggregatesInput> | undefined
    OR?: Enumerable<DScalarWhereWithAggregatesInput> | undefined
    NOT?: Enumerable<DScalarWhereWithAggregatesInput> | undefined
    id?: StringWithAggregatesFilter | string | undefined
    bool?: BoolWithAggregatesFilter | boolean | undefined
    byteA?: BytesWithAggregatesFilter | Buffer | undefined
    xml?: StringWithAggregatesFilter | string | undefined
    json?: JsonWithAggregatesFilter | undefined
    jsonb?: JsonWithAggregatesFilter | undefined
    list?: IntNullableListFilter | undefined
  }

  export type EWhereInput = {
    AND?: Enumerable<EWhereInput> | undefined
    OR?: Enumerable<EWhereInput> | undefined
    NOT?: Enumerable<EWhereInput> | undefined
    id?: StringFilter | string | undefined
    date?: DateTimeFilter | Date | string | undefined
    time?: DateTimeFilter | Date | string | undefined
    ts?: DateTimeFilter | Date | string | undefined
  }

  export type EOrderByWithRelationInput = {
    id?: SortOrder | undefined
    date?: SortOrder | undefined
    time?: SortOrder | undefined
    ts?: SortOrder | undefined
  }

  export type EWhereUniqueInput = {
    id?: string | undefined
  }

  export type EOrderByWithAggregationInput = {
    id?: SortOrder | undefined
    date?: SortOrder | undefined
    time?: SortOrder | undefined
    ts?: SortOrder | undefined
    _count?: ECountOrderByAggregateInput | undefined
    _max?: EMaxOrderByAggregateInput | undefined
    _min?: EMinOrderByAggregateInput | undefined
  }

  export type EScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EScalarWhereWithAggregatesInput> | undefined
    OR?: Enumerable<EScalarWhereWithAggregatesInput> | undefined
    NOT?: Enumerable<EScalarWhereWithAggregatesInput> | undefined
    id?: StringWithAggregatesFilter | string | undefined
    date?: DateTimeWithAggregatesFilter | Date | string | undefined
    time?: DateTimeWithAggregatesFilter | Date | string | undefined
    ts?: DateTimeWithAggregatesFilter | Date | string | undefined
  }

  export type PostCreateInput = {
    id?: string | undefined
    createdAt?: Date | string | undefined
    title: string
    content?: string | null | undefined
    published?: boolean | undefined
    author: UserCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateInput = {
    id?: string | undefined
    createdAt?: Date | string | undefined
    title: string
    content?: string | null | undefined
    published?: boolean | undefined
    authorId: string
  }

  export type PostUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string | undefined
    title?: StringFieldUpdateOperationsInput | string | undefined
    content?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    published?: BoolFieldUpdateOperationsInput | boolean | undefined
    author?: UserUpdateOneRequiredWithoutPostsNestedInput | undefined
  }

  export type PostUncheckedUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string | undefined
    title?: StringFieldUpdateOperationsInput | string | undefined
    content?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    published?: BoolFieldUpdateOperationsInput | boolean | undefined
    authorId?: StringFieldUpdateOperationsInput | string | undefined
  }

  export type PostCreateManyInput = {
    id?: string | undefined
    createdAt?: Date | string | undefined
    title: string
    content?: string | null | undefined
    published?: boolean | undefined
    authorId: string
  }

  export type PostUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string | undefined
    title?: StringFieldUpdateOperationsInput | string | undefined
    content?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    published?: BoolFieldUpdateOperationsInput | boolean | undefined
  }

  export type PostUncheckedUpdateManyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string | undefined
    title?: StringFieldUpdateOperationsInput | string | undefined
    content?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    published?: BoolFieldUpdateOperationsInput | boolean | undefined
    authorId?: StringFieldUpdateOperationsInput | string | undefined
  }

  export type UserCreateInput = {
    id?: string | undefined
    email: string
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
    posts?: PostCreateNestedManyWithoutAuthorInput | undefined
    embedHolder: EmbedHolderCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string | undefined
    email: string
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
    embedHolderId: string
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput | undefined
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string | undefined
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
    posts?: PostUpdateManyWithoutAuthorNestedInput | undefined
    embedHolder?: EmbedHolderUpdateOneRequiredWithoutUserNestedInput | undefined
  }

  export type UserUncheckedUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string | undefined
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
    embedHolderId?: StringFieldUpdateOperationsInput | string | undefined
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput | undefined
  }

  export type UserCreateManyInput = {
    id?: string | undefined
    email: string
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
    embedHolderId: string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string | undefined
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
  }

  export type UserUncheckedUpdateManyInput = {
    email?: StringFieldUpdateOperationsInput | string | undefined
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
    embedHolderId?: StringFieldUpdateOperationsInput | string | undefined
  }

  export type EmbedHolderCreateInput = {
    id?: string | undefined
    time?: Date | string | undefined
    text: string
    boolean: boolean
    embedList?: XOR<EmbedListCreateEnvelopeInput, Enumerable<EmbedCreateInput>> | undefined
    requiredEmbed: XOR<EmbedCreateEnvelopeInput, EmbedCreateInput>
    optionalEmbed?: XOR<EmbedNullableCreateEnvelopeInput, EmbedCreateInput> | null | undefined
    User?: UserCreateNestedManyWithoutEmbedHolderInput | undefined
  }

  export type EmbedHolderUncheckedCreateInput = {
    id?: string | undefined
    time?: Date | string | undefined
    text: string
    boolean: boolean
    embedList?: XOR<EmbedListCreateEnvelopeInput, Enumerable<EmbedCreateInput>> | undefined
    requiredEmbed: XOR<EmbedCreateEnvelopeInput, EmbedCreateInput>
    optionalEmbed?: XOR<EmbedNullableCreateEnvelopeInput, EmbedCreateInput> | null | undefined
    User?: UserUncheckedCreateNestedManyWithoutEmbedHolderInput | undefined
  }

  export type EmbedHolderUpdateInput = {
    time?: DateTimeFieldUpdateOperationsInput | Date | string | undefined
    text?: StringFieldUpdateOperationsInput | string | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    embedList?: XOR<EmbedListUpdateEnvelopeInput, Enumerable<EmbedCreateInput>> | undefined
    requiredEmbed?: XOR<EmbedUpdateEnvelopeInput, EmbedCreateInput> | undefined
    optionalEmbed?: XOR<EmbedNullableUpdateEnvelopeInput, EmbedCreateInput> | null | undefined
    User?: UserUpdateManyWithoutEmbedHolderNestedInput | undefined
  }

  export type EmbedHolderUncheckedUpdateInput = {
    time?: DateTimeFieldUpdateOperationsInput | Date | string | undefined
    text?: StringFieldUpdateOperationsInput | string | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    embedList?: XOR<EmbedListUpdateEnvelopeInput, Enumerable<EmbedCreateInput>> | undefined
    requiredEmbed?: XOR<EmbedUpdateEnvelopeInput, EmbedCreateInput> | undefined
    optionalEmbed?: XOR<EmbedNullableUpdateEnvelopeInput, EmbedCreateInput> | null | undefined
    User?: UserUncheckedUpdateManyWithoutEmbedHolderNestedInput | undefined
  }

  export type EmbedHolderCreateManyInput = {
    id?: string | undefined
    time?: Date | string | undefined
    text: string
    boolean: boolean
    embedList?: XOR<EmbedListCreateEnvelopeInput, Enumerable<EmbedCreateInput>> | undefined
    requiredEmbed: XOR<EmbedCreateEnvelopeInput, EmbedCreateInput>
    optionalEmbed?: XOR<EmbedNullableCreateEnvelopeInput, EmbedCreateInput> | null | undefined
  }

  export type EmbedHolderUpdateManyMutationInput = {
    time?: DateTimeFieldUpdateOperationsInput | Date | string | undefined
    text?: StringFieldUpdateOperationsInput | string | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    embedList?: XOR<EmbedListUpdateEnvelopeInput, Enumerable<EmbedCreateInput>> | undefined
    requiredEmbed?: XOR<EmbedUpdateEnvelopeInput, EmbedCreateInput> | undefined
    optionalEmbed?: XOR<EmbedNullableUpdateEnvelopeInput, EmbedCreateInput> | null | undefined
  }

  export type EmbedHolderUncheckedUpdateManyInput = {
    time?: DateTimeFieldUpdateOperationsInput | Date | string | undefined
    text?: StringFieldUpdateOperationsInput | string | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    embedList?: XOR<EmbedListUpdateEnvelopeInput, Enumerable<EmbedCreateInput>> | undefined
    requiredEmbed?: XOR<EmbedUpdateEnvelopeInput, EmbedCreateInput> | undefined
    optionalEmbed?: XOR<EmbedNullableUpdateEnvelopeInput, EmbedCreateInput> | null | undefined
  }

  export type MCreateInput = {
    id?: string | undefined
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
    n?: NCreateNestedManyWithoutMInput | undefined
  }

  export type MUncheckedCreateInput = {
    id?: string | undefined
    n_ids?: MCreaten_idsInput | Enumerable<string> | undefined
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
    n?: NUncheckedCreateNestedManyWithoutMInput | undefined
  }

  export type MUpdateInput = {
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
    n?: NUpdateManyWithoutMNestedInput | undefined
  }

  export type MUncheckedUpdateInput = {
    n_ids?: MUpdaten_idsInput | Enumerable<string> | undefined
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
    n?: NUncheckedUpdateManyWithoutMNestedInput | undefined
  }

  export type MCreateManyInput = {
    id?: string | undefined
    n_ids?: MCreaten_idsInput | Enumerable<string> | undefined
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
  }

  export type MUpdateManyMutationInput = {
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
  }

  export type MUncheckedUpdateManyInput = {
    n_ids?: MUpdaten_idsInput | Enumerable<string> | undefined
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
  }

  export type NCreateInput = {
    id?: string | undefined
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
    m?: MCreateNestedManyWithoutNInput | undefined
  }

  export type NUncheckedCreateInput = {
    id?: string | undefined
    m_ids?: NCreatem_idsInput | Enumerable<string> | undefined
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
    m?: MUncheckedCreateNestedManyWithoutNInput | undefined
  }

  export type NUpdateInput = {
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
    m?: MUpdateManyWithoutNNestedInput | undefined
  }

  export type NUncheckedUpdateInput = {
    m_ids?: NUpdatem_idsInput | Enumerable<string> | undefined
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
    m?: MUncheckedUpdateManyWithoutNNestedInput | undefined
  }

  export type NCreateManyInput = {
    id?: string | undefined
    m_ids?: NCreatem_idsInput | Enumerable<string> | undefined
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
  }

  export type NUpdateManyMutationInput = {
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
  }

  export type NUncheckedUpdateManyInput = {
    m_ids?: NUpdatem_idsInput | Enumerable<string> | undefined
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
  }

  export type OneOptionalCreateInput = {
    id?: string | undefined
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
    many?: ManyRequiredCreateNestedManyWithoutOneInput | undefined
  }

  export type OneOptionalUncheckedCreateInput = {
    id?: string | undefined
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
    many?: ManyRequiredUncheckedCreateNestedManyWithoutOneInput | undefined
  }

  export type OneOptionalUpdateInput = {
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
    many?: ManyRequiredUpdateManyWithoutOneNestedInput | undefined
  }

  export type OneOptionalUncheckedUpdateInput = {
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
    many?: ManyRequiredUncheckedUpdateManyWithoutOneNestedInput | undefined
  }

  export type OneOptionalCreateManyInput = {
    id?: string | undefined
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
  }

  export type OneOptionalUpdateManyMutationInput = {
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
  }

  export type OneOptionalUncheckedUpdateManyInput = {
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
  }

  export type ManyRequiredCreateInput = {
    id?: string | undefined
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
    one?: OneOptionalCreateNestedOneWithoutManyInput | undefined
  }

  export type ManyRequiredUncheckedCreateInput = {
    id?: string | undefined
    oneOptionalId?: string | null | undefined
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
  }

  export type ManyRequiredUpdateInput = {
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
    one?: OneOptionalUpdateOneWithoutManyNestedInput | undefined
  }

  export type ManyRequiredUncheckedUpdateInput = {
    oneOptionalId?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
  }

  export type ManyRequiredCreateManyInput = {
    id?: string | undefined
    oneOptionalId?: string | null | undefined
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
  }

  export type ManyRequiredUpdateManyMutationInput = {
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
  }

  export type ManyRequiredUncheckedUpdateManyInput = {
    oneOptionalId?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
  }

  export type OptionalSide1CreateInput = {
    id?: string | undefined
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
    opti?: OptionalSide2CreateNestedOneWithoutOptiInput | undefined
  }

  export type OptionalSide1UncheckedCreateInput = {
    id?: string | undefined
    optionalSide2Id?: string | null | undefined
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
  }

  export type OptionalSide1UpdateInput = {
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
    opti?: OptionalSide2UpdateOneWithoutOptiNestedInput | undefined
  }

  export type OptionalSide1UncheckedUpdateInput = {
    optionalSide2Id?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
  }

  export type OptionalSide1CreateManyInput = {
    id?: string | undefined
    optionalSide2Id?: string | null | undefined
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
  }

  export type OptionalSide1UpdateManyMutationInput = {
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
  }

  export type OptionalSide1UncheckedUpdateManyInput = {
    optionalSide2Id?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
  }

  export type OptionalSide2CreateInput = {
    id?: string | undefined
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
    opti?: OptionalSide1CreateNestedOneWithoutOptiInput | undefined
  }

  export type OptionalSide2UncheckedCreateInput = {
    id?: string | undefined
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
    opti?: OptionalSide1UncheckedCreateNestedOneWithoutOptiInput | undefined
  }

  export type OptionalSide2UpdateInput = {
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
    opti?: OptionalSide1UpdateOneWithoutOptiNestedInput | undefined
  }

  export type OptionalSide2UncheckedUpdateInput = {
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
    opti?: OptionalSide1UncheckedUpdateOneWithoutOptiNestedInput | undefined
  }

  export type OptionalSide2CreateManyInput = {
    id?: string | undefined
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
  }

  export type OptionalSide2UpdateManyMutationInput = {
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
  }

  export type OptionalSide2UncheckedUpdateManyInput = {
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
  }

  export type ACreateInput = {
    id?: string | undefined
    email: string
    name?: string | null | undefined
    int: number
    sInt: number
    bInt: bigint | number
  }

  export type AUncheckedCreateInput = {
    id?: string | undefined
    email: string
    name?: string | null | undefined
    int: number
    sInt: number
    bInt: bigint | number
  }

  export type AUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string | undefined
    name?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    int?: IntFieldUpdateOperationsInput | number | undefined
    sInt?: IntFieldUpdateOperationsInput | number | undefined
    bInt?: BigIntFieldUpdateOperationsInput | bigint | number | undefined
  }

  export type AUncheckedUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string | undefined
    name?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    int?: IntFieldUpdateOperationsInput | number | undefined
    sInt?: IntFieldUpdateOperationsInput | number | undefined
    bInt?: BigIntFieldUpdateOperationsInput | bigint | number | undefined
  }

  export type ACreateManyInput = {
    id?: string | undefined
    email: string
    name?: string | null | undefined
    int: number
    sInt: number
    bInt: bigint | number
  }

  export type AUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string | undefined
    name?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    int?: IntFieldUpdateOperationsInput | number | undefined
    sInt?: IntFieldUpdateOperationsInput | number | undefined
    bInt?: BigIntFieldUpdateOperationsInput | bigint | number | undefined
  }

  export type AUncheckedUpdateManyInput = {
    email?: StringFieldUpdateOperationsInput | string | undefined
    name?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    int?: IntFieldUpdateOperationsInput | number | undefined
    sInt?: IntFieldUpdateOperationsInput | number | undefined
    bInt?: BigIntFieldUpdateOperationsInput | bigint | number | undefined
  }

  export type BCreateInput = {
    id?: string | undefined
    float: number
    dFloat: number
  }

  export type BUncheckedCreateInput = {
    id?: string | undefined
    float: number
    dFloat: number
  }

  export type BUpdateInput = {
    float?: FloatFieldUpdateOperationsInput | number | undefined
    dFloat?: FloatFieldUpdateOperationsInput | number | undefined
  }

  export type BUncheckedUpdateInput = {
    float?: FloatFieldUpdateOperationsInput | number | undefined
    dFloat?: FloatFieldUpdateOperationsInput | number | undefined
  }

  export type BCreateManyInput = {
    id?: string | undefined
    float: number
    dFloat: number
  }

  export type BUpdateManyMutationInput = {
    float?: FloatFieldUpdateOperationsInput | number | undefined
    dFloat?: FloatFieldUpdateOperationsInput | number | undefined
  }

  export type BUncheckedUpdateManyInput = {
    float?: FloatFieldUpdateOperationsInput | number | undefined
    dFloat?: FloatFieldUpdateOperationsInput | number | undefined
  }

  export type CCreateInput = {
    id?: string | undefined
    char: string
    vChar: string
    text: string
    bit: string
    vBit: string
    uuid: string
  }

  export type CUncheckedCreateInput = {
    id?: string | undefined
    char: string
    vChar: string
    text: string
    bit: string
    vBit: string
    uuid: string
  }

  export type CUpdateInput = {
    char?: StringFieldUpdateOperationsInput | string | undefined
    vChar?: StringFieldUpdateOperationsInput | string | undefined
    text?: StringFieldUpdateOperationsInput | string | undefined
    bit?: StringFieldUpdateOperationsInput | string | undefined
    vBit?: StringFieldUpdateOperationsInput | string | undefined
    uuid?: StringFieldUpdateOperationsInput | string | undefined
  }

  export type CUncheckedUpdateInput = {
    char?: StringFieldUpdateOperationsInput | string | undefined
    vChar?: StringFieldUpdateOperationsInput | string | undefined
    text?: StringFieldUpdateOperationsInput | string | undefined
    bit?: StringFieldUpdateOperationsInput | string | undefined
    vBit?: StringFieldUpdateOperationsInput | string | undefined
    uuid?: StringFieldUpdateOperationsInput | string | undefined
  }

  export type CCreateManyInput = {
    id?: string | undefined
    char: string
    vChar: string
    text: string
    bit: string
    vBit: string
    uuid: string
  }

  export type CUpdateManyMutationInput = {
    char?: StringFieldUpdateOperationsInput | string | undefined
    vChar?: StringFieldUpdateOperationsInput | string | undefined
    text?: StringFieldUpdateOperationsInput | string | undefined
    bit?: StringFieldUpdateOperationsInput | string | undefined
    vBit?: StringFieldUpdateOperationsInput | string | undefined
    uuid?: StringFieldUpdateOperationsInput | string | undefined
  }

  export type CUncheckedUpdateManyInput = {
    char?: StringFieldUpdateOperationsInput | string | undefined
    vChar?: StringFieldUpdateOperationsInput | string | undefined
    text?: StringFieldUpdateOperationsInput | string | undefined
    bit?: StringFieldUpdateOperationsInput | string | undefined
    vBit?: StringFieldUpdateOperationsInput | string | undefined
    uuid?: StringFieldUpdateOperationsInput | string | undefined
  }

  export type DCreateInput = {
    id?: string | undefined
    bool: boolean
    byteA: Buffer
    xml: string
    json: InputJsonValue
    jsonb: InputJsonValue
    list?: DCreatelistInput | Enumerable<number> | undefined
  }

  export type DUncheckedCreateInput = {
    id?: string | undefined
    bool: boolean
    byteA: Buffer
    xml: string
    json: InputJsonValue
    jsonb: InputJsonValue
    list?: DCreatelistInput | Enumerable<number> | undefined
  }

  export type DUpdateInput = {
    bool?: BoolFieldUpdateOperationsInput | boolean | undefined
    byteA?: BytesFieldUpdateOperationsInput | Buffer | undefined
    xml?: StringFieldUpdateOperationsInput | string | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    jsonb?: InputJsonValue | InputJsonValue | undefined
    list?: DUpdatelistInput | Enumerable<number> | undefined
  }

  export type DUncheckedUpdateInput = {
    bool?: BoolFieldUpdateOperationsInput | boolean | undefined
    byteA?: BytesFieldUpdateOperationsInput | Buffer | undefined
    xml?: StringFieldUpdateOperationsInput | string | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    jsonb?: InputJsonValue | InputJsonValue | undefined
    list?: DUpdatelistInput | Enumerable<number> | undefined
  }

  export type DCreateManyInput = {
    id?: string | undefined
    bool: boolean
    byteA: Buffer
    xml: string
    json: InputJsonValue
    jsonb: InputJsonValue
    list?: DCreatelistInput | Enumerable<number> | undefined
  }

  export type DUpdateManyMutationInput = {
    bool?: BoolFieldUpdateOperationsInput | boolean | undefined
    byteA?: BytesFieldUpdateOperationsInput | Buffer | undefined
    xml?: StringFieldUpdateOperationsInput | string | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    jsonb?: InputJsonValue | InputJsonValue | undefined
    list?: DUpdatelistInput | Enumerable<number> | undefined
  }

  export type DUncheckedUpdateManyInput = {
    bool?: BoolFieldUpdateOperationsInput | boolean | undefined
    byteA?: BytesFieldUpdateOperationsInput | Buffer | undefined
    xml?: StringFieldUpdateOperationsInput | string | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    jsonb?: InputJsonValue | InputJsonValue | undefined
    list?: DUpdatelistInput | Enumerable<number> | undefined
  }

  export type ECreateInput = {
    id?: string | undefined
    date: Date | string
    time: Date | string
    ts: Date | string
  }

  export type EUncheckedCreateInput = {
    id?: string | undefined
    date: Date | string
    time: Date | string
    ts: Date | string
  }

  export type EUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string | undefined
    time?: DateTimeFieldUpdateOperationsInput | Date | string | undefined
    ts?: DateTimeFieldUpdateOperationsInput | Date | string | undefined
  }

  export type EUncheckedUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string | undefined
    time?: DateTimeFieldUpdateOperationsInput | Date | string | undefined
    ts?: DateTimeFieldUpdateOperationsInput | Date | string | undefined
  }

  export type ECreateManyInput = {
    id?: string | undefined
    date: Date | string
    time: Date | string
    ts: Date | string
  }

  export type EUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string | undefined
    time?: DateTimeFieldUpdateOperationsInput | Date | string | undefined
    ts?: DateTimeFieldUpdateOperationsInput | Date | string | undefined
  }

  export type EUncheckedUpdateManyInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string | undefined
    time?: DateTimeFieldUpdateOperationsInput | Date | string | undefined
    ts?: DateTimeFieldUpdateOperationsInput | Date | string | undefined
  }

  export type StringFilter = {
    equals?: string | undefined
    in?: Enumerable<string> | undefined
    notIn?: Enumerable<string> | undefined
    lt?: string | undefined
    lte?: string | undefined
    gt?: string | undefined
    gte?: string | undefined
    contains?: string | undefined
    startsWith?: string | undefined
    endsWith?: string | undefined
    mode?: QueryMode | undefined
    not?: NestedStringFilter | string | undefined
  }

  export type DateTimeFilter = {
    equals?: Date | string | undefined
    in?: Enumerable<Date> | Enumerable<string> | undefined
    notIn?: Enumerable<Date> | Enumerable<string> | undefined
    lt?: Date | string | undefined
    lte?: Date | string | undefined
    gt?: Date | string | undefined
    gte?: Date | string | undefined
    not?: NestedDateTimeFilter | Date | string | undefined
  }

  export type StringNullableFilter = {
    equals?: string | null | undefined
    in?: Enumerable<string> | null | undefined
    notIn?: Enumerable<string> | null | undefined
    lt?: string | undefined
    lte?: string | undefined
    gt?: string | undefined
    gte?: string | undefined
    contains?: string | undefined
    startsWith?: string | undefined
    endsWith?: string | undefined
    mode?: QueryMode | undefined
    not?: NestedStringNullableFilter | string | null | undefined
    isSet?: boolean | undefined
  }

  export type BoolFilter = {
    equals?: boolean | undefined
    not?: NestedBoolFilter | boolean | undefined
  }

  export type UserRelationFilter = {
    is?: UserWhereInput | undefined
    isNot?: UserWhereInput | undefined
  }

  export type PostCountOrderByAggregateInput = {
    id?: SortOrder | undefined
    createdAt?: SortOrder | undefined
    title?: SortOrder | undefined
    content?: SortOrder | undefined
    published?: SortOrder | undefined
    authorId?: SortOrder | undefined
  }

  export type PostMaxOrderByAggregateInput = {
    id?: SortOrder | undefined
    createdAt?: SortOrder | undefined
    title?: SortOrder | undefined
    content?: SortOrder | undefined
    published?: SortOrder | undefined
    authorId?: SortOrder | undefined
  }

  export type PostMinOrderByAggregateInput = {
    id?: SortOrder | undefined
    createdAt?: SortOrder | undefined
    title?: SortOrder | undefined
    content?: SortOrder | undefined
    published?: SortOrder | undefined
    authorId?: SortOrder | undefined
  }

  export type StringWithAggregatesFilter = {
    equals?: string | undefined
    in?: Enumerable<string> | undefined
    notIn?: Enumerable<string> | undefined
    lt?: string | undefined
    lte?: string | undefined
    gt?: string | undefined
    gte?: string | undefined
    contains?: string | undefined
    startsWith?: string | undefined
    endsWith?: string | undefined
    mode?: QueryMode | undefined
    not?: NestedStringWithAggregatesFilter | string | undefined
    _count?: NestedIntFilter | undefined
    _min?: NestedStringFilter | undefined
    _max?: NestedStringFilter | undefined
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string | undefined
    in?: Enumerable<Date> | Enumerable<string> | undefined
    notIn?: Enumerable<Date> | Enumerable<string> | undefined
    lt?: Date | string | undefined
    lte?: Date | string | undefined
    gt?: Date | string | undefined
    gte?: Date | string | undefined
    not?: NestedDateTimeWithAggregatesFilter | Date | string | undefined
    _count?: NestedIntFilter | undefined
    _min?: NestedDateTimeFilter | undefined
    _max?: NestedDateTimeFilter | undefined
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null | undefined
    in?: Enumerable<string> | null | undefined
    notIn?: Enumerable<string> | null | undefined
    lt?: string | undefined
    lte?: string | undefined
    gt?: string | undefined
    gte?: string | undefined
    contains?: string | undefined
    startsWith?: string | undefined
    endsWith?: string | undefined
    mode?: QueryMode | undefined
    not?: NestedStringNullableWithAggregatesFilter | string | null | undefined
    _count?: NestedIntNullableFilter | undefined
    _min?: NestedStringNullableFilter | undefined
    _max?: NestedStringNullableFilter | undefined
    isSet?: boolean | undefined
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean | undefined
    not?: NestedBoolWithAggregatesFilter | boolean | undefined
    _count?: NestedIntFilter | undefined
    _min?: NestedBoolFilter | undefined
    _max?: NestedBoolFilter | undefined
  }

  export type IntFilter = {
    equals?: number | undefined
    in?: Enumerable<number> | undefined
    notIn?: Enumerable<number> | undefined
    lt?: number | undefined
    lte?: number | undefined
    gt?: number | undefined
    gte?: number | undefined
    not?: NestedIntFilter | number | undefined
  }

  export type IntNullableFilter = {
    equals?: number | null | undefined
    in?: Enumerable<number> | null | undefined
    notIn?: Enumerable<number> | null | undefined
    lt?: number | undefined
    lte?: number | undefined
    gt?: number | undefined
    gte?: number | undefined
    not?: NestedIntNullableFilter | number | null | undefined
    isSet?: boolean | undefined
  }

  export type FloatFilter = {
    equals?: number | undefined
    in?: Enumerable<number> | undefined
    notIn?: Enumerable<number> | undefined
    lt?: number | undefined
    lte?: number | undefined
    gt?: number | undefined
    gte?: number | undefined
    not?: NestedFloatFilter | number | undefined
  }

  export type FloatNullableFilter = {
    equals?: number | null | undefined
    in?: Enumerable<number> | null | undefined
    notIn?: Enumerable<number> | null | undefined
    lt?: number | undefined
    lte?: number | undefined
    gt?: number | undefined
    gte?: number | undefined
    not?: NestedFloatNullableFilter | number | null | undefined
    isSet?: boolean | undefined
  }
  export type JsonFilter = 
    | PatchUndefined<
        Either<Required<JsonFilterBase>, Exclude<keyof Required<JsonFilterBase>, 'path'>>,
        Required<JsonFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase>, 'path'>>

  export type JsonFilterBase = {
    equals?: InputJsonValue | undefined
    not?: InputJsonValue | undefined
  }
  export type JsonNullableFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase>, Exclude<keyof Required<JsonNullableFilterBase>, 'path'>>,
        Required<JsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase>, 'path'>>

  export type JsonNullableFilterBase = {
    equals?: InputJsonValue | null | undefined
    not?: InputJsonValue | null | undefined
    isSet?: boolean | undefined
  }

  export type EnumABeautifulEnumFilter = {
    equals?: ABeautifulEnum | undefined
    in?: Enumerable<ABeautifulEnum> | undefined
    notIn?: Enumerable<ABeautifulEnum> | undefined
    not?: NestedEnumABeautifulEnumFilter | ABeautifulEnum | undefined
  }

  export type EnumABeautifulEnumNullableFilter = {
    equals?: ABeautifulEnum | null | undefined
    in?: Enumerable<ABeautifulEnum> | null | undefined
    notIn?: Enumerable<ABeautifulEnum> | null | undefined
    not?: NestedEnumABeautifulEnumNullableFilter | ABeautifulEnum | null | undefined
    isSet?: boolean | undefined
  }

  export type BoolNullableFilter = {
    equals?: boolean | null | undefined
    not?: NestedBoolNullableFilter | boolean | null | undefined
    isSet?: boolean | undefined
  }

  export type PostListRelationFilter = {
    every?: PostWhereInput | undefined
    some?: PostWhereInput | undefined
    none?: PostWhereInput | undefined
  }

  export type EmbedHolderRelationFilter = {
    is?: EmbedHolderWhereInput | undefined
    isNot?: EmbedHolderWhereInput | undefined
  }

  export type PostOrderByRelationAggregateInput = {
    _count?: SortOrder | undefined
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder | undefined
    email?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    json?: SortOrder | undefined
    optionalJson?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
    embedHolderId?: SortOrder | undefined
  }

  export type UserAvgOrderByAggregateInput = {
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder | undefined
    email?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
    embedHolderId?: SortOrder | undefined
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder | undefined
    email?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
    embedHolderId?: SortOrder | undefined
  }

  export type UserSumOrderByAggregateInput = {
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
  }

  export type IntWithAggregatesFilter = {
    equals?: number | undefined
    in?: Enumerable<number> | undefined
    notIn?: Enumerable<number> | undefined
    lt?: number | undefined
    lte?: number | undefined
    gt?: number | undefined
    gte?: number | undefined
    not?: NestedIntWithAggregatesFilter | number | undefined
    _count?: NestedIntFilter | undefined
    _avg?: NestedFloatFilter | undefined
    _sum?: NestedIntFilter | undefined
    _min?: NestedIntFilter | undefined
    _max?: NestedIntFilter | undefined
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null | undefined
    in?: Enumerable<number> | null | undefined
    notIn?: Enumerable<number> | null | undefined
    lt?: number | undefined
    lte?: number | undefined
    gt?: number | undefined
    gte?: number | undefined
    not?: NestedIntNullableWithAggregatesFilter | number | null | undefined
    _count?: NestedIntNullableFilter | undefined
    _avg?: NestedFloatNullableFilter | undefined
    _sum?: NestedIntNullableFilter | undefined
    _min?: NestedIntNullableFilter | undefined
    _max?: NestedIntNullableFilter | undefined
    isSet?: boolean | undefined
  }

  export type FloatWithAggregatesFilter = {
    equals?: number | undefined
    in?: Enumerable<number> | undefined
    notIn?: Enumerable<number> | undefined
    lt?: number | undefined
    lte?: number | undefined
    gt?: number | undefined
    gte?: number | undefined
    not?: NestedFloatWithAggregatesFilter | number | undefined
    _count?: NestedIntFilter | undefined
    _avg?: NestedFloatFilter | undefined
    _sum?: NestedFloatFilter | undefined
    _min?: NestedFloatFilter | undefined
    _max?: NestedFloatFilter | undefined
  }

  export type FloatNullableWithAggregatesFilter = {
    equals?: number | null | undefined
    in?: Enumerable<number> | null | undefined
    notIn?: Enumerable<number> | null | undefined
    lt?: number | undefined
    lte?: number | undefined
    gt?: number | undefined
    gte?: number | undefined
    not?: NestedFloatNullableWithAggregatesFilter | number | null | undefined
    _count?: NestedIntNullableFilter | undefined
    _avg?: NestedFloatNullableFilter | undefined
    _sum?: NestedFloatNullableFilter | undefined
    _min?: NestedFloatNullableFilter | undefined
    _max?: NestedFloatNullableFilter | undefined
    isSet?: boolean | undefined
  }
  export type JsonWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase>, Exclude<keyof Required<JsonWithAggregatesFilterBase>, 'path'>>,
        Required<JsonWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase>, 'path'>>

  export type JsonWithAggregatesFilterBase = {
    equals?: InputJsonValue | undefined
    not?: InputJsonValue | undefined
    _count?: NestedIntFilter | undefined
    _min?: NestedJsonFilter | undefined
    _max?: NestedJsonFilter | undefined
  }
  export type JsonNullableWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase = {
    equals?: InputJsonValue | null | undefined
    not?: InputJsonValue | null | undefined
    _count?: NestedIntNullableFilter | undefined
    _min?: NestedJsonNullableFilter | undefined
    _max?: NestedJsonNullableFilter | undefined
    isSet?: boolean | undefined
  }

  export type EnumABeautifulEnumWithAggregatesFilter = {
    equals?: ABeautifulEnum | undefined
    in?: Enumerable<ABeautifulEnum> | undefined
    notIn?: Enumerable<ABeautifulEnum> | undefined
    not?: NestedEnumABeautifulEnumWithAggregatesFilter | ABeautifulEnum | undefined
    _count?: NestedIntFilter | undefined
    _min?: NestedEnumABeautifulEnumFilter | undefined
    _max?: NestedEnumABeautifulEnumFilter | undefined
  }

  export type EnumABeautifulEnumNullableWithAggregatesFilter = {
    equals?: ABeautifulEnum | null | undefined
    in?: Enumerable<ABeautifulEnum> | null | undefined
    notIn?: Enumerable<ABeautifulEnum> | null | undefined
    not?: NestedEnumABeautifulEnumNullableWithAggregatesFilter | ABeautifulEnum | null | undefined
    _count?: NestedIntNullableFilter | undefined
    _min?: NestedEnumABeautifulEnumNullableFilter | undefined
    _max?: NestedEnumABeautifulEnumNullableFilter | undefined
    isSet?: boolean | undefined
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null | undefined
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null | undefined
    _count?: NestedIntNullableFilter | undefined
    _min?: NestedBoolNullableFilter | undefined
    _max?: NestedBoolNullableFilter | undefined
    isSet?: boolean | undefined
  }

  export type EmbedCompositeListFilter = {
    equals?: Enumerable<EmbedObjectEqualityInput> | undefined
    every?: EmbedWhereInput | undefined
    some?: EmbedWhereInput | undefined
    none?: EmbedWhereInput | undefined
    isEmpty?: boolean | undefined
    isSet?: boolean | undefined
  }

  export type EmbedObjectEqualityInput = {
    text: string
    boolean: boolean
    embedEmbedList?: Enumerable<EmbedEmbedObjectEqualityInput> | undefined
    requiredEmbedEmbed: EmbedEmbedObjectEqualityInput
    optionalEmbedEmbed?: EmbedEmbedObjectEqualityInput | null | undefined
    scalarList?: Enumerable<number> | undefined
  }

  export type EmbedCompositeFilter = {
    equals?: EmbedObjectEqualityInput | undefined
    is?: EmbedWhereInput | undefined
    isNot?: EmbedWhereInput | undefined
  }

  export type EmbedNullableCompositeFilter = {
    equals?: EmbedObjectEqualityInput | null | undefined
    is?: EmbedWhereInput | null | undefined
    isNot?: EmbedWhereInput | null | undefined
    isSet?: boolean | undefined
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput | undefined
    some?: UserWhereInput | undefined
    none?: UserWhereInput | undefined
  }

  export type EmbedOrderByCompositeAggregateInput = {
    _count?: SortOrder | undefined
  }

  export type EmbedOrderByInput = {
    text?: SortOrder | undefined
    boolean?: SortOrder | undefined
    embedEmbedList?: EmbedEmbedOrderByCompositeAggregateInput | undefined
    requiredEmbedEmbed?: EmbedEmbedOrderByInput | undefined
    optionalEmbedEmbed?: EmbedEmbedOrderByInput | undefined
    scalarList?: SortOrder | undefined
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder | undefined
  }

  export type EmbedHolderCountOrderByAggregateInput = {
    id?: SortOrder | undefined
    time?: SortOrder | undefined
    text?: SortOrder | undefined
    boolean?: SortOrder | undefined
  }

  export type EmbedHolderMaxOrderByAggregateInput = {
    id?: SortOrder | undefined
    time?: SortOrder | undefined
    text?: SortOrder | undefined
    boolean?: SortOrder | undefined
  }

  export type EmbedHolderMinOrderByAggregateInput = {
    id?: SortOrder | undefined
    time?: SortOrder | undefined
    text?: SortOrder | undefined
    boolean?: SortOrder | undefined
  }

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null | undefined
    has?: string | null | undefined
    hasEvery?: Enumerable<string> | undefined
    hasSome?: Enumerable<string> | undefined
    isEmpty?: boolean | undefined
  }

  export type NListRelationFilter = {
    every?: NWhereInput | undefined
    some?: NWhereInput | undefined
    none?: NWhereInput | undefined
  }

  export type NOrderByRelationAggregateInput = {
    _count?: SortOrder | undefined
  }

  export type MCountOrderByAggregateInput = {
    id?: SortOrder | undefined
    n_ids?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    json?: SortOrder | undefined
    optionalJson?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
  }

  export type MAvgOrderByAggregateInput = {
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
  }

  export type MMaxOrderByAggregateInput = {
    id?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
  }

  export type MMinOrderByAggregateInput = {
    id?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
  }

  export type MSumOrderByAggregateInput = {
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
  }

  export type MListRelationFilter = {
    every?: MWhereInput | undefined
    some?: MWhereInput | undefined
    none?: MWhereInput | undefined
  }

  export type MOrderByRelationAggregateInput = {
    _count?: SortOrder | undefined
  }

  export type NCountOrderByAggregateInput = {
    id?: SortOrder | undefined
    m_ids?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    json?: SortOrder | undefined
    optionalJson?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
  }

  export type NAvgOrderByAggregateInput = {
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
  }

  export type NMaxOrderByAggregateInput = {
    id?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
  }

  export type NMinOrderByAggregateInput = {
    id?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
  }

  export type NSumOrderByAggregateInput = {
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
  }

  export type ManyRequiredListRelationFilter = {
    every?: ManyRequiredWhereInput | undefined
    some?: ManyRequiredWhereInput | undefined
    none?: ManyRequiredWhereInput | undefined
  }

  export type ManyRequiredOrderByRelationAggregateInput = {
    _count?: SortOrder | undefined
  }

  export type OneOptionalCountOrderByAggregateInput = {
    id?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    json?: SortOrder | undefined
    optionalJson?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
  }

  export type OneOptionalAvgOrderByAggregateInput = {
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
  }

  export type OneOptionalMaxOrderByAggregateInput = {
    id?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
  }

  export type OneOptionalMinOrderByAggregateInput = {
    id?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
  }

  export type OneOptionalSumOrderByAggregateInput = {
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
  }

  export type OneOptionalRelationFilter = {
    is?: OneOptionalWhereInput | null | undefined
    isNot?: OneOptionalWhereInput | null | undefined
  }

  export type ManyRequiredCountOrderByAggregateInput = {
    id?: SortOrder | undefined
    oneOptionalId?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    json?: SortOrder | undefined
    optionalJson?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
  }

  export type ManyRequiredAvgOrderByAggregateInput = {
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
  }

  export type ManyRequiredMaxOrderByAggregateInput = {
    id?: SortOrder | undefined
    oneOptionalId?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
  }

  export type ManyRequiredMinOrderByAggregateInput = {
    id?: SortOrder | undefined
    oneOptionalId?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
  }

  export type ManyRequiredSumOrderByAggregateInput = {
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
  }

  export type OptionalSide2RelationFilter = {
    is?: OptionalSide2WhereInput | null | undefined
    isNot?: OptionalSide2WhereInput | null | undefined
  }

  export type OptionalSide1CountOrderByAggregateInput = {
    id?: SortOrder | undefined
    optionalSide2Id?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    json?: SortOrder | undefined
    optionalJson?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
  }

  export type OptionalSide1AvgOrderByAggregateInput = {
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
  }

  export type OptionalSide1MaxOrderByAggregateInput = {
    id?: SortOrder | undefined
    optionalSide2Id?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
  }

  export type OptionalSide1MinOrderByAggregateInput = {
    id?: SortOrder | undefined
    optionalSide2Id?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
  }

  export type OptionalSide1SumOrderByAggregateInput = {
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
  }

  export type OptionalSide1RelationFilter = {
    is?: OptionalSide1WhereInput | null | undefined
    isNot?: OptionalSide1WhereInput | null | undefined
  }

  export type OptionalSide2CountOrderByAggregateInput = {
    id?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    json?: SortOrder | undefined
    optionalJson?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
  }

  export type OptionalSide2AvgOrderByAggregateInput = {
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
  }

  export type OptionalSide2MaxOrderByAggregateInput = {
    id?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
  }

  export type OptionalSide2MinOrderByAggregateInput = {
    id?: SortOrder | undefined
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
    string?: SortOrder | undefined
    optionalString?: SortOrder | undefined
    enum?: SortOrder | undefined
    optionalEnum?: SortOrder | undefined
    boolean?: SortOrder | undefined
    optionalBoolean?: SortOrder | undefined
  }

  export type OptionalSide2SumOrderByAggregateInput = {
    int?: SortOrder | undefined
    optionalInt?: SortOrder | undefined
    float?: SortOrder | undefined
    optionalFloat?: SortOrder | undefined
  }

  export type BigIntFilter = {
    equals?: bigint | number | undefined
    in?: Enumerable<bigint> | Enumerable<number> | undefined
    notIn?: Enumerable<bigint> | Enumerable<number> | undefined
    lt?: bigint | number | undefined
    lte?: bigint | number | undefined
    gt?: bigint | number | undefined
    gte?: bigint | number | undefined
    not?: NestedBigIntFilter | bigint | number | undefined
  }

  export type ACountOrderByAggregateInput = {
    id?: SortOrder | undefined
    email?: SortOrder | undefined
    name?: SortOrder | undefined
    int?: SortOrder | undefined
    sInt?: SortOrder | undefined
    bInt?: SortOrder | undefined
  }

  export type AAvgOrderByAggregateInput = {
    int?: SortOrder | undefined
    sInt?: SortOrder | undefined
    bInt?: SortOrder | undefined
  }

  export type AMaxOrderByAggregateInput = {
    id?: SortOrder | undefined
    email?: SortOrder | undefined
    name?: SortOrder | undefined
    int?: SortOrder | undefined
    sInt?: SortOrder | undefined
    bInt?: SortOrder | undefined
  }

  export type AMinOrderByAggregateInput = {
    id?: SortOrder | undefined
    email?: SortOrder | undefined
    name?: SortOrder | undefined
    int?: SortOrder | undefined
    sInt?: SortOrder | undefined
    bInt?: SortOrder | undefined
  }

  export type ASumOrderByAggregateInput = {
    int?: SortOrder | undefined
    sInt?: SortOrder | undefined
    bInt?: SortOrder | undefined
  }

  export type BigIntWithAggregatesFilter = {
    equals?: bigint | number | undefined
    in?: Enumerable<bigint> | Enumerable<number> | undefined
    notIn?: Enumerable<bigint> | Enumerable<number> | undefined
    lt?: bigint | number | undefined
    lte?: bigint | number | undefined
    gt?: bigint | number | undefined
    gte?: bigint | number | undefined
    not?: NestedBigIntWithAggregatesFilter | bigint | number | undefined
    _count?: NestedIntFilter | undefined
    _avg?: NestedFloatFilter | undefined
    _sum?: NestedBigIntFilter | undefined
    _min?: NestedBigIntFilter | undefined
    _max?: NestedBigIntFilter | undefined
  }

  export type BCountOrderByAggregateInput = {
    id?: SortOrder | undefined
    float?: SortOrder | undefined
    dFloat?: SortOrder | undefined
  }

  export type BAvgOrderByAggregateInput = {
    float?: SortOrder | undefined
    dFloat?: SortOrder | undefined
  }

  export type BMaxOrderByAggregateInput = {
    id?: SortOrder | undefined
    float?: SortOrder | undefined
    dFloat?: SortOrder | undefined
  }

  export type BMinOrderByAggregateInput = {
    id?: SortOrder | undefined
    float?: SortOrder | undefined
    dFloat?: SortOrder | undefined
  }

  export type BSumOrderByAggregateInput = {
    float?: SortOrder | undefined
    dFloat?: SortOrder | undefined
  }

  export type CCountOrderByAggregateInput = {
    id?: SortOrder | undefined
    char?: SortOrder | undefined
    vChar?: SortOrder | undefined
    text?: SortOrder | undefined
    bit?: SortOrder | undefined
    vBit?: SortOrder | undefined
    uuid?: SortOrder | undefined
  }

  export type CMaxOrderByAggregateInput = {
    id?: SortOrder | undefined
    char?: SortOrder | undefined
    vChar?: SortOrder | undefined
    text?: SortOrder | undefined
    bit?: SortOrder | undefined
    vBit?: SortOrder | undefined
    uuid?: SortOrder | undefined
  }

  export type CMinOrderByAggregateInput = {
    id?: SortOrder | undefined
    char?: SortOrder | undefined
    vChar?: SortOrder | undefined
    text?: SortOrder | undefined
    bit?: SortOrder | undefined
    vBit?: SortOrder | undefined
    uuid?: SortOrder | undefined
  }

  export type BytesFilter = {
    equals?: Buffer | undefined
    in?: Enumerable<Buffer> | undefined
    notIn?: Enumerable<Buffer> | undefined
    not?: NestedBytesFilter | Buffer | undefined
  }

  export type IntNullableListFilter = {
    equals?: Enumerable<number> | null | undefined
    has?: number | null | undefined
    hasEvery?: Enumerable<number> | undefined
    hasSome?: Enumerable<number> | undefined
    isEmpty?: boolean | undefined
  }

  export type DCountOrderByAggregateInput = {
    id?: SortOrder | undefined
    bool?: SortOrder | undefined
    byteA?: SortOrder | undefined
    xml?: SortOrder | undefined
    json?: SortOrder | undefined
    jsonb?: SortOrder | undefined
    list?: SortOrder | undefined
  }

  export type DAvgOrderByAggregateInput = {
    list?: SortOrder | undefined
  }

  export type DMaxOrderByAggregateInput = {
    id?: SortOrder | undefined
    bool?: SortOrder | undefined
    byteA?: SortOrder | undefined
    xml?: SortOrder | undefined
  }

  export type DMinOrderByAggregateInput = {
    id?: SortOrder | undefined
    bool?: SortOrder | undefined
    byteA?: SortOrder | undefined
    xml?: SortOrder | undefined
  }

  export type DSumOrderByAggregateInput = {
    list?: SortOrder | undefined
  }

  export type BytesWithAggregatesFilter = {
    equals?: Buffer | undefined
    in?: Enumerable<Buffer> | undefined
    notIn?: Enumerable<Buffer> | undefined
    not?: NestedBytesWithAggregatesFilter | Buffer | undefined
    _count?: NestedIntFilter | undefined
    _min?: NestedBytesFilter | undefined
    _max?: NestedBytesFilter | undefined
  }

  export type ECountOrderByAggregateInput = {
    id?: SortOrder | undefined
    date?: SortOrder | undefined
    time?: SortOrder | undefined
    ts?: SortOrder | undefined
  }

  export type EMaxOrderByAggregateInput = {
    id?: SortOrder | undefined
    date?: SortOrder | undefined
    time?: SortOrder | undefined
    ts?: SortOrder | undefined
  }

  export type EMinOrderByAggregateInput = {
    id?: SortOrder | undefined
    date?: SortOrder | undefined
    time?: SortOrder | undefined
    ts?: SortOrder | undefined
  }

  export type UserCreateNestedOneWithoutPostsInput = {
    create?: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput> | undefined
    connectOrCreate?: UserCreateOrConnectWithoutPostsInput | undefined
    connect?: UserWhereUniqueInput | undefined
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string | undefined
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string | undefined
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null | undefined
    unset?: boolean | undefined
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean | undefined
  }

  export type UserUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput> | undefined
    connectOrCreate?: UserCreateOrConnectWithoutPostsInput | undefined
    upsert?: UserUpsertWithoutPostsInput | undefined
    connect?: UserWhereUniqueInput | undefined
    update?: XOR<UserUpdateWithoutPostsInput, UserUncheckedUpdateWithoutPostsInput> | undefined
  }

  export type PostCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<PostCreateWithoutAuthorInput>, Enumerable<PostUncheckedCreateWithoutAuthorInput>> | undefined
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutAuthorInput> | undefined
    createMany?: PostCreateManyAuthorInputEnvelope | undefined
    connect?: Enumerable<PostWhereUniqueInput> | undefined
  }

  export type EmbedHolderCreateNestedOneWithoutUserInput = {
    create?: XOR<EmbedHolderCreateWithoutUserInput, EmbedHolderUncheckedCreateWithoutUserInput> | undefined
    connectOrCreate?: EmbedHolderCreateOrConnectWithoutUserInput | undefined
    connect?: EmbedHolderWhereUniqueInput | undefined
  }

  export type PostUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<PostCreateWithoutAuthorInput>, Enumerable<PostUncheckedCreateWithoutAuthorInput>> | undefined
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutAuthorInput> | undefined
    createMany?: PostCreateManyAuthorInputEnvelope | undefined
    connect?: Enumerable<PostWhereUniqueInput> | undefined
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number | undefined
    increment?: number | undefined
    decrement?: number | undefined
    multiply?: number | undefined
    divide?: number | undefined
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null | undefined
    increment?: number | undefined
    decrement?: number | undefined
    multiply?: number | undefined
    divide?: number | undefined
    unset?: boolean | undefined
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number | undefined
    increment?: number | undefined
    decrement?: number | undefined
    multiply?: number | undefined
    divide?: number | undefined
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null | undefined
    increment?: number | undefined
    decrement?: number | undefined
    multiply?: number | undefined
    divide?: number | undefined
    unset?: boolean | undefined
  }

  export type EnumABeautifulEnumFieldUpdateOperationsInput = {
    set?: ABeautifulEnum | undefined
  }

  export type NullableEnumABeautifulEnumFieldUpdateOperationsInput = {
    set?: ABeautifulEnum | null | undefined
    unset?: boolean | undefined
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null | undefined
    unset?: boolean | undefined
  }

  export type PostUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<PostCreateWithoutAuthorInput>, Enumerable<PostUncheckedCreateWithoutAuthorInput>> | undefined
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutAuthorInput> | undefined
    upsert?: Enumerable<PostUpsertWithWhereUniqueWithoutAuthorInput> | undefined
    createMany?: PostCreateManyAuthorInputEnvelope | undefined
    set?: Enumerable<PostWhereUniqueInput> | undefined
    disconnect?: Enumerable<PostWhereUniqueInput> | undefined
    delete?: Enumerable<PostWhereUniqueInput> | undefined
    connect?: Enumerable<PostWhereUniqueInput> | undefined
    update?: Enumerable<PostUpdateWithWhereUniqueWithoutAuthorInput> | undefined
    updateMany?: Enumerable<PostUpdateManyWithWhereWithoutAuthorInput> | undefined
    deleteMany?: Enumerable<PostScalarWhereInput> | undefined
  }

  export type EmbedHolderUpdateOneRequiredWithoutUserNestedInput = {
    create?: XOR<EmbedHolderCreateWithoutUserInput, EmbedHolderUncheckedCreateWithoutUserInput> | undefined
    connectOrCreate?: EmbedHolderCreateOrConnectWithoutUserInput | undefined
    upsert?: EmbedHolderUpsertWithoutUserInput | undefined
    connect?: EmbedHolderWhereUniqueInput | undefined
    update?: XOR<EmbedHolderUpdateWithoutUserInput, EmbedHolderUncheckedUpdateWithoutUserInput> | undefined
  }

  export type PostUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<PostCreateWithoutAuthorInput>, Enumerable<PostUncheckedCreateWithoutAuthorInput>> | undefined
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutAuthorInput> | undefined
    upsert?: Enumerable<PostUpsertWithWhereUniqueWithoutAuthorInput> | undefined
    createMany?: PostCreateManyAuthorInputEnvelope | undefined
    set?: Enumerable<PostWhereUniqueInput> | undefined
    disconnect?: Enumerable<PostWhereUniqueInput> | undefined
    delete?: Enumerable<PostWhereUniqueInput> | undefined
    connect?: Enumerable<PostWhereUniqueInput> | undefined
    update?: Enumerable<PostUpdateWithWhereUniqueWithoutAuthorInput> | undefined
    updateMany?: Enumerable<PostUpdateManyWithWhereWithoutAuthorInput> | undefined
    deleteMany?: Enumerable<PostScalarWhereInput> | undefined
  }

  export type EmbedListCreateEnvelopeInput = {
    set?: Enumerable<EmbedCreateInput> | undefined
  }

  export type EmbedCreateInput = {
    text: string
    boolean: boolean
    embedEmbedList?: Enumerable<EmbedEmbedCreateInput> | undefined
    requiredEmbedEmbed: EmbedEmbedCreateInput
    optionalEmbedEmbed?: EmbedEmbedCreateInput | null | undefined
    scalarList?: EmbedCreatescalarListInput | Enumerable<number> | undefined
  }

  export type EmbedCreateEnvelopeInput = {
    set?: EmbedCreateInput | undefined
  }

  export type EmbedNullableCreateEnvelopeInput = {
    set?: EmbedCreateInput | null | undefined
  }

  export type UserCreateNestedManyWithoutEmbedHolderInput = {
    create?: XOR<Enumerable<UserCreateWithoutEmbedHolderInput>, Enumerable<UserUncheckedCreateWithoutEmbedHolderInput>> | undefined
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutEmbedHolderInput> | undefined
    createMany?: UserCreateManyEmbedHolderInputEnvelope | undefined
    connect?: Enumerable<UserWhereUniqueInput> | undefined
  }

  export type UserUncheckedCreateNestedManyWithoutEmbedHolderInput = {
    create?: XOR<Enumerable<UserCreateWithoutEmbedHolderInput>, Enumerable<UserUncheckedCreateWithoutEmbedHolderInput>> | undefined
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutEmbedHolderInput> | undefined
    createMany?: UserCreateManyEmbedHolderInputEnvelope | undefined
    connect?: Enumerable<UserWhereUniqueInput> | undefined
  }

  export type EmbedListUpdateEnvelopeInput = {
    set?: Enumerable<EmbedCreateInput> | undefined
    push?: Enumerable<EmbedCreateInput> | undefined
    updateMany?: EmbedUpdateManyInput | undefined
    deleteMany?: EmbedDeleteManyInput | undefined
  }

  export type EmbedUpdateEnvelopeInput = {
    set?: EmbedCreateInput | undefined
    update?: EmbedUpdateInput | undefined
  }

  export type EmbedNullableUpdateEnvelopeInput = {
    set?: EmbedCreateInput | null | undefined
    upsert?: EmbedUpsertInput | undefined
    unset?: boolean | undefined
  }

  export type UserUpdateManyWithoutEmbedHolderNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutEmbedHolderInput>, Enumerable<UserUncheckedCreateWithoutEmbedHolderInput>> | undefined
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutEmbedHolderInput> | undefined
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutEmbedHolderInput> | undefined
    createMany?: UserCreateManyEmbedHolderInputEnvelope | undefined
    set?: Enumerable<UserWhereUniqueInput> | undefined
    disconnect?: Enumerable<UserWhereUniqueInput> | undefined
    delete?: Enumerable<UserWhereUniqueInput> | undefined
    connect?: Enumerable<UserWhereUniqueInput> | undefined
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutEmbedHolderInput> | undefined
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutEmbedHolderInput> | undefined
    deleteMany?: Enumerable<UserScalarWhereInput> | undefined
  }

  export type UserUncheckedUpdateManyWithoutEmbedHolderNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutEmbedHolderInput>, Enumerable<UserUncheckedCreateWithoutEmbedHolderInput>> | undefined
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutEmbedHolderInput> | undefined
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutEmbedHolderInput> | undefined
    createMany?: UserCreateManyEmbedHolderInputEnvelope | undefined
    set?: Enumerable<UserWhereUniqueInput> | undefined
    disconnect?: Enumerable<UserWhereUniqueInput> | undefined
    delete?: Enumerable<UserWhereUniqueInput> | undefined
    connect?: Enumerable<UserWhereUniqueInput> | undefined
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutEmbedHolderInput> | undefined
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutEmbedHolderInput> | undefined
    deleteMany?: Enumerable<UserScalarWhereInput> | undefined
  }

  export type NCreateNestedManyWithoutMInput = {
    create?: XOR<Enumerable<NCreateWithoutMInput>, Enumerable<NUncheckedCreateWithoutMInput>> | undefined
    connectOrCreate?: Enumerable<NCreateOrConnectWithoutMInput> | undefined
    connect?: Enumerable<NWhereUniqueInput> | undefined
  }

  export type MCreaten_idsInput = {
    set: Enumerable<string>
  }

  export type NUncheckedCreateNestedManyWithoutMInput = {
    create?: XOR<Enumerable<NCreateWithoutMInput>, Enumerable<NUncheckedCreateWithoutMInput>> | undefined
    connectOrCreate?: Enumerable<NCreateOrConnectWithoutMInput> | undefined
    connect?: Enumerable<NWhereUniqueInput> | undefined
  }

  export type NUpdateManyWithoutMNestedInput = {
    create?: XOR<Enumerable<NCreateWithoutMInput>, Enumerable<NUncheckedCreateWithoutMInput>> | undefined
    connectOrCreate?: Enumerable<NCreateOrConnectWithoutMInput> | undefined
    upsert?: Enumerable<NUpsertWithWhereUniqueWithoutMInput> | undefined
    set?: Enumerable<NWhereUniqueInput> | undefined
    disconnect?: Enumerable<NWhereUniqueInput> | undefined
    delete?: Enumerable<NWhereUniqueInput> | undefined
    connect?: Enumerable<NWhereUniqueInput> | undefined
    update?: Enumerable<NUpdateWithWhereUniqueWithoutMInput> | undefined
    updateMany?: Enumerable<NUpdateManyWithWhereWithoutMInput> | undefined
    deleteMany?: Enumerable<NScalarWhereInput> | undefined
  }

  export type MUpdaten_idsInput = {
    set?: Enumerable<string> | undefined
    push?: string | Enumerable<string> | undefined
  }

  export type NUncheckedUpdateManyWithoutMNestedInput = {
    create?: XOR<Enumerable<NCreateWithoutMInput>, Enumerable<NUncheckedCreateWithoutMInput>> | undefined
    connectOrCreate?: Enumerable<NCreateOrConnectWithoutMInput> | undefined
    upsert?: Enumerable<NUpsertWithWhereUniqueWithoutMInput> | undefined
    set?: Enumerable<NWhereUniqueInput> | undefined
    disconnect?: Enumerable<NWhereUniqueInput> | undefined
    delete?: Enumerable<NWhereUniqueInput> | undefined
    connect?: Enumerable<NWhereUniqueInput> | undefined
    update?: Enumerable<NUpdateWithWhereUniqueWithoutMInput> | undefined
    updateMany?: Enumerable<NUpdateManyWithWhereWithoutMInput> | undefined
    deleteMany?: Enumerable<NScalarWhereInput> | undefined
  }

  export type MCreateNestedManyWithoutNInput = {
    create?: XOR<Enumerable<MCreateWithoutNInput>, Enumerable<MUncheckedCreateWithoutNInput>> | undefined
    connectOrCreate?: Enumerable<MCreateOrConnectWithoutNInput> | undefined
    connect?: Enumerable<MWhereUniqueInput> | undefined
  }

  export type NCreatem_idsInput = {
    set: Enumerable<string>
  }

  export type MUncheckedCreateNestedManyWithoutNInput = {
    create?: XOR<Enumerable<MCreateWithoutNInput>, Enumerable<MUncheckedCreateWithoutNInput>> | undefined
    connectOrCreate?: Enumerable<MCreateOrConnectWithoutNInput> | undefined
    connect?: Enumerable<MWhereUniqueInput> | undefined
  }

  export type MUpdateManyWithoutNNestedInput = {
    create?: XOR<Enumerable<MCreateWithoutNInput>, Enumerable<MUncheckedCreateWithoutNInput>> | undefined
    connectOrCreate?: Enumerable<MCreateOrConnectWithoutNInput> | undefined
    upsert?: Enumerable<MUpsertWithWhereUniqueWithoutNInput> | undefined
    set?: Enumerable<MWhereUniqueInput> | undefined
    disconnect?: Enumerable<MWhereUniqueInput> | undefined
    delete?: Enumerable<MWhereUniqueInput> | undefined
    connect?: Enumerable<MWhereUniqueInput> | undefined
    update?: Enumerable<MUpdateWithWhereUniqueWithoutNInput> | undefined
    updateMany?: Enumerable<MUpdateManyWithWhereWithoutNInput> | undefined
    deleteMany?: Enumerable<MScalarWhereInput> | undefined
  }

  export type NUpdatem_idsInput = {
    set?: Enumerable<string> | undefined
    push?: string | Enumerable<string> | undefined
  }

  export type MUncheckedUpdateManyWithoutNNestedInput = {
    create?: XOR<Enumerable<MCreateWithoutNInput>, Enumerable<MUncheckedCreateWithoutNInput>> | undefined
    connectOrCreate?: Enumerable<MCreateOrConnectWithoutNInput> | undefined
    upsert?: Enumerable<MUpsertWithWhereUniqueWithoutNInput> | undefined
    set?: Enumerable<MWhereUniqueInput> | undefined
    disconnect?: Enumerable<MWhereUniqueInput> | undefined
    delete?: Enumerable<MWhereUniqueInput> | undefined
    connect?: Enumerable<MWhereUniqueInput> | undefined
    update?: Enumerable<MUpdateWithWhereUniqueWithoutNInput> | undefined
    updateMany?: Enumerable<MUpdateManyWithWhereWithoutNInput> | undefined
    deleteMany?: Enumerable<MScalarWhereInput> | undefined
  }

  export type ManyRequiredCreateNestedManyWithoutOneInput = {
    create?: XOR<Enumerable<ManyRequiredCreateWithoutOneInput>, Enumerable<ManyRequiredUncheckedCreateWithoutOneInput>> | undefined
    connectOrCreate?: Enumerable<ManyRequiredCreateOrConnectWithoutOneInput> | undefined
    createMany?: ManyRequiredCreateManyOneInputEnvelope | undefined
    connect?: Enumerable<ManyRequiredWhereUniqueInput> | undefined
  }

  export type ManyRequiredUncheckedCreateNestedManyWithoutOneInput = {
    create?: XOR<Enumerable<ManyRequiredCreateWithoutOneInput>, Enumerable<ManyRequiredUncheckedCreateWithoutOneInput>> | undefined
    connectOrCreate?: Enumerable<ManyRequiredCreateOrConnectWithoutOneInput> | undefined
    createMany?: ManyRequiredCreateManyOneInputEnvelope | undefined
    connect?: Enumerable<ManyRequiredWhereUniqueInput> | undefined
  }

  export type ManyRequiredUpdateManyWithoutOneNestedInput = {
    create?: XOR<Enumerable<ManyRequiredCreateWithoutOneInput>, Enumerable<ManyRequiredUncheckedCreateWithoutOneInput>> | undefined
    connectOrCreate?: Enumerable<ManyRequiredCreateOrConnectWithoutOneInput> | undefined
    upsert?: Enumerable<ManyRequiredUpsertWithWhereUniqueWithoutOneInput> | undefined
    createMany?: ManyRequiredCreateManyOneInputEnvelope | undefined
    set?: Enumerable<ManyRequiredWhereUniqueInput> | undefined
    disconnect?: Enumerable<ManyRequiredWhereUniqueInput> | undefined
    delete?: Enumerable<ManyRequiredWhereUniqueInput> | undefined
    connect?: Enumerable<ManyRequiredWhereUniqueInput> | undefined
    update?: Enumerable<ManyRequiredUpdateWithWhereUniqueWithoutOneInput> | undefined
    updateMany?: Enumerable<ManyRequiredUpdateManyWithWhereWithoutOneInput> | undefined
    deleteMany?: Enumerable<ManyRequiredScalarWhereInput> | undefined
  }

  export type ManyRequiredUncheckedUpdateManyWithoutOneNestedInput = {
    create?: XOR<Enumerable<ManyRequiredCreateWithoutOneInput>, Enumerable<ManyRequiredUncheckedCreateWithoutOneInput>> | undefined
    connectOrCreate?: Enumerable<ManyRequiredCreateOrConnectWithoutOneInput> | undefined
    upsert?: Enumerable<ManyRequiredUpsertWithWhereUniqueWithoutOneInput> | undefined
    createMany?: ManyRequiredCreateManyOneInputEnvelope | undefined
    set?: Enumerable<ManyRequiredWhereUniqueInput> | undefined
    disconnect?: Enumerable<ManyRequiredWhereUniqueInput> | undefined
    delete?: Enumerable<ManyRequiredWhereUniqueInput> | undefined
    connect?: Enumerable<ManyRequiredWhereUniqueInput> | undefined
    update?: Enumerable<ManyRequiredUpdateWithWhereUniqueWithoutOneInput> | undefined
    updateMany?: Enumerable<ManyRequiredUpdateManyWithWhereWithoutOneInput> | undefined
    deleteMany?: Enumerable<ManyRequiredScalarWhereInput> | undefined
  }

  export type OneOptionalCreateNestedOneWithoutManyInput = {
    create?: XOR<OneOptionalCreateWithoutManyInput, OneOptionalUncheckedCreateWithoutManyInput> | undefined
    connectOrCreate?: OneOptionalCreateOrConnectWithoutManyInput | undefined
    connect?: OneOptionalWhereUniqueInput | undefined
  }

  export type OneOptionalUpdateOneWithoutManyNestedInput = {
    create?: XOR<OneOptionalCreateWithoutManyInput, OneOptionalUncheckedCreateWithoutManyInput> | undefined
    connectOrCreate?: OneOptionalCreateOrConnectWithoutManyInput | undefined
    upsert?: OneOptionalUpsertWithoutManyInput | undefined
    disconnect?: boolean | undefined
    delete?: boolean | undefined
    connect?: OneOptionalWhereUniqueInput | undefined
    update?: XOR<OneOptionalUpdateWithoutManyInput, OneOptionalUncheckedUpdateWithoutManyInput> | undefined
  }

  export type OptionalSide2CreateNestedOneWithoutOptiInput = {
    create?: XOR<OptionalSide2CreateWithoutOptiInput, OptionalSide2UncheckedCreateWithoutOptiInput> | undefined
    connectOrCreate?: OptionalSide2CreateOrConnectWithoutOptiInput | undefined
    connect?: OptionalSide2WhereUniqueInput | undefined
  }

  export type OptionalSide2UpdateOneWithoutOptiNestedInput = {
    create?: XOR<OptionalSide2CreateWithoutOptiInput, OptionalSide2UncheckedCreateWithoutOptiInput> | undefined
    connectOrCreate?: OptionalSide2CreateOrConnectWithoutOptiInput | undefined
    upsert?: OptionalSide2UpsertWithoutOptiInput | undefined
    disconnect?: boolean | undefined
    delete?: boolean | undefined
    connect?: OptionalSide2WhereUniqueInput | undefined
    update?: XOR<OptionalSide2UpdateWithoutOptiInput, OptionalSide2UncheckedUpdateWithoutOptiInput> | undefined
  }

  export type OptionalSide1CreateNestedOneWithoutOptiInput = {
    create?: XOR<OptionalSide1CreateWithoutOptiInput, OptionalSide1UncheckedCreateWithoutOptiInput> | undefined
    connectOrCreate?: OptionalSide1CreateOrConnectWithoutOptiInput | undefined
    connect?: OptionalSide1WhereUniqueInput | undefined
  }

  export type OptionalSide1UncheckedCreateNestedOneWithoutOptiInput = {
    create?: XOR<OptionalSide1CreateWithoutOptiInput, OptionalSide1UncheckedCreateWithoutOptiInput> | undefined
    connectOrCreate?: OptionalSide1CreateOrConnectWithoutOptiInput | undefined
    connect?: OptionalSide1WhereUniqueInput | undefined
  }

  export type OptionalSide1UpdateOneWithoutOptiNestedInput = {
    create?: XOR<OptionalSide1CreateWithoutOptiInput, OptionalSide1UncheckedCreateWithoutOptiInput> | undefined
    connectOrCreate?: OptionalSide1CreateOrConnectWithoutOptiInput | undefined
    upsert?: OptionalSide1UpsertWithoutOptiInput | undefined
    disconnect?: boolean | undefined
    delete?: boolean | undefined
    connect?: OptionalSide1WhereUniqueInput | undefined
    update?: XOR<OptionalSide1UpdateWithoutOptiInput, OptionalSide1UncheckedUpdateWithoutOptiInput> | undefined
  }

  export type OptionalSide1UncheckedUpdateOneWithoutOptiNestedInput = {
    create?: XOR<OptionalSide1CreateWithoutOptiInput, OptionalSide1UncheckedCreateWithoutOptiInput> | undefined
    connectOrCreate?: OptionalSide1CreateOrConnectWithoutOptiInput | undefined
    upsert?: OptionalSide1UpsertWithoutOptiInput | undefined
    disconnect?: boolean | undefined
    delete?: boolean | undefined
    connect?: OptionalSide1WhereUniqueInput | undefined
    update?: XOR<OptionalSide1UpdateWithoutOptiInput, OptionalSide1UncheckedUpdateWithoutOptiInput> | undefined
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number | undefined
    increment?: bigint | number | undefined
    decrement?: bigint | number | undefined
    multiply?: bigint | number | undefined
    divide?: bigint | number | undefined
  }

  export type DCreatelistInput = {
    set: Enumerable<number>
  }

  export type BytesFieldUpdateOperationsInput = {
    set?: Buffer | undefined
  }

  export type DUpdatelistInput = {
    set?: Enumerable<number> | undefined
    push?: number | Enumerable<number> | undefined
  }

  export type NestedStringFilter = {
    equals?: string | undefined
    in?: Enumerable<string> | undefined
    notIn?: Enumerable<string> | undefined
    lt?: string | undefined
    lte?: string | undefined
    gt?: string | undefined
    gte?: string | undefined
    contains?: string | undefined
    startsWith?: string | undefined
    endsWith?: string | undefined
    not?: NestedStringFilter | string | undefined
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string | undefined
    in?: Enumerable<Date> | Enumerable<string> | undefined
    notIn?: Enumerable<Date> | Enumerable<string> | undefined
    lt?: Date | string | undefined
    lte?: Date | string | undefined
    gt?: Date | string | undefined
    gte?: Date | string | undefined
    not?: NestedDateTimeFilter | Date | string | undefined
  }

  export type NestedStringNullableFilter = {
    equals?: string | null | undefined
    in?: Enumerable<string> | null | undefined
    notIn?: Enumerable<string> | null | undefined
    lt?: string | undefined
    lte?: string | undefined
    gt?: string | undefined
    gte?: string | undefined
    contains?: string | undefined
    startsWith?: string | undefined
    endsWith?: string | undefined
    not?: NestedStringNullableFilter | string | null | undefined
    isSet?: boolean | undefined
  }

  export type NestedBoolFilter = {
    equals?: boolean | undefined
    not?: NestedBoolFilter | boolean | undefined
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string | undefined
    in?: Enumerable<string> | undefined
    notIn?: Enumerable<string> | undefined
    lt?: string | undefined
    lte?: string | undefined
    gt?: string | undefined
    gte?: string | undefined
    contains?: string | undefined
    startsWith?: string | undefined
    endsWith?: string | undefined
    not?: NestedStringWithAggregatesFilter | string | undefined
    _count?: NestedIntFilter | undefined
    _min?: NestedStringFilter | undefined
    _max?: NestedStringFilter | undefined
  }

  export type NestedIntFilter = {
    equals?: number | undefined
    in?: Enumerable<number> | undefined
    notIn?: Enumerable<number> | undefined
    lt?: number | undefined
    lte?: number | undefined
    gt?: number | undefined
    gte?: number | undefined
    not?: NestedIntFilter | number | undefined
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string | undefined
    in?: Enumerable<Date> | Enumerable<string> | undefined
    notIn?: Enumerable<Date> | Enumerable<string> | undefined
    lt?: Date | string | undefined
    lte?: Date | string | undefined
    gt?: Date | string | undefined
    gte?: Date | string | undefined
    not?: NestedDateTimeWithAggregatesFilter | Date | string | undefined
    _count?: NestedIntFilter | undefined
    _min?: NestedDateTimeFilter | undefined
    _max?: NestedDateTimeFilter | undefined
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null | undefined
    in?: Enumerable<string> | null | undefined
    notIn?: Enumerable<string> | null | undefined
    lt?: string | undefined
    lte?: string | undefined
    gt?: string | undefined
    gte?: string | undefined
    contains?: string | undefined
    startsWith?: string | undefined
    endsWith?: string | undefined
    not?: NestedStringNullableWithAggregatesFilter | string | null | undefined
    _count?: NestedIntNullableFilter | undefined
    _min?: NestedStringNullableFilter | undefined
    _max?: NestedStringNullableFilter | undefined
    isSet?: boolean | undefined
  }

  export type NestedIntNullableFilter = {
    equals?: number | null | undefined
    in?: Enumerable<number> | null | undefined
    notIn?: Enumerable<number> | null | undefined
    lt?: number | undefined
    lte?: number | undefined
    gt?: number | undefined
    gte?: number | undefined
    not?: NestedIntNullableFilter | number | null | undefined
    isSet?: boolean | undefined
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean | undefined
    not?: NestedBoolWithAggregatesFilter | boolean | undefined
    _count?: NestedIntFilter | undefined
    _min?: NestedBoolFilter | undefined
    _max?: NestedBoolFilter | undefined
  }

  export type NestedFloatFilter = {
    equals?: number | undefined
    in?: Enumerable<number> | undefined
    notIn?: Enumerable<number> | undefined
    lt?: number | undefined
    lte?: number | undefined
    gt?: number | undefined
    gte?: number | undefined
    not?: NestedFloatFilter | number | undefined
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null | undefined
    in?: Enumerable<number> | null | undefined
    notIn?: Enumerable<number> | null | undefined
    lt?: number | undefined
    lte?: number | undefined
    gt?: number | undefined
    gte?: number | undefined
    not?: NestedFloatNullableFilter | number | null | undefined
    isSet?: boolean | undefined
  }

  export type NestedEnumABeautifulEnumFilter = {
    equals?: ABeautifulEnum | undefined
    in?: Enumerable<ABeautifulEnum> | undefined
    notIn?: Enumerable<ABeautifulEnum> | undefined
    not?: NestedEnumABeautifulEnumFilter | ABeautifulEnum | undefined
  }

  export type NestedEnumABeautifulEnumNullableFilter = {
    equals?: ABeautifulEnum | null | undefined
    in?: Enumerable<ABeautifulEnum> | null | undefined
    notIn?: Enumerable<ABeautifulEnum> | null | undefined
    not?: NestedEnumABeautifulEnumNullableFilter | ABeautifulEnum | null | undefined
    isSet?: boolean | undefined
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null | undefined
    not?: NestedBoolNullableFilter | boolean | null | undefined
    isSet?: boolean | undefined
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number | undefined
    in?: Enumerable<number> | undefined
    notIn?: Enumerable<number> | undefined
    lt?: number | undefined
    lte?: number | undefined
    gt?: number | undefined
    gte?: number | undefined
    not?: NestedIntWithAggregatesFilter | number | undefined
    _count?: NestedIntFilter | undefined
    _avg?: NestedFloatFilter | undefined
    _sum?: NestedIntFilter | undefined
    _min?: NestedIntFilter | undefined
    _max?: NestedIntFilter | undefined
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null | undefined
    in?: Enumerable<number> | null | undefined
    notIn?: Enumerable<number> | null | undefined
    lt?: number | undefined
    lte?: number | undefined
    gt?: number | undefined
    gte?: number | undefined
    not?: NestedIntNullableWithAggregatesFilter | number | null | undefined
    _count?: NestedIntNullableFilter | undefined
    _avg?: NestedFloatNullableFilter | undefined
    _sum?: NestedIntNullableFilter | undefined
    _min?: NestedIntNullableFilter | undefined
    _max?: NestedIntNullableFilter | undefined
    isSet?: boolean | undefined
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number | undefined
    in?: Enumerable<number> | undefined
    notIn?: Enumerable<number> | undefined
    lt?: number | undefined
    lte?: number | undefined
    gt?: number | undefined
    gte?: number | undefined
    not?: NestedFloatWithAggregatesFilter | number | undefined
    _count?: NestedIntFilter | undefined
    _avg?: NestedFloatFilter | undefined
    _sum?: NestedFloatFilter | undefined
    _min?: NestedFloatFilter | undefined
    _max?: NestedFloatFilter | undefined
  }

  export type NestedFloatNullableWithAggregatesFilter = {
    equals?: number | null | undefined
    in?: Enumerable<number> | null | undefined
    notIn?: Enumerable<number> | null | undefined
    lt?: number | undefined
    lte?: number | undefined
    gt?: number | undefined
    gte?: number | undefined
    not?: NestedFloatNullableWithAggregatesFilter | number | null | undefined
    _count?: NestedIntNullableFilter | undefined
    _avg?: NestedFloatNullableFilter | undefined
    _sum?: NestedFloatNullableFilter | undefined
    _min?: NestedFloatNullableFilter | undefined
    _max?: NestedFloatNullableFilter | undefined
    isSet?: boolean | undefined
  }
  export type NestedJsonFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase>, Exclude<keyof Required<NestedJsonFilterBase>, 'path'>>,
        Required<NestedJsonFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase>, 'path'>>

  export type NestedJsonFilterBase = {
    equals?: InputJsonValue | undefined
    not?: InputJsonValue | undefined
  }
  export type NestedJsonNullableFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase>, Exclude<keyof Required<NestedJsonNullableFilterBase>, 'path'>>,
        Required<NestedJsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase>, 'path'>>

  export type NestedJsonNullableFilterBase = {
    equals?: InputJsonValue | null | undefined
    not?: InputJsonValue | null | undefined
    isSet?: boolean | undefined
  }

  export type NestedEnumABeautifulEnumWithAggregatesFilter = {
    equals?: ABeautifulEnum | undefined
    in?: Enumerable<ABeautifulEnum> | undefined
    notIn?: Enumerable<ABeautifulEnum> | undefined
    not?: NestedEnumABeautifulEnumWithAggregatesFilter | ABeautifulEnum | undefined
    _count?: NestedIntFilter | undefined
    _min?: NestedEnumABeautifulEnumFilter | undefined
    _max?: NestedEnumABeautifulEnumFilter | undefined
  }

  export type NestedEnumABeautifulEnumNullableWithAggregatesFilter = {
    equals?: ABeautifulEnum | null | undefined
    in?: Enumerable<ABeautifulEnum> | null | undefined
    notIn?: Enumerable<ABeautifulEnum> | null | undefined
    not?: NestedEnumABeautifulEnumNullableWithAggregatesFilter | ABeautifulEnum | null | undefined
    _count?: NestedIntNullableFilter | undefined
    _min?: NestedEnumABeautifulEnumNullableFilter | undefined
    _max?: NestedEnumABeautifulEnumNullableFilter | undefined
    isSet?: boolean | undefined
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null | undefined
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null | undefined
    _count?: NestedIntNullableFilter | undefined
    _min?: NestedBoolNullableFilter | undefined
    _max?: NestedBoolNullableFilter | undefined
    isSet?: boolean | undefined
  }

  export type EmbedWhereInput = {
    AND?: Enumerable<EmbedWhereInput> | undefined
    OR?: Enumerable<EmbedWhereInput> | undefined
    NOT?: Enumerable<EmbedWhereInput> | undefined
    text?: StringFilter | string | undefined
    boolean?: BoolFilter | boolean | undefined
    embedEmbedList?: XOR<EmbedEmbedCompositeListFilter, Enumerable<EmbedEmbedObjectEqualityInput>> | undefined
    requiredEmbedEmbed?: XOR<EmbedEmbedCompositeFilter, EmbedEmbedObjectEqualityInput> | undefined
    optionalEmbedEmbed?: XOR<EmbedEmbedNullableCompositeFilter, EmbedEmbedObjectEqualityInput> | null | undefined
    scalarList?: IntNullableListFilter | undefined
  }

  export type EmbedEmbedObjectEqualityInput = {
    text: string
    boolean: boolean
  }

  export type EmbedEmbedOrderByCompositeAggregateInput = {
    _count?: SortOrder | undefined
  }

  export type EmbedEmbedOrderByInput = {
    text?: SortOrder | undefined
    boolean?: SortOrder | undefined
  }

  export type NestedBigIntFilter = {
    equals?: bigint | number | undefined
    in?: Enumerable<bigint> | Enumerable<number> | undefined
    notIn?: Enumerable<bigint> | Enumerable<number> | undefined
    lt?: bigint | number | undefined
    lte?: bigint | number | undefined
    gt?: bigint | number | undefined
    gte?: bigint | number | undefined
    not?: NestedBigIntFilter | bigint | number | undefined
  }

  export type NestedBigIntWithAggregatesFilter = {
    equals?: bigint | number | undefined
    in?: Enumerable<bigint> | Enumerable<number> | undefined
    notIn?: Enumerable<bigint> | Enumerable<number> | undefined
    lt?: bigint | number | undefined
    lte?: bigint | number | undefined
    gt?: bigint | number | undefined
    gte?: bigint | number | undefined
    not?: NestedBigIntWithAggregatesFilter | bigint | number | undefined
    _count?: NestedIntFilter | undefined
    _avg?: NestedFloatFilter | undefined
    _sum?: NestedBigIntFilter | undefined
    _min?: NestedBigIntFilter | undefined
    _max?: NestedBigIntFilter | undefined
  }

  export type NestedBytesFilter = {
    equals?: Buffer | undefined
    in?: Enumerable<Buffer> | undefined
    notIn?: Enumerable<Buffer> | undefined
    not?: NestedBytesFilter | Buffer | undefined
  }

  export type NestedBytesWithAggregatesFilter = {
    equals?: Buffer | undefined
    in?: Enumerable<Buffer> | undefined
    notIn?: Enumerable<Buffer> | undefined
    not?: NestedBytesWithAggregatesFilter | Buffer | undefined
    _count?: NestedIntFilter | undefined
    _min?: NestedBytesFilter | undefined
    _max?: NestedBytesFilter | undefined
  }

  export type UserCreateWithoutPostsInput = {
    id?: string | undefined
    email: string
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
    embedHolder: EmbedHolderCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPostsInput = {
    id?: string | undefined
    email: string
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
    embedHolderId: string
  }

  export type UserCreateOrConnectWithoutPostsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
  }

  export type UserUpsertWithoutPostsInput = {
    update: XOR<UserUpdateWithoutPostsInput, UserUncheckedUpdateWithoutPostsInput>
    create: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
  }

  export type UserUpdateWithoutPostsInput = {
    email?: StringFieldUpdateOperationsInput | string | undefined
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
    embedHolder?: EmbedHolderUpdateOneRequiredWithoutUserNestedInput | undefined
  }

  export type UserUncheckedUpdateWithoutPostsInput = {
    email?: StringFieldUpdateOperationsInput | string | undefined
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
    embedHolderId?: StringFieldUpdateOperationsInput | string | undefined
  }

  export type PostCreateWithoutAuthorInput = {
    id?: string | undefined
    createdAt?: Date | string | undefined
    title: string
    content?: string | null | undefined
    published?: boolean | undefined
  }

  export type PostUncheckedCreateWithoutAuthorInput = {
    id?: string | undefined
    createdAt?: Date | string | undefined
    title: string
    content?: string | null | undefined
    published?: boolean | undefined
  }

  export type PostCreateOrConnectWithoutAuthorInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput>
  }

  export type PostCreateManyAuthorInputEnvelope = {
    data: Enumerable<PostCreateManyAuthorInput>
  }

  export type EmbedHolderCreateWithoutUserInput = {
    id?: string | undefined
    time?: Date | string | undefined
    text: string
    boolean: boolean
    embedList?: XOR<EmbedListCreateEnvelopeInput, Enumerable<EmbedCreateInput>> | undefined
    requiredEmbed: XOR<EmbedCreateEnvelopeInput, EmbedCreateInput>
    optionalEmbed?: XOR<EmbedNullableCreateEnvelopeInput, EmbedCreateInput> | null | undefined
  }

  export type EmbedHolderUncheckedCreateWithoutUserInput = {
    id?: string | undefined
    time?: Date | string | undefined
    text: string
    boolean: boolean
    embedList?: XOR<EmbedListCreateEnvelopeInput, Enumerable<EmbedCreateInput>> | undefined
    requiredEmbed: XOR<EmbedCreateEnvelopeInput, EmbedCreateInput>
    optionalEmbed?: XOR<EmbedNullableCreateEnvelopeInput, EmbedCreateInput> | null | undefined
  }

  export type EmbedHolderCreateOrConnectWithoutUserInput = {
    where: EmbedHolderWhereUniqueInput
    create: XOR<EmbedHolderCreateWithoutUserInput, EmbedHolderUncheckedCreateWithoutUserInput>
  }

  export type PostUpsertWithWhereUniqueWithoutAuthorInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutAuthorInput, PostUncheckedUpdateWithoutAuthorInput>
    create: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput>
  }

  export type PostUpdateWithWhereUniqueWithoutAuthorInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutAuthorInput, PostUncheckedUpdateWithoutAuthorInput>
  }

  export type PostUpdateManyWithWhereWithoutAuthorInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutPostsInput>
  }

  export type PostScalarWhereInput = {
    AND?: Enumerable<PostScalarWhereInput> | undefined
    OR?: Enumerable<PostScalarWhereInput> | undefined
    NOT?: Enumerable<PostScalarWhereInput> | undefined
    id?: StringFilter | string | undefined
    createdAt?: DateTimeFilter | Date | string | undefined
    title?: StringFilter | string | undefined
    content?: StringNullableFilter | string | null | undefined
    published?: BoolFilter | boolean | undefined
    authorId?: StringFilter | string | undefined
  }

  export type EmbedHolderUpsertWithoutUserInput = {
    update: XOR<EmbedHolderUpdateWithoutUserInput, EmbedHolderUncheckedUpdateWithoutUserInput>
    create: XOR<EmbedHolderCreateWithoutUserInput, EmbedHolderUncheckedCreateWithoutUserInput>
  }

  export type EmbedHolderUpdateWithoutUserInput = {
    time?: DateTimeFieldUpdateOperationsInput | Date | string | undefined
    text?: StringFieldUpdateOperationsInput | string | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    embedList?: XOR<EmbedListUpdateEnvelopeInput, Enumerable<EmbedCreateInput>> | undefined
    requiredEmbed?: XOR<EmbedUpdateEnvelopeInput, EmbedCreateInput> | undefined
    optionalEmbed?: XOR<EmbedNullableUpdateEnvelopeInput, EmbedCreateInput> | null | undefined
  }

  export type EmbedHolderUncheckedUpdateWithoutUserInput = {
    time?: DateTimeFieldUpdateOperationsInput | Date | string | undefined
    text?: StringFieldUpdateOperationsInput | string | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    embedList?: XOR<EmbedListUpdateEnvelopeInput, Enumerable<EmbedCreateInput>> | undefined
    requiredEmbed?: XOR<EmbedUpdateEnvelopeInput, EmbedCreateInput> | undefined
    optionalEmbed?: XOR<EmbedNullableUpdateEnvelopeInput, EmbedCreateInput> | null | undefined
  }

  export type EmbedEmbedCreateInput = {
    text: string
    boolean: boolean
  }

  export type EmbedCreatescalarListInput = {
    set: Enumerable<number>
  }

  export type UserCreateWithoutEmbedHolderInput = {
    id?: string | undefined
    email: string
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
    posts?: PostCreateNestedManyWithoutAuthorInput | undefined
  }

  export type UserUncheckedCreateWithoutEmbedHolderInput = {
    id?: string | undefined
    email: string
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
    posts?: PostUncheckedCreateNestedManyWithoutAuthorInput | undefined
  }

  export type UserCreateOrConnectWithoutEmbedHolderInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEmbedHolderInput, UserUncheckedCreateWithoutEmbedHolderInput>
  }

  export type UserCreateManyEmbedHolderInputEnvelope = {
    data: Enumerable<UserCreateManyEmbedHolderInput>
  }

  export type EmbedUpdateManyInput = {
    where: EmbedWhereInput
    data: EmbedUpdateInput
  }

  export type EmbedDeleteManyInput = {
    where: EmbedWhereInput
  }

  export type EmbedUpdateInput = {
    text?: StringFieldUpdateOperationsInput | string | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    embedEmbedList?: XOR<EmbedEmbedListUpdateEnvelopeInput, Enumerable<EmbedEmbedCreateInput>> | undefined
    requiredEmbedEmbed?: XOR<EmbedEmbedUpdateEnvelopeInput, EmbedEmbedCreateInput> | undefined
    optionalEmbedEmbed?: XOR<EmbedEmbedNullableUpdateEnvelopeInput, EmbedEmbedCreateInput> | null | undefined
    scalarList?: EmbedUpdatescalarListInput | Enumerable<number> | undefined
  }

  export type EmbedUpsertInput = {
    set: EmbedCreateInput | null
    update: EmbedUpdateInput
  }

  export type UserUpsertWithWhereUniqueWithoutEmbedHolderInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutEmbedHolderInput, UserUncheckedUpdateWithoutEmbedHolderInput>
    create: XOR<UserCreateWithoutEmbedHolderInput, UserUncheckedCreateWithoutEmbedHolderInput>
  }

  export type UserUpdateWithWhereUniqueWithoutEmbedHolderInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutEmbedHolderInput, UserUncheckedUpdateWithoutEmbedHolderInput>
  }

  export type UserUpdateManyWithWhereWithoutEmbedHolderInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUserInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput> | undefined
    OR?: Enumerable<UserScalarWhereInput> | undefined
    NOT?: Enumerable<UserScalarWhereInput> | undefined
    id?: StringFilter | string | undefined
    email?: StringFilter | string | undefined
    int?: IntFilter | number | undefined
    optionalInt?: IntNullableFilter | number | null | undefined
    float?: FloatFilter | number | undefined
    optionalFloat?: FloatNullableFilter | number | null | undefined
    string?: StringFilter | string | undefined
    optionalString?: StringNullableFilter | string | null | undefined
    json?: JsonFilter | undefined
    optionalJson?: JsonNullableFilter | undefined
    enum?: EnumABeautifulEnumFilter | ABeautifulEnum | undefined
    optionalEnum?: EnumABeautifulEnumNullableFilter | ABeautifulEnum | null | undefined
    boolean?: BoolFilter | boolean | undefined
    optionalBoolean?: BoolNullableFilter | boolean | null | undefined
    embedHolderId?: StringFilter | string | undefined
  }

  export type NCreateWithoutMInput = {
    id?: string | undefined
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
  }

  export type NUncheckedCreateWithoutMInput = {
    id?: string | undefined
    m_ids?: NCreatem_idsInput | Enumerable<string> | undefined
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
  }

  export type NCreateOrConnectWithoutMInput = {
    where: NWhereUniqueInput
    create: XOR<NCreateWithoutMInput, NUncheckedCreateWithoutMInput>
  }

  export type NUpsertWithWhereUniqueWithoutMInput = {
    where: NWhereUniqueInput
    update: XOR<NUpdateWithoutMInput, NUncheckedUpdateWithoutMInput>
    create: XOR<NCreateWithoutMInput, NUncheckedCreateWithoutMInput>
  }

  export type NUpdateWithWhereUniqueWithoutMInput = {
    where: NWhereUniqueInput
    data: XOR<NUpdateWithoutMInput, NUncheckedUpdateWithoutMInput>
  }

  export type NUpdateManyWithWhereWithoutMInput = {
    where: NScalarWhereInput
    data: XOR<NUpdateManyMutationInput, NUncheckedUpdateManyWithoutNInput>
  }

  export type NScalarWhereInput = {
    AND?: Enumerable<NScalarWhereInput> | undefined
    OR?: Enumerable<NScalarWhereInput> | undefined
    NOT?: Enumerable<NScalarWhereInput> | undefined
    id?: StringFilter | string | undefined
    m_ids?: StringNullableListFilter | undefined
    int?: IntFilter | number | undefined
    optionalInt?: IntNullableFilter | number | null | undefined
    float?: FloatFilter | number | undefined
    optionalFloat?: FloatNullableFilter | number | null | undefined
    string?: StringFilter | string | undefined
    optionalString?: StringNullableFilter | string | null | undefined
    json?: JsonFilter | undefined
    optionalJson?: JsonNullableFilter | undefined
    enum?: EnumABeautifulEnumFilter | ABeautifulEnum | undefined
    optionalEnum?: EnumABeautifulEnumNullableFilter | ABeautifulEnum | null | undefined
    boolean?: BoolFilter | boolean | undefined
    optionalBoolean?: BoolNullableFilter | boolean | null | undefined
  }

  export type MCreateWithoutNInput = {
    id?: string | undefined
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
  }

  export type MUncheckedCreateWithoutNInput = {
    id?: string | undefined
    n_ids?: MCreaten_idsInput | Enumerable<string> | undefined
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
  }

  export type MCreateOrConnectWithoutNInput = {
    where: MWhereUniqueInput
    create: XOR<MCreateWithoutNInput, MUncheckedCreateWithoutNInput>
  }

  export type MUpsertWithWhereUniqueWithoutNInput = {
    where: MWhereUniqueInput
    update: XOR<MUpdateWithoutNInput, MUncheckedUpdateWithoutNInput>
    create: XOR<MCreateWithoutNInput, MUncheckedCreateWithoutNInput>
  }

  export type MUpdateWithWhereUniqueWithoutNInput = {
    where: MWhereUniqueInput
    data: XOR<MUpdateWithoutNInput, MUncheckedUpdateWithoutNInput>
  }

  export type MUpdateManyWithWhereWithoutNInput = {
    where: MScalarWhereInput
    data: XOR<MUpdateManyMutationInput, MUncheckedUpdateManyWithoutMInput>
  }

  export type MScalarWhereInput = {
    AND?: Enumerable<MScalarWhereInput> | undefined
    OR?: Enumerable<MScalarWhereInput> | undefined
    NOT?: Enumerable<MScalarWhereInput> | undefined
    id?: StringFilter | string | undefined
    n_ids?: StringNullableListFilter | undefined
    int?: IntFilter | number | undefined
    optionalInt?: IntNullableFilter | number | null | undefined
    float?: FloatFilter | number | undefined
    optionalFloat?: FloatNullableFilter | number | null | undefined
    string?: StringFilter | string | undefined
    optionalString?: StringNullableFilter | string | null | undefined
    json?: JsonFilter | undefined
    optionalJson?: JsonNullableFilter | undefined
    enum?: EnumABeautifulEnumFilter | ABeautifulEnum | undefined
    optionalEnum?: EnumABeautifulEnumNullableFilter | ABeautifulEnum | null | undefined
    boolean?: BoolFilter | boolean | undefined
    optionalBoolean?: BoolNullableFilter | boolean | null | undefined
  }

  export type ManyRequiredCreateWithoutOneInput = {
    id?: string | undefined
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
  }

  export type ManyRequiredUncheckedCreateWithoutOneInput = {
    id?: string | undefined
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
  }

  export type ManyRequiredCreateOrConnectWithoutOneInput = {
    where: ManyRequiredWhereUniqueInput
    create: XOR<ManyRequiredCreateWithoutOneInput, ManyRequiredUncheckedCreateWithoutOneInput>
  }

  export type ManyRequiredCreateManyOneInputEnvelope = {
    data: Enumerable<ManyRequiredCreateManyOneInput>
  }

  export type ManyRequiredUpsertWithWhereUniqueWithoutOneInput = {
    where: ManyRequiredWhereUniqueInput
    update: XOR<ManyRequiredUpdateWithoutOneInput, ManyRequiredUncheckedUpdateWithoutOneInput>
    create: XOR<ManyRequiredCreateWithoutOneInput, ManyRequiredUncheckedCreateWithoutOneInput>
  }

  export type ManyRequiredUpdateWithWhereUniqueWithoutOneInput = {
    where: ManyRequiredWhereUniqueInput
    data: XOR<ManyRequiredUpdateWithoutOneInput, ManyRequiredUncheckedUpdateWithoutOneInput>
  }

  export type ManyRequiredUpdateManyWithWhereWithoutOneInput = {
    where: ManyRequiredScalarWhereInput
    data: XOR<ManyRequiredUpdateManyMutationInput, ManyRequiredUncheckedUpdateManyWithoutManyInput>
  }

  export type ManyRequiredScalarWhereInput = {
    AND?: Enumerable<ManyRequiredScalarWhereInput> | undefined
    OR?: Enumerable<ManyRequiredScalarWhereInput> | undefined
    NOT?: Enumerable<ManyRequiredScalarWhereInput> | undefined
    id?: StringFilter | string | undefined
    oneOptionalId?: StringNullableFilter | string | null | undefined
    int?: IntFilter | number | undefined
    optionalInt?: IntNullableFilter | number | null | undefined
    float?: FloatFilter | number | undefined
    optionalFloat?: FloatNullableFilter | number | null | undefined
    string?: StringFilter | string | undefined
    optionalString?: StringNullableFilter | string | null | undefined
    json?: JsonFilter | undefined
    optionalJson?: JsonNullableFilter | undefined
    enum?: EnumABeautifulEnumFilter | ABeautifulEnum | undefined
    optionalEnum?: EnumABeautifulEnumNullableFilter | ABeautifulEnum | null | undefined
    boolean?: BoolFilter | boolean | undefined
    optionalBoolean?: BoolNullableFilter | boolean | null | undefined
  }

  export type OneOptionalCreateWithoutManyInput = {
    id?: string | undefined
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
  }

  export type OneOptionalUncheckedCreateWithoutManyInput = {
    id?: string | undefined
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
  }

  export type OneOptionalCreateOrConnectWithoutManyInput = {
    where: OneOptionalWhereUniqueInput
    create: XOR<OneOptionalCreateWithoutManyInput, OneOptionalUncheckedCreateWithoutManyInput>
  }

  export type OneOptionalUpsertWithoutManyInput = {
    update: XOR<OneOptionalUpdateWithoutManyInput, OneOptionalUncheckedUpdateWithoutManyInput>
    create: XOR<OneOptionalCreateWithoutManyInput, OneOptionalUncheckedCreateWithoutManyInput>
  }

  export type OneOptionalUpdateWithoutManyInput = {
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
  }

  export type OneOptionalUncheckedUpdateWithoutManyInput = {
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
  }

  export type OptionalSide2CreateWithoutOptiInput = {
    id?: string | undefined
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
  }

  export type OptionalSide2UncheckedCreateWithoutOptiInput = {
    id?: string | undefined
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
  }

  export type OptionalSide2CreateOrConnectWithoutOptiInput = {
    where: OptionalSide2WhereUniqueInput
    create: XOR<OptionalSide2CreateWithoutOptiInput, OptionalSide2UncheckedCreateWithoutOptiInput>
  }

  export type OptionalSide2UpsertWithoutOptiInput = {
    update: XOR<OptionalSide2UpdateWithoutOptiInput, OptionalSide2UncheckedUpdateWithoutOptiInput>
    create: XOR<OptionalSide2CreateWithoutOptiInput, OptionalSide2UncheckedCreateWithoutOptiInput>
  }

  export type OptionalSide2UpdateWithoutOptiInput = {
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
  }

  export type OptionalSide2UncheckedUpdateWithoutOptiInput = {
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
  }

  export type OptionalSide1CreateWithoutOptiInput = {
    id?: string | undefined
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
  }

  export type OptionalSide1UncheckedCreateWithoutOptiInput = {
    id?: string | undefined
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
  }

  export type OptionalSide1CreateOrConnectWithoutOptiInput = {
    where: OptionalSide1WhereUniqueInput
    create: XOR<OptionalSide1CreateWithoutOptiInput, OptionalSide1UncheckedCreateWithoutOptiInput>
  }

  export type OptionalSide1UpsertWithoutOptiInput = {
    update: XOR<OptionalSide1UpdateWithoutOptiInput, OptionalSide1UncheckedUpdateWithoutOptiInput>
    create: XOR<OptionalSide1CreateWithoutOptiInput, OptionalSide1UncheckedCreateWithoutOptiInput>
  }

  export type OptionalSide1UpdateWithoutOptiInput = {
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
  }

  export type OptionalSide1UncheckedUpdateWithoutOptiInput = {
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
  }

  export type EmbedEmbedCompositeListFilter = {
    equals?: Enumerable<EmbedEmbedObjectEqualityInput> | undefined
    every?: EmbedEmbedWhereInput | undefined
    some?: EmbedEmbedWhereInput | undefined
    none?: EmbedEmbedWhereInput | undefined
    isEmpty?: boolean | undefined
    isSet?: boolean | undefined
  }

  export type EmbedEmbedCompositeFilter = {
    equals?: EmbedEmbedObjectEqualityInput | undefined
    is?: EmbedEmbedWhereInput | undefined
    isNot?: EmbedEmbedWhereInput | undefined
  }

  export type EmbedEmbedNullableCompositeFilter = {
    equals?: EmbedEmbedObjectEqualityInput | null | undefined
    is?: EmbedEmbedWhereInput | null | undefined
    isNot?: EmbedEmbedWhereInput | null | undefined
    isSet?: boolean | undefined
  }

  export type PostCreateManyAuthorInput = {
    id?: string | undefined
    createdAt?: Date | string | undefined
    title: string
    content?: string | null | undefined
    published?: boolean | undefined
  }

  export type PostUpdateWithoutAuthorInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string | undefined
    title?: StringFieldUpdateOperationsInput | string | undefined
    content?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    published?: BoolFieldUpdateOperationsInput | boolean | undefined
  }

  export type PostUncheckedUpdateWithoutAuthorInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string | undefined
    title?: StringFieldUpdateOperationsInput | string | undefined
    content?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    published?: BoolFieldUpdateOperationsInput | boolean | undefined
  }

  export type PostUncheckedUpdateManyWithoutPostsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string | undefined
    title?: StringFieldUpdateOperationsInput | string | undefined
    content?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    published?: BoolFieldUpdateOperationsInput | boolean | undefined
  }

  export type UserCreateManyEmbedHolderInput = {
    id?: string | undefined
    email: string
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
  }

  export type EmbedEmbedListUpdateEnvelopeInput = {
    set?: Enumerable<EmbedEmbedCreateInput> | undefined
    push?: Enumerable<EmbedEmbedCreateInput> | undefined
    updateMany?: EmbedEmbedUpdateManyInput | undefined
    deleteMany?: EmbedEmbedDeleteManyInput | undefined
  }

  export type EmbedEmbedUpdateEnvelopeInput = {
    set?: EmbedEmbedCreateInput | undefined
    update?: EmbedEmbedUpdateInput | undefined
  }

  export type EmbedEmbedNullableUpdateEnvelopeInput = {
    set?: EmbedEmbedCreateInput | null | undefined
    upsert?: EmbedEmbedUpsertInput | undefined
    unset?: boolean | undefined
  }

  export type EmbedUpdatescalarListInput = {
    set?: Enumerable<number> | undefined
    push?: number | Enumerable<number> | undefined
  }

  export type UserUpdateWithoutEmbedHolderInput = {
    email?: StringFieldUpdateOperationsInput | string | undefined
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
    posts?: PostUpdateManyWithoutAuthorNestedInput | undefined
  }

  export type UserUncheckedUpdateWithoutEmbedHolderInput = {
    email?: StringFieldUpdateOperationsInput | string | undefined
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
    posts?: PostUncheckedUpdateManyWithoutAuthorNestedInput | undefined
  }

  export type UserUncheckedUpdateManyWithoutUserInput = {
    email?: StringFieldUpdateOperationsInput | string | undefined
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
  }

  export type NUpdateWithoutMInput = {
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
  }

  export type NUncheckedUpdateWithoutMInput = {
    m_ids?: NUpdatem_idsInput | Enumerable<string> | undefined
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
  }

  export type NUncheckedUpdateManyWithoutNInput = {
    m_ids?: NUpdatem_idsInput | Enumerable<string> | undefined
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
  }

  export type MUpdateWithoutNInput = {
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
  }

  export type MUncheckedUpdateWithoutNInput = {
    n_ids?: MUpdaten_idsInput | Enumerable<string> | undefined
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
  }

  export type MUncheckedUpdateManyWithoutMInput = {
    n_ids?: MUpdaten_idsInput | Enumerable<string> | undefined
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
  }

  export type ManyRequiredCreateManyOneInput = {
    id?: string | undefined
    int: number
    optionalInt?: number | null | undefined
    float: number
    optionalFloat?: number | null | undefined
    string: string
    optionalString?: string | null | undefined
    json: InputJsonValue
    optionalJson?: InputJsonValue | null | undefined
    enum: ABeautifulEnum
    optionalEnum?: ABeautifulEnum | null | undefined
    boolean: boolean
    optionalBoolean?: boolean | null | undefined
  }

  export type ManyRequiredUpdateWithoutOneInput = {
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
  }

  export type ManyRequiredUncheckedUpdateWithoutOneInput = {
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
  }

  export type ManyRequiredUncheckedUpdateManyWithoutManyInput = {
    int?: IntFieldUpdateOperationsInput | number | undefined
    optionalInt?: NullableIntFieldUpdateOperationsInput | number | null | undefined
    float?: FloatFieldUpdateOperationsInput | number | undefined
    optionalFloat?: NullableFloatFieldUpdateOperationsInput | number | null | undefined
    string?: StringFieldUpdateOperationsInput | string | undefined
    optionalString?: NullableStringFieldUpdateOperationsInput | string | null | undefined
    json?: InputJsonValue | InputJsonValue | undefined
    optionalJson?: InputJsonValue | InputJsonValue | null | undefined
    enum?: EnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | undefined
    optionalEnum?: NullableEnumABeautifulEnumFieldUpdateOperationsInput | ABeautifulEnum | null | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
    optionalBoolean?: NullableBoolFieldUpdateOperationsInput | boolean | null | undefined
  }

  export type EmbedEmbedWhereInput = {
    AND?: Enumerable<EmbedEmbedWhereInput> | undefined
    OR?: Enumerable<EmbedEmbedWhereInput> | undefined
    NOT?: Enumerable<EmbedEmbedWhereInput> | undefined
    text?: StringFilter | string | undefined
    boolean?: BoolFilter | boolean | undefined
  }

  export type EmbedEmbedUpdateManyInput = {
    where: EmbedEmbedWhereInput
    data: EmbedEmbedUpdateInput
  }

  export type EmbedEmbedDeleteManyInput = {
    where: EmbedEmbedWhereInput
  }

  export type EmbedEmbedUpdateInput = {
    text?: StringFieldUpdateOperationsInput | string | undefined
    boolean?: BoolFieldUpdateOperationsInput | boolean | undefined
  }

  export type EmbedEmbedUpsertInput = {
    set: EmbedEmbedCreateInput | null
    update: EmbedEmbedUpdateInput
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}
`;
